name: üéØ Frontend Release (Docker Build Only)

permissions:
  contents: write

on:
  repository_dispatch:
    types: [coordinated_release]
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (e.g., 1.4.0)"
        required: true
        type: string

jobs:
  setup_release:
    name: üè∑Ô∏è Setup Frontend Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      triggered_by_backend: ${{ steps.version.outputs.triggered_by_backend }}
    steps:
      - name: Determine version and source
        id: version
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            VERSION="${{ github.event.client_payload.version }}"
            TAG_NAME="${{ github.event.client_payload.tag_name }}"
            TRIGGERED_BY_BACKEND="true"
            echo "üéØ Release triggered by backend: $VERSION"
          else
            VERSION="${{ inputs.release_version }}"
            TAG_NAME="v${VERSION}"
            TRIGGERED_BY_BACKEND="false"
            echo "üë§ Manual release triggered: $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "triggered_by_backend=$TRIGGERED_BY_BACKEND" >> $GITHUB_OUTPUT

  create_frontend_tag:
    name: üè∑Ô∏è Create Frontend Tag
    runs-on: ubuntu-latest
    needs: [setup_release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          TAG_NAME="${{ needs.setup_release.outputs.tag_name }}"

          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "‚ö†Ô∏è Tag ${TAG_NAME} already exists, skipping"
            exit 0
          fi

          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "$TAG_NAME" -m "Frontend Release $TAG_NAME"
          git push origin "$TAG_NAME"

  build_frontend_docker:
    name: üê≥ Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: [setup_release, create_frontend_tag]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup_release.outputs.tag_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/crm-frontend:${{ needs.setup_release.outputs.tag_name }}
            ${{ secrets.DOCKER_USERNAME }}/crm-frontend:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.setup_release.outputs.tag_name }}
          name: Frontend ${{ needs.setup_release.outputs.tag_name }}
          body: |
            ## üéØ Frontend Release ${{ needs.setup_release.outputs.tag_name }}

            **Docker Image:** `${{ secrets.DOCKER_USERNAME }}/crm-frontend:${{ needs.setup_release.outputs.tag_name }}`

            üìù **Note:** Deployment is handled by the backend repository.

      - name: Summary
        run: |
          echo "‚úÖ Frontend Docker image built and pushed"
          echo "üê≥ ${{ secrets.DOCKER_USERNAME }}/crm-frontend:${{ needs.setup_release.outputs.tag_name }}"
          echo "üìù Deployment will be handled by backend repository"
