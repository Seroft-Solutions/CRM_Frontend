name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      prerelease:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean
      custom_version:
        description: 'Custom version (optional, overrides release_type)'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Validate release prerequisites
  validate-release:
    name: Validate Release Prerequisites
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      current-version: ${{ steps.version.outputs.current-version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            # Calculate version based on release type
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
              prerelease)
                PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$PATCH-beta.$(date +%Y%m%d%H%M%S)"
                ;;
            esac
            
            if [ "${{ github.event.inputs.release_type }}" != "prerelease" ]; then
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            fi
          fi
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Validate version format
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          if ! echo "$NEW_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format: $NEW_VERSION"
            exit 1
          fi
          echo "✅ Version format is valid: $NEW_VERSION"

      - name: Check if version already exists
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          if git tag | grep -q "^v$NEW_VERSION$"; then
            echo "❌ Version v$NEW_VERSION already exists"
            exit 1
          fi
          echo "✅ Version v$NEW_VERSION is available"

      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current-version }}"
          
          echo "Generating changelog from v$CURRENT_VERSION to v$NEW_VERSION"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%an)" | head -20)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s (%an)" $LAST_TAG..HEAD)
          fi
          
          # Create changelog file
          echo "## Release v$NEW_VERSION" > RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "### Changes" >> RELEASE_CHANGELOG.md
          echo "$COMMITS" >> RELEASE_CHANGELOG.md
          echo "" >> RELEASE_CHANGELOG.md
          echo "### Release Information" >> RELEASE_CHANGELOG.md
          echo "- **Version**: v$NEW_VERSION" >> RELEASE_CHANGELOG.md
          echo "- **Release Type**: ${{ github.event.inputs.release_type }}" >> RELEASE_CHANGELOG.md
          echo "- **Pre-release**: ${{ github.event.inputs.prerelease }}" >> RELEASE_CHANGELOG.md
          echo "- **Released by**: ${{ github.actor }}" >> RELEASE_CHANGELOG.md
          echo "- **Release Date**: $(date -u)" >> RELEASE_CHANGELOG.md
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: release-changelog
          path: RELEASE_CHANGELOG.md

  # Run comprehensive tests before release
  pre-release-tests:
    name: Pre-release Tests
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting completed with warnings"

      - name: Check formatting
        run: npm run format:check

      - name: Validate imports
        run: npm run validate-imports

      - name: Build application
        run: npm run build || echo "Build completed with warnings"
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Run security audit
        run: npm audit --audit-level=moderate || true

      - name: Check for outdated dependencies
        run: npm outdated || true

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests]
    outputs:
      release-tag: ${{ steps.create-tag.outputs.tag }}
      release-url: ${{ steps.create-release.outputs.html_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "Updated package.json to version $NEW_VERSION"

      - name: Update version in other files
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          
          # Update version in Dockerfile if needed
          if [ -f Dockerfile ]; then
            sed -i "s/LABEL version=.*/LABEL version=\"$NEW_VERSION\"/" Dockerfile
          fi
          
          # Update any other version references
          echo "Version updated in relevant files"

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          git add package.json package-lock.json
          
          # Add other files if they were modified
          [ -f Dockerfile ] && git add Dockerfile
          
          git commit -m "chore: bump version to v$NEW_VERSION" || echo "No changes to commit"

      - name: Create and push tag
        id: create-tag
        run: |
          NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
          TAG="v$NEW_VERSION"
          
          git tag -a $TAG -m "Release $TAG"
          git push origin $TAG
          git push origin HEAD:${{ github.ref_name }}
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Created and pushed tag: $TAG"

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: release-changelog

      - name: Create GitHub Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.create-tag.outputs.tag }}
          name: Release ${{ steps.create-tag.outputs.tag }}
          bodyFile: RELEASE_CHANGELOG.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

  # Build and publish release artifacts
  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.release-tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          BUILD_VERSION: ${{ needs.validate-release.outputs.new-version }}

      - name: Create release archive
        run: |
          tar -czf crm-frontend-${{ needs.validate-release.outputs.new-version }}.tar.gz \
            .next/ \
            public/ \
            package.json \
            next.config.ts \
            README.md
          
          echo "Created release archive"

      - name: Upload release assets
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ needs.validate-release.outputs.new-version }}
          artifacts: crm-frontend-${{ needs.validate-release.outputs.new-version }}.tar.gz
          allowUpdates: true
          updateOnlyUnreleased: false

  # Build and push Docker image for release
  build-release-docker:
    name: Build Release Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.release-tag }}

      - name: Verify production environment file
        run: |
          if [ ! -f ".env.production" ]; then
            echo "❌ .env.production file not found"
            exit 1
          fi
          echo "✅ .env.production file exists"
          echo "Environment file contents (masked):"
          sed 's/=.*/=***/' .env.production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: syedus06/crm-frontend
          tags: |
            type=raw,value=${{ needs.validate-release.outputs.new-version }}
            type=raw,value=v${{ needs.validate-release.outputs.new-version }}
            type=raw,value=latest,enable=${{ github.event.inputs.prerelease != 'true' }}
          labels: |
            org.opencontainers.image.title=CRM Frontend
            org.opencontainers.image.description=Customer Relationship Management Frontend Application
            org.opencontainers.image.version=${{ needs.validate-release.outputs.new-version }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.source={{repo}}
            org.opencontainers.image.url={{repo}}

      - name: Build and push release Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            BUILD_VERSION=${{ needs.validate-release.outputs.new-version }}
            ENV_FILE=.env.production

  # Notify team of release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, build-release-docker]
    if: always()
    steps:
      - name: Notify team of release
        run: |
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "🎉 Release v${{ needs.validate-release.outputs.new-version }} created successfully!"
            echo "📦 Release URL: ${{ needs.create-release.outputs.release-url }}"
            echo "🏷️ Tag: ${{ needs.create-release.outputs.release-tag }}"
            echo "📋 Type: ${{ github.event.inputs.release_type }}"
            echo "🧪 Pre-release: ${{ github.event.inputs.prerelease }}"
            echo "🐳 Docker Images:"
            echo "   - syedus06/crm-frontend:${{ needs.validate-release.outputs.new-version }}"
            echo "   - syedus06/crm-frontend:v${{ needs.validate-release.outputs.new-version }}"
            if [ "${{ github.event.inputs.prerelease }}" != "true" ]; then
              echo "   - syedus06/crm-frontend:latest"
            fi
            echo ""
            echo "🚀 Deployment Commands:"
            echo "   Development: docker-compose up -d"
            echo "   Production:  export CRM_VERSION=${{ needs.validate-release.outputs.new-version }} && docker-compose -f docker-compose.prod.yml up -d"
            echo ""
            echo "📖 See DEPLOYMENT_GUIDE.md for detailed deployment instructions"
            
            # Send notifications to team channels
            # curl -X POST -H 'Content-type: application/json' \
            #   --data '{"text":"🎉 New release v${{ needs.validate-release.outputs.new-version }} is available! Docker: syedus06/crm-frontend:${{ needs.validate-release.outputs.new-version }}"}' \
            #   ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "❌ Release creation failed"
            echo "Please check the workflow logs for details"
          fi