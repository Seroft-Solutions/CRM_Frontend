name: Release Management
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (e.g., 1.2.3)"
        required: true
        type: string
      create_tag:
        description: "Create git tag"
        required: false
        type: boolean
        default: true
      create_release:
        description: "Create GitHub release"
        required: false
        type: boolean
        default: true
      trigger_backend_release:
        description: "Trigger backend release with same version"
        required: false
        type: boolean
        default: false
  push:
    tags: ["v*.*.*"]

env:
  NODE_VERSION: "20"
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  create_tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.create_tag
    outputs:
      tag_name: v${{ inputs.release_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version format
        run: |
          VERSION="${{ inputs.release_version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Use semantic versioning (e.g., 1.2.3)"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          VERSION="${{ inputs.release_version }}"
          if git tag -l | grep -q "^v${VERSION}$"; then
            echo "❌ Tag v${VERSION} already exists"
            exit 1
          fi

      - name: Create and push tag
        env:
          VERSION: ${{ inputs.release_version }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          echo "🏷️ Creating tag v${VERSION}"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"

          echo "✅ Tag v${VERSION} created and pushed"

  build_docker_image:
    name: Build and Tag Docker Image
    needs: [create_tag]
    if: always() && (needs.create_tag.result == 'success' || github.event_name == 'push')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create_tag.outputs.tag_name || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: syedus06/crm-frontend
          tags: |
            type=raw,value=${{ inputs.release_version }}
            type=raw,value=${{ needs.create_tag.outputs.tag_name || github.ref_name }}
            type=raw,value=latest,enable=${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            BUILD_VERSION=${{ inputs.release_version }}
            ENV_FILE=.env.production

  build_release_artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [create_tag]
    if: always() && (needs.create_tag.result == 'success' || github.event_name == 'push')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create_tag.outputs.tag_name || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Build release artifacts
        run: |
          echo "📦 Building release artifacts"
          npm ci
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.create_tag.outputs.tag_name || github.ref_name }}
          path: |
            .next/
            package.json
            next.config.ts
          retention-days: 30

  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [create_tag, build_docker_image, build_release_artifacts]
    if: >
      always() &&
      (needs.build_release_artifacts.result == 'success') &&
      (needs.build_docker_image.result == 'success') &&
      ((github.event_name == 'workflow_dispatch' && inputs.create_release) ||
       (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create_tag.outputs.tag_name || github.ref }}

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.create_tag.outputs.tag_name || github.ref_name }}
          path: release-artifacts

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME="${{ needs.create_tag.outputs.tag_name || github.ref_name }}"

          # Get previous tag for comparison
          PREV_TAG=$(git tag --sort=-version:refname | grep -A1 "$TAG_NAME" | tail -n1)

          if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "$TAG_NAME" ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" "$PREV_TAG..HEAD" >> release_notes.md
          else
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            echo "Initial release" >> release_notes.md
          fi

          echo "📝 Generated release notes"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create_tag.outputs.tag_name || github.ref_name }}
          name: ${{ needs.create_tag.outputs.tag_name || github.ref_name }}
          body_path: release_notes.md
          files: release-artifacts/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display release info
        run: |
          TAG_NAME="${{ needs.create_tag.outputs.tag_name || github.ref_name }}"
          echo "🎉 Release $TAG_NAME created successfully!"
          echo "🔗 View at: https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME"

  trigger_backend_release:
    name: Trigger Backend Release
    runs-on: ubuntu-latest
    needs: [create_tag, create_github_release]
    if: github.event_name == 'workflow_dispatch' && inputs.trigger_backend_release && needs.create_github_release.result == 'success'
    steps:
      - name: Trigger backend release workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: 'CRM_Backend',
                workflow_id: 'release.yml',
                ref: 'master',
                inputs: {
                  release_version: '${{ inputs.release_version }}',
                  create_tag: 'true',
                  create_release: 'true'
                }
              });
              
              console.log('🚀 Triggered backend release workflow');
              console.log('Response:', response.status);
            } catch (error) {
              console.log('⚠️ Could not trigger backend release:', error.message);
              console.log('This might be due to missing PERSONAL_ACCESS_TOKEN secret');
            }

      - name: Notify coordination
        run: |
          echo "🔄 Coordinated release initiated"
          echo "Frontend: v${{ inputs.release_version }} ✅"
          echo "Backend: v${{ inputs.release_version }} 🚀"
          echo ""
          echo "Check backend release at:"
          echo "https://github.com/${{ github.repository_owner }}/CRM_Backend/actions"
