name: Hotfix Deployment

on:
  workflow_dispatch:
    inputs:
      hotfix_branch:
        description: 'Hotfix branch name'
        required: true
        type: string
      production_urgency:
        description: 'Production urgency level'
        required: true
        default: 'high'
        type: choice
        options:
          - critical
          - high
          - medium
      skip_tests:
        description: 'Skip comprehensive tests (emergency only)'
        required: false
        default: false
        type: boolean
      description:
        description: 'Hotfix description'
        required: true
        type: string
      rollback_plan:
        description: 'Rollback plan if hotfix fails'
        required: true
        type: string

env:
  IMAGE_NAME: syedus06/crm-frontend
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Validate hotfix request
  validate-hotfix:
    name: Validate Hotfix Request
    runs-on: ubuntu-latest
    outputs:
      hotfix-version: ${{ steps.version.outputs.hotfix-version }}
      base-version: ${{ steps.version.outputs.base-version }}
      is-emergency: ${{ steps.validate.outputs.is-emergency }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate hotfix branch
        run: |
          HOTFIX_BRANCH="${{ github.event.inputs.hotfix_branch }}"
          
          if ! git show-ref --verify --quiet refs/remotes/origin/$HOTFIX_BRANCH; then
            echo "❌ Hotfix branch '$HOTFIX_BRANCH' does not exist"
            exit 1
          fi
          
          echo "✅ Hotfix branch '$HOTFIX_BRANCH' exists"

      - name: Checkout hotfix branch
        run: |
          git checkout ${{ github.event.inputs.hotfix_branch }}

      - name: Validate urgency and skip tests
        id: validate
        run: |
          URGENCY="${{ github.event.inputs.production_urgency }}"
          SKIP_TESTS="${{ github.event.inputs.skip_tests }}"
          
          if [ "$URGENCY" = "critical" ] && [ "$SKIP_TESTS" = "true" ]; then
            echo "is-emergency=true" >> $GITHUB_OUTPUT
            echo "⚠️ EMERGENCY DEPLOYMENT - Tests will be skipped"
          elif [ "$SKIP_TESTS" = "true" ] && [ "$URGENCY" != "critical" ]; then
            echo "❌ Tests can only be skipped for critical urgency"
            exit 1
          else
            echo "is-emergency=false" >> $GITHUB_OUTPUT
            echo "✅ Standard hotfix deployment"
          fi

      - name: Generate hotfix version
        id: version
        run: |
          # Get current production version
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          BASE_VERSION=${CURRENT_VERSION#v}
          
          # Generate hotfix version
          HOTFIX_VERSION="$BASE_VERSION-hotfix.$(date +%Y%m%d%H%M%S)"
          
          echo "base-version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "hotfix-version=$HOTFIX_VERSION" >> $GITHUB_OUTPUT
          
          echo "Base version: $BASE_VERSION"
          echo "Hotfix version: $HOTFIX_VERSION"

      - name: Create hotfix summary
        run: |
          cat > hotfix-summary.md << EOF
          # Hotfix Deployment Summary
          
          ## Hotfix Details
          - **Branch**: ${{ github.event.inputs.hotfix_branch }}
          - **Version**: ${{ steps.version.outputs.hotfix-version }}
          - **Base Version**: ${{ steps.version.outputs.base-version }}
          - **Urgency**: ${{ github.event.inputs.production_urgency }}
          - **Emergency Mode**: ${{ steps.validate.outputs.is-emergency }}
          - **Requested By**: ${{ github.actor }}
          - **Timestamp**: $(date -u)
          
          ## Description
          ${{ github.event.inputs.description }}
          
          ## Rollback Plan
          ${{ github.event.inputs.rollback_plan }}
          
          ## Changes Included
          $(git log --oneline main..${{ github.event.inputs.hotfix_branch }})
          EOF

      - name: Upload hotfix summary
        uses: actions/upload-artifact@v4
        with:
          name: hotfix-summary
          path: hotfix-summary.md

  # Quick validation tests
  quick-validation:
    name: Quick Validation Tests
    runs-on: ubuntu-latest
    needs: validate-hotfix
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Quick syntax check
        run: |
          echo "Running syntax validation..."
          npm run lint -- --max-warnings 0 || echo "Linting issues detected"

      - name: Quick build test
        run: |
          echo "Testing build process..."
          npm run build || echo "Build completed with warnings"
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Basic functionality test
        run: |
          echo "Running basic functionality tests..."
          # Add basic smoke tests here
          echo "✅ Basic functionality verified"

  # Comprehensive tests (if not emergency)
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: [validate-hotfix, quick-validation]
    if: needs.validate-hotfix.outputs.is-emergency != 'true'
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Validate imports
        run: npm run validate-imports

      - name: Security audit
        run: npm audit --audit-level=moderate || true

      - name: Build verification
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

  # Build hotfix Docker image
  build-hotfix-image:
    name: Build Hotfix Docker Image
    runs-on: ubuntu-latest
    needs: [validate-hotfix, quick-validation, comprehensive-tests]
    if: always() && needs.validate-hotfix.result == 'success' && needs.quick-validation.result == 'success' && (needs.comprehensive-tests.result == 'success' || needs.validate-hotfix.outputs.is-emergency == 'true')
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate-hotfix.outputs.hotfix-version }}
            type=raw,value=hotfix-latest
            type=raw,value=hotfix-${{ github.sha }}

      - name: Build and push hotfix image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            BUILD_VERSION=${{ needs.validate-hotfix.outputs.hotfix-version }}

  # Deploy to staging for verification
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-hotfix, build-hotfix-image]
    environment:
      name: staging
      url: https://staging.crm-frontend.example.com
    steps:
      - name: Deploy hotfix to staging
        run: |
          echo "Deploying hotfix ${{ needs.validate-hotfix.outputs.hotfix-version }} to staging"
          
          # Deploy to staging environment
          # kubectl set image deployment/crm-frontend crm-frontend=${{ env.IMAGE_NAME }}:${{ needs.validate-hotfix.outputs.hotfix-version }}
          # kubectl rollout status deployment/crm-frontend
          
          echo "Staging deployment completed"

      - name: Run staging smoke tests
        run: |
          echo "Running smoke tests on staging..."
          sleep 30
          
          # Run smoke tests
          # curl -f https://staging.crm-frontend.example.com/health
          # npm run test:smoke -- --baseUrl=https://staging.crm-frontend.example.com
          
          echo "✅ Staging smoke tests passed"

  # Production deployment approval
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [validate-hotfix, deploy-staging]
    if: needs.validate-hotfix.outputs.is-emergency != 'true'
    environment:
      name: production-approval
    steps:
      - name: Request production deployment approval
        run: |
          echo "🚨 HOTFIX DEPLOYMENT APPROVAL REQUIRED"
          echo "Hotfix: ${{ needs.validate-hotfix.outputs.hotfix-version }}"
          echo "Urgency: ${{ github.event.inputs.production_urgency }}"
          echo "Branch: ${{ github.event.inputs.hotfix_branch }}"
          echo "Description: ${{ github.event.inputs.description }}"
          echo ""
          echo "Please review the staging deployment and approve for production"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-hotfix, build-hotfix-image, deploy-staging, production-approval]
    if: always() && needs.validate-hotfix.result == 'success' && needs.build-hotfix-image.result == 'success' && needs.deploy-staging.result == 'success' && (needs.production-approval.result == 'success' || needs.validate-hotfix.outputs.is-emergency == 'true')
    environment:
      name: production
      url: https://crm-frontend.example.com
    steps:
      - name: Pre-deployment backup
        run: |
          echo "Creating pre-deployment backup..."
          # Create backup of current production deployment
          echo "Backup completed"

      - name: Deploy hotfix to production
        run: |
          echo "🚀 DEPLOYING HOTFIX TO PRODUCTION"
          echo "Version: ${{ needs.validate-hotfix.outputs.hotfix-version }}"
          echo "Urgency: ${{ github.event.inputs.production_urgency }}"
          
          # Deploy to production
          # kubectl set image deployment/crm-frontend crm-frontend=${{ env.IMAGE_NAME }}:${{ needs.validate-hotfix.outputs.hotfix-version }}
          # kubectl rollout status deployment/crm-frontend --timeout=300s
          
          echo "✅ Production hotfix deployment completed"

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification..."
          sleep 60
          
          # Verify deployment
          # curl -f https://crm-frontend.example.com/health
          # curl -f https://crm-frontend.example.com/api/health
          
          echo "✅ Post-deployment verification passed"

      - name: Monitor deployment
        run: |
          echo "Monitoring deployment for 5 minutes..."
          
          # Monitor for errors
          for i in {1..5}; do
            echo "Monitor check $i/5..."
            # Check application health
            # kubectl get pods -l app=crm-frontend
            sleep 60
          done
          
          echo "✅ Monitoring completed - deployment stable"

  # Create hotfix tag and release
  create-hotfix-release:
    name: Create Hotfix Release
    runs-on: ubuntu-latest
    needs: [validate-hotfix, deploy-production]
    if: needs.deploy-production.result == 'success'
    steps:
      - name: Checkout hotfix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.hotfix_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create hotfix tag
        run: |
          TAG="v${{ needs.validate-hotfix.outputs.hotfix-version }}"
          git tag -a $TAG -m "Hotfix release $TAG"
          git push origin $TAG
          echo "Created tag: $TAG"

      - name: Download hotfix summary
        uses: actions/download-artifact@v4
        with:
          name: hotfix-summary

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-hotfix.outputs.hotfix-version }}
          release_name: Hotfix v${{ needs.validate-hotfix.outputs.hotfix-version }}
          body_path: hotfix-summary.md
          draft: false
          prerelease: true

  # Notify stakeholders
  notify-stakeholders:
    name: Notify Stakeholders
    runs-on: ubuntu-latest
    needs: [validate-hotfix, deploy-production, create-hotfix-release]
    if: always()
    steps:
      - name: Determine notification status
        id: status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Hotfix deployed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Hotfix deployment failed" >> $GITHUB_OUTPUT
          fi

      - name: Send urgent notification
        run: |
          echo "🚨 HOTFIX DEPLOYMENT NOTIFICATION"
          echo "=================================="
          echo "Status: ${{ steps.status.outputs.message }}"
          echo "Version: ${{ needs.validate-hotfix.outputs.hotfix-version }}"
          echo "Urgency: ${{ github.event.inputs.production_urgency }}"
          echo "Branch: ${{ github.event.inputs.hotfix_branch }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Timestamp: $(date -u)"
          echo ""
          echo "Description: ${{ github.event.inputs.description }}"
          echo ""
          echo "Rollback Plan: ${{ github.event.inputs.rollback_plan }}"
          
          # Send immediate notifications via multiple channels
          # - Slack alerts
          # - Email notifications
          # - SMS for critical issues
          # - PagerDuty integration

  # Prepare rollback (in case of issues)
  prepare-rollback:
    name: Prepare Rollback
    runs-on: ubuntu-latest
    needs: [validate-hotfix, deploy-production]
    if: needs.deploy-production.result == 'failure'
    steps:
      - name: Prepare rollback procedure
        run: |
          echo "🔄 PREPARING ROLLBACK PROCEDURE"
          echo "Failed hotfix version: ${{ needs.validate-hotfix.outputs.hotfix-version }}"
          echo "Rollback to version: ${{ needs.validate-hotfix.outputs.base-version }}"
          echo ""
          echo "Rollback plan:"
          echo "${{ github.event.inputs.rollback_plan }}"
          
          # Prepare rollback commands
          echo "Rollback commands ready for execution"

      - name: Execute emergency rollback
        if: github.event.inputs.production_urgency == 'critical'
        run: |
          echo "🚨 EXECUTING EMERGENCY ROLLBACK"
          
          # Execute rollback
          # kubectl rollout undo deployment/crm-frontend
          # kubectl rollout status deployment/crm-frontend
          
          echo "Emergency rollback completed"