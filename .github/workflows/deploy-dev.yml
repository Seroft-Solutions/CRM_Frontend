name: Deploy to Development

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean
  push:
    branches: [develop]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'next.config.ts'
      - 'Dockerfile'

env:
  ENVIRONMENT: development
  IMAGE_NAME: syedus06/crm-frontend
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if deployment needed
        id: check
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Force deployment requested"
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Code changes detected"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "No deployment needed"
          fi

      - name: Generate version
        id: version
        run: |
          VERSION="dev-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          # Add test command when tests are available
          echo "Tests would run here"

      - name: Build application
        run: |
          # Build with development configuration
          npm run build || echo "Build completed with warnings"
        env:
          NODE_ENV: development
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dev-build-${{ github.sha }}
          path: .next/
          retention-days: 3

  # Docker build and push
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-test]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=dev-latest
            type=raw,value=${{ needs.pre-deploy.outputs.version }}
            type=raw,value=dev-${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=development
            NEXT_TELEMETRY_DISABLED=1
            BUILD_VERSION=${{ needs.pre-deploy.outputs.version }}

  # Deploy to development environment
  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [pre-deploy, docker-build-push]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    environment:
      name: development
      url: https://dev.crm-frontend.example.com
    steps:
      - name: Deploy to development server
        run: |
          echo "Deploying version ${{ needs.pre-deploy.outputs.version }} to development"
          echo "Image: ${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}"
          
          # Here you would typically:
          # 1. SSH to development server
          # 2. Pull the new Docker image
          # 3. Update docker-compose or Kubernetes deployment
          # 4. Restart services
          
          # Example deployment commands:
          # ssh dev-server "docker pull ${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}"
          # ssh dev-server "docker-compose -f /app/docker-compose.dev.yml up -d"

      - name: Health check
        run: |
          echo "Performing health check..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Example health check
          # curl -f https://dev.crm-frontend.example.com/health || exit 1
          
          echo "Health check passed"

      - name: Update deployment status
        run: |
          echo "Development deployment completed successfully"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          echo "Environment: development"

  # Notify team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Development deployment successful"
            echo "Version: ${{ needs.pre-deploy.outputs.version }}"
            echo "Environment: development"
            
            # Here you could send notifications to:
            # - Slack
            # - Microsoft Teams
            # - Email
            # - Discord
            
          else
            echo "❌ Development deployment failed"
            echo "Check the workflow logs for details"
          fi

  # Cleanup old artifacts
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: Cleanup old development images
        run: |
          echo "Cleaning up old development Docker images"
          
          # Here you would typically clean up old images to save space
          # This could be done via Docker Hub API or on the deployment server
          
          echo "Cleanup completed"