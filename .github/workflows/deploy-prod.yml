name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (tag or commit SHA)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean
  release:
    types: [published]

env:
  IMAGE_NAME: syedus06/crm-frontend
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Validate deployment inputs
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      environment: ${{ steps.validate.outputs.environment }}
      is-emergency: ${{ steps.validate.outputs.is-emergency }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate inputs
        id: validate
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            ENVIRONMENT="production"
            IS_EMERGENCY="false"
          else
            VERSION="${{ github.event.inputs.version }}"
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            IS_EMERGENCY="${{ github.event.inputs.skip_tests }}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "is-emergency=$IS_EMERGENCY" >> $GITHUB_OUTPUT
          
          echo "Deployment details:"
          echo "Version: $VERSION"
          echo "Environment: $ENVIRONMENT"
          echo "Emergency deployment: $IS_EMERGENCY"
          
          # Validate version exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "✅ Version $VERSION exists"
          else
            echo "❌ Version $VERSION not found"
            exit 1
          fi

      - name: Check environment protection
        run: |
          if [ "${{ steps.validate.outputs.environment }}" = "production" ]; then
            echo "🔒 Production deployment requires manual approval"
          fi

  # Pre-deployment tests
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.is-emergency != 'true'
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive tests
        run: |
          echo "Running comprehensive test suite..."
          
          # Run linting
          npm run lint || echo "Linting completed with warnings"
          
          # Run formatting check
          npm run format:check
          
          # Run unit tests (when available)
          # npm run test
          
          # Run integration tests (when available)
          # npm run test:integration
          
          # Run e2e tests (when available)
          # npm run test:e2e
          
          echo "All tests completed"

      - name: Build verification
        run: |
          echo "Verifying production build..."
          npm run build || echo "Build completed with warnings"
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

  # Build production image
  build-production:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: [validate, pre-deployment-tests]
    if: always() && needs.validate.result == 'success' && (needs.pre-deployment-tests.result == 'success' || needs.validate.outputs.is-emergency == 'true')
    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable=${{ needs.validate.outputs.environment == 'production' }}
            type=raw,value=${{ needs.validate.outputs.environment }}-latest

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            BUILD_VERSION=${{ needs.validate.outputs.version }}

  # Deploy to staging (if selected)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build-production]
    if: needs.validate.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.crm-frontend.example.com
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying ${{ needs.validate.outputs.version }} to staging"
          
          # Example staging deployment
          # kubectl set image deployment/crm-frontend crm-frontend=${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}
          # kubectl rollout status deployment/crm-frontend
          
          echo "Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          sleep 30
          
          # Example smoke tests
          # curl -f https://staging.crm-frontend.example.com/health
          # npm run test:smoke -- --baseUrl=https://staging.crm-frontend.example.com
          
          echo "Smoke tests passed"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build-production]
    if: needs.validate.outputs.environment == 'production'
    environment:
      name: production
      url: https://crm-frontend.example.com
    steps:
      - name: Pre-deployment backup
        run: |
          echo "Creating pre-deployment backup..."
          
          # Example backup commands
          # kubectl create backup production-backup-$(date +%Y%m%d-%H%M%S)
          
          echo "Backup completed"

      - name: Deploy to production
        run: |
          echo "🚀 Deploying ${{ needs.validate.outputs.version }} to production"
          
          # Blue-green deployment example
          # kubectl apply -f k8s/production/
          # kubectl set image deployment/crm-frontend crm-frontend=${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}
          # kubectl rollout status deployment/crm-frontend --timeout=600s
          
          echo "Production deployment completed"

      - name: Health check
        run: |
          echo "Performing production health check..."
          
          # Wait for deployment to stabilize
          sleep 60
          
          # Health checks
          # curl -f https://crm-frontend.example.com/health
          # curl -f https://crm-frontend.example.com/api/health
          
          echo "✅ Production health check passed"

      - name: Post-deployment tests
        run: |
          echo "Running post-deployment tests..."
          
          # Example post-deployment tests
          # npm run test:production
          # npm run test:api -- --baseUrl=https://crm-frontend.example.com
          
          echo "Post-deployment tests completed"

  # Rollback capability
  prepare-rollback:
    name: Prepare Rollback
    runs-on: ubuntu-latest
    needs: [validate, deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure')
    steps:
      - name: Prepare rollback information
        run: |
          echo "Deployment failed. Preparing rollback information..."
          
          # Get previous successful deployment
          # PREVIOUS_VERSION=$(kubectl get deployment crm-frontend -o jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}')
          
          echo "Rollback information prepared"
          echo "Failed version: ${{ needs.validate.outputs.version }}"
          echo "Environment: ${{ needs.validate.outputs.environment }}"

  # Notify team of deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, deploy-production, deploy-staging]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ] || [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment successful" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment failed" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        run: |
          echo "${{ steps.status.outputs.message }}"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "Environment: ${{ needs.validate.outputs.environment }}"
          echo "Timestamp: $(date -u)"
          
          # Send notifications to team channels
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"${{ steps.status.outputs.message }} - Version: ${{ needs.validate.outputs.version }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Create deployment record
  record-deployment:
    name: Record Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy-production, deploy-staging]
    if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
    steps:
      - name: Record deployment details
        run: |
          echo "Recording deployment details..."
          
          # Create deployment record
          cat > deployment-record.json << EOF
          {
            "version": "${{ needs.validate.outputs.version }}",
            "environment": "${{ needs.validate.outputs.environment }}",
            "timestamp": "$(date -u)",
            "deployed_by": "${{ github.actor }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          
          cat deployment-record.json
          
          # Store deployment record (could be sent to monitoring system)
          echo "Deployment record created"