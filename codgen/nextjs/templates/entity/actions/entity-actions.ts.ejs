<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use server";

import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { toast } from "sonner";
import { <%= entityInstance %>Toast } from "../components/<%= entityFileName %>-toast";

export async function create<%= entityClass %>Action(formData: FormData) {
  try {
    // Process form data and create entity
    const result = await create<%= entityClass %>(formData);
    
    revalidatePath("/<%= routePath %>");
    <%= entityInstance %>Toast.created();
    
    return { success: true, data: result };
  } catch (error) {
    console.error("Failed to create <%= entityClass.toLowerCase() %>:", error);
    <%= entityInstance %>Toast.createError(error?.message);
    return { success: false, error: error?.message };
  }
}

export async function update<%= entityClass %>Action(id: number, formData: FormData) {
  try {
    const result = await update<%= entityClass %>(id, formData);
    
    revalidatePath("/<%= routePath %>");
    revalidatePath(`/<%= routePath %>/${id}`);
    <%= entityInstance %>Toast.updated();
    
    return { success: true, data: result };
  } catch (error) {
    console.error("Failed to update <%= entityClass.toLowerCase() %>:", error);
    <%= entityInstance %>Toast.updateError(error?.message);
    return { success: false, error: error?.message };
  }
}

export async function delete<%= entityClass %>Action(id: number) {
  try {
    await delete<%= entityClass %>(id);
    
    revalidatePath("/<%= routePath %>");
    <%= entityInstance %>Toast.deleted();
    
    return { success: true };
  } catch (error) {
    console.error("Failed to delete <%= entityClass.toLowerCase() %>:", error);
    <%= entityInstance %>Toast.deleteError(error?.message);
    return { success: false, error: error?.message };
  }
}

export async function bulkDelete<%= entityClass %>Action(ids: number[]) {
  try {
    const results = await Promise.allSettled(
      ids.map(id => delete<%= entityClass %>(id))
    );
    
    const successCount = results.filter(r => r.status === 'fulfilled').length;
    const errorCount = results.filter(r => r.status === 'rejected').length;
    
    revalidatePath("/<%= routePath %>");
    
    if (errorCount === 0) {
      <%= entityInstance %>Toast.bulkDeleted(successCount);
    } else if (successCount > 0) {
      toast.warning(`${successCount} deleted, ${errorCount} failed`);
    } else {
      <%= entityInstance %>Toast.bulkDeleteError();
    }
    
    return { success: errorCount === 0, successCount, errorCount };
  } catch (error) {
    console.error("Bulk delete failed:", error);
    <%= entityInstance %>Toast.bulkDeleteError(error?.message);
    return { success: false, error: error?.message };
  }
}
