<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
"use client";

import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import {
  ChevronDown,
  ChevronUp,
  ChevronsUpDown,
  Eye,
  Pencil,
  Trash2,
  RefreshCw
} from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { 
  Pagination, 
  PaginationContent, 
  PaginationItem, 
  PaginationLink, 
  PaginationNext, 
  PaginationPrevious 
} from "@/components/ui/pagination";
import { Input } from "@/components/ui/input";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { format } from "date-fns";

import {
  useGetAll<%= entityClassPlural %>,
  useDelete<%= entityClass %>,
  useCount<%= entityClassPlural %>,
  <% if (searchEngineAny) { %>useSearch<%= entityClassPlural %>,<% } %>
} from "@/core/api/generated/endpoints/<%= entityFileName %>-resource/<%= entityFileName %>-resource.gen";

// Define sort ordering constants
const ASC = "asc";
const DESC = "desc";

export function <%= entityClass %>Table() {
  const router = useRouter();
  const [page, setPage] = useState(1);
  const [sort, setSort] = useState("<%= primaryKey.name %>");
  const [order, setOrder] = useState(ASC);
  const [searchTerm, setSearchTerm] = useState("");
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  // Calculate API pagination parameters (0-indexed)
  const apiPage = page - 1;
  const pageSize = 10;

  // Fetch data with React Query
  <% if (searchEngineAny) { %>
  const { data, isLoading, refetch } = searchTerm 
    ? useSearch<%= entityClassPlural %>(
        {
          query: searchTerm,
          page: apiPage,
          size: pageSize,
          sort: `${sort},${order}`,
        },
        {
          query: {
            enabled: true,
          },
        }
      )
    : 
  <% } %>
  const { data, isLoading, refetch } = useGetAll<%= entityClassPlural %>(
    {
      page: apiPage,
      size: pageSize,
      sort: `${sort},${order}`,
    },
    {
      query: {
        enabled: true,
      },
    }
  );

  // Get total count for pagination
  const { data: countData } = useCount<%= entityClassPlural %>(
    {},
    {
      query: {
        enabled: true,
      },
    }
  );

  // Delete mutation
  const { mutate: deleteEntity, isPending: isDeleting } = useDelete<%= entityClass %>({
    mutation: {
      onSuccess: () => {
        toast.success("<%= entityClass %> deleted successfully");
        refetch();
      },
      onError: (error) => {
        toast.error(`Failed to delete <%= entityClass %>: ${error}`);
      },
    },
  });

  // Handle sort column click
  const handleSort = (column: string) => {
    if (sort === column) {
      setOrder(order === ASC ? DESC : ASC);
    } else {
      setSort(column);
      setOrder(ASC);
    }
  };

  // Get sort direction icon
  const getSortIcon = (column: string) => {
    if (sort !== column) {
      return <ChevronsUpDown className="h-4 w-4" />;
    }
    return order === ASC ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />;
  };

  // Handle delete
  const handleDelete = (id: number) => {
    setDeleteId(id);
    setShowDeleteDialog(true);
  };

  const confirmDelete = () => {
    if (deleteId) {
      deleteEntity({ id: deleteId });
    }
    setShowDeleteDialog(false);
  };

  // Handle refresh
  const handleRefresh = () => {
    refetch();
    toast.success("Data refreshed");
  };

  <% if (searchEngineAny) { %>
  // Handle search
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    setPage(1); // Reset to first page on search
  };
  <% } %>

  // Calculate total pages
  const totalItems = countData || 0;
  const totalPages = Math.ceil(totalItems / pageSize);

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <% if (searchEngineAny) { %>
        <div className="flex items-center">
          <Input
            placeholder="Search <%= entityClassPluralHumanized.toLowerCase() %>..."
            value={searchTerm}
            onChange={handleSearch}
            className="max-w-sm"
          />
        </div>
        <% } %>
        <Button
          variant="outline"
          size="sm"
          className="h-8 gap-1 ml-auto"
          onClick={handleRefresh}
          disabled={isLoading}
        >
          <RefreshCw className="h-3.5 w-3.5" />
          <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
            Refresh
          </span>
        </Button>
      </div>

      <div className="overflow-x-auto rounded-md border">
        <Table className="min-w-full">
          <TableHeader>
            <TableRow>
              <% for (field of fields) { %>
              <TableHead className="whitespace-nowrap">
                <Button
                  variant="ghost"
                  onClick={() => handleSort("<%= field.fieldName %>")}
                  className="flex items-center gap-1"
                >
                  <%= field.fieldNameHumanized || field.fieldName %>
                  {getSortIcon("<%= field.fieldName %>")}
                </Button>
              </TableHead>
              <% } %>
              <% 
              // Filter relationships that should be displayed in the table
              const tableRelationships = relationships.filter(rel => 
                rel.relationshipType !== 'one-to-many' && 
                !rel.collection && 
                rel.otherEntityField
              );
              
              for (const rel of tableRelationships) { 
                // Use appropriate display field based on entity type
                const displayField = rel.otherEntity.builtInUser ? 'login' : rel.otherEntityField;
              %>
              <TableHead className="whitespace-nowrap">
                <Button
                  variant="ghost"
                  onClick={() => handleSort("<%= rel.relationshipName %>.<%=displayField%>")}
                  className="flex items-center gap-1"
                >
                  <%= rel.relationshipNameHumanized %>
                  {getSortIcon("<%= rel.relationshipName %>.<%=displayField%>")}
                </Button>
              </TableHead>
              <% } %>
              <TableHead className="w-[120px] sticky right-0 bg-background">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {isLoading ? (
              <TableRow>
                <TableCell
                  colSpan={<%= fields.length + tableRelationships.length + 1 %>}
                  className="h-24 text-center"
                >
                  Loading...
                </TableCell>
              </TableRow>
            ) : data?.length ? (
              data.map((<%= entityInstance %>) => (
                <TableRow key={<%= entityInstance %>.<%= primaryKey.name %>}>
                  <% for (field of fields) { 
                       const fieldName = field.fieldName;
                       const fieldType = field.fieldType; %>
                  <TableCell className="whitespace-nowrap">
                    <% if (field.fieldTypeBoolean) { %>
                    {<%= entityInstance %>.<%= fieldName %> ? "Yes" : "No"}
                    <% } else if (field.fieldTypeLocalDate || field.fieldTypeTimed) { %>
                    {<%= entityInstance %>.<%= fieldName %> ? format(new Date(<%= entityInstance %>.<%= fieldName %>), "PPP") : ""}
                    <% } else if (field.fieldTypeBinary && !field.blobContentTypeText) { %>
                    {<%= entityInstance %>.<%= fieldName %> ? (
                      <>
                        <% if (field.blobContentTypeImage) { %>
                        <img
                          src={`data:${<%= entityInstance %>.<%= fieldName %>ContentType};base64,${<%= entityInstance %>.<%= fieldName %>}`}
                          alt=""
                          className="max-h-8"
                        />
                        <% } else { %>
                        <span>Binary data</span>
                        <% } %>
                      </>
                    ) : ""}
                    <% } else if (field.fieldIsEnum) { %>
                    {<%= entityInstance %>.<%= fieldName %>}
                    <% } else { %>
                    {<%= entityInstance %>.<%= fieldName %>}
                    <% } %>
                  </TableCell>
                  <% } %>
                  <% for (const rel of tableRelationships) { 
                       // Use appropriate display field based on entity type
                       const displayField = rel.otherEntity.builtInUser ? 'login' : rel.otherEntityField;
                       const relationshipFieldName = rel.relationshipFieldName;
                  %>
                  <TableCell className="whitespace-nowrap">
                    {<%= entityInstance %>.<%= relationshipFieldName %> ? 
                      <%= entityInstance %>.<%= relationshipFieldName %>.<%= displayField %> : ""}
                  </TableCell>
                  <% } %>
                  <TableCell className="sticky right-0 bg-background">
                    <div className="flex items-center gap-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        asChild
                        className="h-8 w-8 p-0"
                      >
                        <Link href={`/<%= entityRoute %>/${<%= entityInstance %>.<%= primaryKey.name %>}`}>
                          <Eye className="h-4 w-4" />
                          <span className="sr-only">View</span>
                        </Link>
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        asChild
                        className="h-8 w-8 p-0"
                      >
                        <Link href={`/<%= entityRoute %>/${<%= entityInstance %>.<%= primaryKey.name %>}/edit`}>
                          <Pencil className="h-4 w-4" />
                          <span className="sr-only">Edit</span>
                        </Link>
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 text-destructive"
                        onClick={() => handleDelete(<%= entityInstance %>.<%= primaryKey.name %>)}
                        disabled={isDeleting}
                      >
                        <Trash2 className="h-4 w-4" />
                        <span className="sr-only">Delete</span>
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={<%= fields.length + tableRelationships.length + 1 %>}
                  className="h-24 text-center"
                >
                  No <%= entityClassPluralHumanized.toLowerCase() %> found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {totalPages > 1 && (
        <Pagination>
          <PaginationContent>
            <PaginationItem>
              <PaginationPrevious
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  if (page > 1) setPage(page - 1);
                }}
                className={page <= 1 ? "pointer-events-none opacity-50" : ""}
              />
            </PaginationItem>
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
              // Show pages around the current page
              const pageNumbers = [];
              const startPage = Math.max(1, page - 2);
              const endPage = Math.min(totalPages, startPage + 4);
              
              for (let j = startPage; j <= endPage; j++) {
                pageNumbers.push(j);
              }
              
              return pageNumbers[i];
            }).filter(Boolean).map((p) => (
              <PaginationItem key={p}>
                <PaginationLink
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    setPage(p);
                  }}
                  isActive={page === p}
                >
                  {p}
                </PaginationLink>
              </PaginationItem>
            ))}
            <PaginationItem>
              <PaginationNext
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  if (page < totalPages) setPage(page + 1);
                }}
                className={page >= totalPages ? "pointer-events-none opacity-50" : ""}
              />
            </PaginationItem>
          </PaginationContent>
        </Pagination>
      )}

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the
              <%= entityClass.toLowerCase() %> and remove its data from the server.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={confirmDelete}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
