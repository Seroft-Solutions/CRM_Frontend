<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use client";

import React from "react";
import { UseFormReturn } from "react-hook-form";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";

<%_
// Helper function to convert camelCase to Title Case
function camelToTitleCase(str) {
  return str
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}

// Boolean and binary fields
const booleanFields = fields.filter(field => field.fieldTypeBoolean);
const binaryFields = fields.filter(field => field.fieldTypeBinary);
_%>

interface <%= entityClass %>StepSettingsProps {
  form: UseFormReturn<any>;
}

export function <%= entityClass %>StepSettings({ form }: <%= entityClass %>StepSettingsProps) {
  return (
    <div className="space-y-6">
      <%_ if (booleanFields.length > 0) { _%>
      <div className="space-y-4">
        <h4 className="font-medium">Settings</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <% for (field of booleanFields) { 
            const fieldName = field.fieldName;
            const fieldLabel = camelToTitleCase(fieldName);
          %>
          <FormField
            control={form.control}
            name="<%= fieldName %>"
            render={({ field }) => (
              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                <div className="space-y-0.5">
                  <FormLabel className="text-base font-medium"><%= fieldLabel %></FormLabel>
                </div>
                <FormControl>
                  <Checkbox checked={field.value} onCheckedChange={field.onChange} />
                </FormControl>
              </FormItem>
            )}
          />
          <% } %>
        </div>
      </div>
      <%_ } _%>

      <%_ if (binaryFields.length > 0) { _%>
      <div className="space-y-4">
        <h4 className="font-medium">Files & Additional Information</h4>
        <div className="grid grid-cols-1 gap-4">
          <% for (field of binaryFields) { 
            const fieldName = field.fieldName;
            const fieldLabel = camelToTitleCase(fieldName);
            const fieldValidateRules = field.fieldValidateRules || [];
            const isRequired = fieldValidateRules.includes('required');
          %>
          <FormField
            control={form.control}
            name="<%= fieldName %>"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-sm font-medium"><%= fieldLabel %><% if (isRequired) { %> *<% } %></FormLabel>
                <FormControl>
                  <% if (field.fieldTypeBinary && (field.blobContentTypeText || field.fieldType === 'TextBlob')) { %>
                  <Textarea
                    {...field}
                    placeholder="Enter <%= fieldLabel.toLowerCase() %>"
                    className="min-h-[100px]"
                  />
                  <% } else { %>
                  <Input
                    type="file"
                    <% if (field.blobContentTypeImage) { %>accept="image/*"<% } %>
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                          if (event.target?.result) {
                            const base64 = event.target.result.toString().split(',')[1];
                            field.onChange(base64);
                          }
                        };
                        reader.readAsDataURL(file);
                      }
                    }}
                  />
                  <% } %>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <% } %>
        </div>
      </div>
      <%_ } _%>
    </div>
  );
}
