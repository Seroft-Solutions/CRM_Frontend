<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use client";

import React from "react";
import { UseFormReturn } from "react-hook-form";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { PaginatedRelationshipCombobox } from "../paginated-relationship-combobox";

<%_
// Import statements for all classification relationships
const classificationRelationships = persistableRelationships.filter(rel => {
  const classificationKeywords = ['priority', 'status', 'type', 'category', 'level', 'grade'];
  const name = rel.relationshipName.toLowerCase();
  const otherEntity = rel.otherEntityName.toLowerCase();
  return classificationKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw));
});

const uniqueClassEntities = [...new Set(classificationRelationships.map(rel => rel.otherEntity.entityFileName))];
_%>

<%_ for (const entityFileName of uniqueClassEntities) { 
  const relEntity = classificationRelationships.find(rel => rel.otherEntity.entityFileName === entityFileName)?.otherEntity;
_%>
import { 
  useGetAll<%= relEntity.entityClassPlural %>,
  useSearch<%= relEntity.entityClassPlural %>,
  useCount<%= relEntity.entityClassPlural %>
} from "@/core/api/generated/spring/endpoints/<%= entityFileName %>-resource/<%= entityFileName %>-resource.gen";
<%_ } _%>

<%_
// Helper function to convert camelCase to Title Case
function camelToTitleCase(str) {
  return str
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}
_%>

interface <%= entityClass %>StepClassificationProps {
  form: UseFormReturn<any>;
  handleEntityCreated: (entityId: number, relationshipName: string) => void;
}

<%_ if (classificationRelationships.length > 0) { _%>
export function <%= entityClass %>StepClassification({ form, handleEntityCreated }: <%= entityClass %>StepClassificationProps) {
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6">
        <%_ for (const rel of classificationRelationships) { 
          const relationshipFieldName = rel.relationshipFieldName;
          const relationshipLabel = camelToTitleCase(rel.relationshipName);
          const relationshipRequired = rel.relationshipRequired;
          const otherEntity = rel.otherEntity;
          const displayField = rel.otherEntityField;
          
          // Special handling for subCallType -> callType relationship
          const isSubCallType = rel.relationshipName.toLowerCase().includes('subcalltype');
          const callTypeField = isSubCallType ? 'callType' : null;
        _%>
        <FormField
          control={form.control}
          name="<%= relationshipFieldName %>"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="text-sm font-medium">
                <%= relationshipLabel %><% if (relationshipRequired) { %> *<% } %>
              </FormLabel>
              <FormControl>
                <PaginatedRelationshipCombobox
                  value={field.value}
                  onValueChange={(value) => {
                    field.onChange(value);
                    <%_ if (isSubCallType) { _%>
                    // Clear subCallType when callType changes
                    if ('<%= relationshipFieldName %>' === 'callType') {
                      form.setValue('subCallType', undefined);
                    }
                    <%_ } _%>
                  }}
                  displayField="<%= displayField %>"
                  placeholder="Select <%= relationshipLabel.toLowerCase() %>"
                  multiple={<%= rel.collection %>}
                  useGetAllHook={useGetAll<%= otherEntity.entityClassPlural %>}
                  useSearchHook={useSearch<%= otherEntity.entityClassPlural %>}
                  useCountHook={useCount<%= otherEntity.entityClassPlural %>}
                  entityName="<%= otherEntity.entityClassPlural %>"
                  searchField="<%= displayField %>"
                  canCreate={true}
                  createEntityPath="/<%= otherEntity.routePath %>/new"
                  createPermission="<%= otherEntity.entityInstance || otherEntity.entityName.toLowerCase() %>:create"
                  onEntityCreated={(entityId) => handleEntityCreated(entityId, '<%= relationshipFieldName %>')}
                  <%_ if (isSubCallType && callTypeField) { _%>
                  parentFilter={form.watch('<%= callTypeField %>')}
                  parentField="<%= callTypeField %>"
                  disabled={!form.watch('<%= callTypeField %>')}
                  <%_ } _%>
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <%_ } _%>
      </div>
    </div>
  );
}
<%_ } else { _%>
export function <%= entityClass %>StepClassification() { return null; }
<%_ } _%>
