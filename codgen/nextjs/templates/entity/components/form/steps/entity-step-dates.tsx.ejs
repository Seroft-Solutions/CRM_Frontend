<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use client";

import React from "react";
import { UseFormReturn } from "react-hook-form";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

<%_
// Helper function to convert camelCase to Title Case
function camelToTitleCase(str) {
  return str
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}

// Date fields
const dateFields = fields.filter(field => field.fieldTypeTimed || field.fieldTypeLocalDate);
_%>

interface <%= entityClass %>StepDatesProps {
  form: UseFormReturn<any>;
}

export function <%= entityClass %>StepDates({ form }: <%= entityClass %>StepDatesProps) {
  <%_ if (dateFields.length === 0) { _%>
  return (
    <div className="space-y-6">
      <div className="text-center py-8">
        <p className="text-muted-foreground">No date fields to configure.</p>
        <p className="text-sm text-muted-foreground mt-2">You can proceed to the next step.</p>
      </div>
    </div>
  );
  <%_ } else { _%>
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6">
        <% for (field of dateFields) { 
          const fieldName = field.fieldName;
          const fieldLabel = camelToTitleCase(fieldName);
          const fieldValidateRules = field.fieldValidateRules || [];
          const isRequired = fieldValidateRules.includes('required');
        %>
        <FormField
          control={form.control}
          name="<%= fieldName %>"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel className="text-sm font-medium"><%= fieldLabel %><% if (isRequired) { %> *<% } %></FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      {field.value ? format(field.value, "PPP") : <span>Select date</span>}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={field.onChange}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />
        <% } %>
      </div>
    </div>
  );
  <%_ } _%>
}
