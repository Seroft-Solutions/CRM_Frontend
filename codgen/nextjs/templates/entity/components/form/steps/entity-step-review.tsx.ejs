<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use client";

import React from "react";
import { UseFormReturn } from "react-hook-form";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

<%_
// Helper function to convert camelCase to Title Case
function camelToTitleCase(str) {
  return str
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}

// Helper function to format date/time values
function formatValue(field, value) {
  if (!value) return null;
  
  if (field.fieldTypeLocalDate || field.fieldTypeInstant || field.fieldTypeZonedDateTime) {
    return 'new Date(value).toLocaleString()';
  }
  
  if (field.fieldTypeBoolean) {
    return 'value ? "Yes" : "No"';
  }
  
  return 'value?.toString()';
}

// Organize fields for review
const reviewFields = fields.filter(field => !field.id);
const reviewRelationships = persistableRelationships;

// Group relationships by category
const classificationRelationships = reviewRelationships.filter(rel => {
  const classificationKeywords = ['priority', 'status', 'type', 'category', 'level', 'grade'];
  const name = rel.relationshipName.toLowerCase();
  const otherEntity = rel.otherEntityName.toLowerCase();
  return classificationKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw));
});

const geographicRelationships = reviewRelationships.filter(rel => {
  const geographicKeywords = ['state', 'city', 'district', 'area', 'region', 'location'];
  const name = rel.relationshipName.toLowerCase();
  const otherEntity = rel.otherEntityName.toLowerCase();
  return geographicKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw));
});

const userRelationships = reviewRelationships.filter(rel => {
  const userKeywords = ['user', 'assignedto', 'createdby', 'updatedby', 'owner'];
  const name = rel.relationshipName.toLowerCase();
  const otherEntity = rel.otherEntityName.toLowerCase();
  return userKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw));
});

const businessRelationships = reviewRelationships.filter(rel => {
  const businessKeywords = ['party', 'partner', 'customer', 'supplier', 'vendor', 'channel'];
  const name = rel.relationshipName.toLowerCase();
  const otherEntity = rel.otherEntityName.toLowerCase();
  return businessKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw));
});

// Get remaining relationships
const otherRelationships = reviewRelationships.filter(rel => {
  return !classificationRelationships.includes(rel) &&
         !geographicRelationships.includes(rel) &&
         !userRelationships.includes(rel) &&
         !businessRelationships.includes(rel);
});
_%>

interface <%= entityClass %>StepReviewProps {
  form: UseFormReturn<any>;
}

export function <%= entityClass %>StepReview({ form }: <%= entityClass %>StepReviewProps) {
  const formValues = form.getValues();

  <%_ 
  // Helper function to render field value
  function renderFieldValue(field) {
    if (field.fieldTypeLocalDate || field.fieldTypeInstant || field.fieldTypeZonedDateTime) {
      return `formValues.${field.fieldName} ? new Date(formValues.${field.fieldName}).toLocaleString() : null`;
    }
    return `formValues.${field.fieldName}`;
  }
  _%>

  return (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h3 className="text-lg font-medium">Review <%= entityClassHumanized %></h3>
        <p className="text-muted-foreground">Please review all information before submitting</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Basic Information */}
        <%_ if (reviewFields.filter(field => !field.fieldTypeBoolean && !field.fieldTypeBinary).length > 0) { _%>
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Basic Information</CardTitle>
            <CardDescription>Core <%= entityName.toLowerCase() %> details</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <%_ for (const field of reviewFields.filter(field => !field.fieldTypeBoolean && !field.fieldTypeBinary)) { _%>
            <div className="flex flex-col space-y-1">
              <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                <%= camelToTitleCase(field.fieldName) %>
              </span>
              <span className="text-sm font-medium">
                {<%- renderFieldValue(field) %> || <span className="text-muted-foreground italic">Not set</span>}
              </span>
            </div>
            <%_ } _%>
          </CardContent>
        </Card>
        <%_ } _%>

        {/* Boolean Settings */}
        <%_ if (reviewFields.filter(field => field.fieldTypeBoolean).length > 0) { _%>
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Settings</CardTitle>
            <CardDescription>Configuration options</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <%_ for (const field of reviewFields.filter(field => field.fieldTypeBoolean)) { _%>
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium">
                <%= camelToTitleCase(field.fieldName) %>
              </span>
              <Badge variant={formValues.<%= field.fieldName %> ? "default" : "secondary"}>
                {formValues.<%= field.fieldName %> ? "Yes" : "No"}
              </Badge>
            </div>
            <%_ } _%>
          </CardContent>
        </Card>
        <%_ } _%>

        {/* Classification Relationships */}
        <%_ if (classificationRelationships.length > 0) { _%>
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Classification</CardTitle>
            <CardDescription>Category and status information</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <%_ for (const rel of classificationRelationships) { _%>
            <div className="flex flex-col space-y-1">
              <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                <%= camelToTitleCase(rel.relationshipName) %>
              </span>
              <span className="text-sm font-medium">
                <%_ if (rel.collection) { _%>
                {formValues.<%= rel.relationshipFieldName %>?.length > 0 ? 
                  `${formValues.<%= rel.relationshipFieldName %>.length} item${formValues.<%= rel.relationshipFieldName %>.length !== 1 ? 's' : ''} selected` : 
                  <span className="text-muted-foreground italic">None selected</span>
                }
                <%_ } else { _%>
                {formValues.<%= rel.relationshipFieldName %> ? 
                  <Badge variant="outline">Selected</Badge> : 
                  <span className="text-muted-foreground italic">Not selected</span>
                }
                <%_ } _%>
              </span>
            </div>
            <%_ } _%>
          </CardContent>
        </Card>
        <%_ } _%>

        {/* Geographic Relationships */}
        <%_ if (geographicRelationships.length > 0) { _%>
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Geographic Information</CardTitle>
            <CardDescription>Location and address details</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <%_ for (const rel of geographicRelationships) { _%>
            <div className="flex flex-col space-y-1">
              <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                <%= camelToTitleCase(rel.relationshipName) %>
              </span>
              <span className="text-sm font-medium">
                <%_ if (rel.collection) { _%>
                {formValues.<%= rel.relationshipFieldName %>?.length > 0 ? 
                  `${formValues.<%= rel.relationshipFieldName %>.length} item${formValues.<%= rel.relationshipFieldName %>.length !== 1 ? 's' : ''} selected` : 
                  <span className="text-muted-foreground italic">None selected</span>
                }
                <%_ } else { _%>
                {formValues.<%= rel.relationshipFieldName %> ? 
                  <Badge variant="outline">Selected</Badge> : 
                  <span className="text-muted-foreground italic">Not selected</span>
                }
                <%_ } _%>
              </span>
            </div>
            <%_ } _%>
          </CardContent>
        </Card>
        <%_ } _%>

        {/* User Relationships */}
        <%_ if (userRelationships.length > 0) { _%>
        <Card>
          <CardHeader>
            <CardTitle className="text-base">User Assignments</CardTitle>
            <CardDescription>Assigned users and responsibilities</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <%_ for (const rel of userRelationships) { _%>
            <div className="flex flex-col space-y-1">
              <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                <%= camelToTitleCase(rel.relationshipName) %>
              </span>
              <span className="text-sm font-medium">
                <%_ if (rel.collection) { _%>
                {formValues.<%= rel.relationshipFieldName %>?.length > 0 ? 
                  `${formValues.<%= rel.relationshipFieldName %>.length} user${formValues.<%= rel.relationshipFieldName %>.length !== 1 ? 's' : ''} assigned` : 
                  <span className="text-muted-foreground italic">No users assigned</span>
                }
                <%_ } else { _%>
                {formValues.<%= rel.relationshipFieldName %> ? 
                  <Badge variant="outline">User assigned</Badge> : 
                  <span className="text-muted-foreground italic">No user assigned</span>
                }
                <%_ } _%>
              </span>
            </div>
            <%_ } _%>
          </CardContent>
        </Card>
        <%_ } _%>

        {/* Business Relationships */}
        <%_ if (businessRelationships.length > 0) { _%>
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Business Relationships</CardTitle>
            <CardDescription>Partners, customers, and channels</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <%_ for (const rel of businessRelationships) { _%>
            <div className="flex flex-col space-y-1">
              <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                <%= camelToTitleCase(rel.relationshipName) %>
              </span>
              <span className="text-sm font-medium">
                <%_ if (rel.collection) { _%>
                {formValues.<%= rel.relationshipFieldName %>?.length > 0 ? 
                  `${formValues.<%= rel.relationshipFieldName %>.length} relationship${formValues.<%= rel.relationshipFieldName %>.length !== 1 ? 's' : ''} established` : 
                  <span className="text-muted-foreground italic">No relationships established</span>
                }
                <%_ } else { _%>
                {formValues.<%= rel.relationshipFieldName %> ? 
                  <Badge variant="outline">Relationship established</Badge> : 
                  <span className="text-muted-foreground italic">No relationship established</span>
                }
                <%_ } _%>
              </span>
            </div>
            <%_ } _%>
          </CardContent>
        </Card>
        <%_ } _%>

        {/* Other Relationships */}
        <%_ if (otherRelationships.length > 0) { _%>
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-base">Additional Information</CardTitle>
            <CardDescription>Other related data and references</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <%_ for (const rel of otherRelationships) { _%>
              <div className="flex flex-col space-y-1">
                <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                  <%= camelToTitleCase(rel.relationshipName) %>
                </span>
                <span className="text-sm font-medium">
                  <%_ if (rel.collection) { _%>
                  {formValues.<%= rel.relationshipFieldName %>?.length > 0 ? 
                    `${formValues.<%= rel.relationshipFieldName %>.length} item${formValues.<%= rel.relationshipFieldName %>.length !== 1 ? 's' : ''} selected` : 
                    <span className="text-muted-foreground italic">None selected</span>
                  }
                  <%_ } else { _%>
                  {formValues.<%= rel.relationshipFieldName %> ? 
                    <Badge variant="outline">Selected</Badge> : 
                    <span className="text-muted-foreground italic">Not selected</span>
                  }
                  <%_ } _%>
                </span>
              </div>
              <%_ } _%>
            </div>
          </CardContent>
        </Card>
        <%_ } _%>
      </div>
    </div>
  );
}
