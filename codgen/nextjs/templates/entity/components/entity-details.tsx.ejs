<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
"use client";

import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { format } from "date-fns";
import { Pencil, Trash2 } from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

import {
  useGet<%= entityClass %>,
  useDelete<%= entityClass %>,
} from "@/core/api/generated/endpoints/<%= entityFileName %>-resource/<%= entityFileName %>-resource.gen";

interface <%= entityClass %>DetailsProps {
  id: number;
}

export function <%= entityClass %>Details({ id }: <%= entityClass %>DetailsProps) {
  const router = useRouter();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  // Fetch entity details
  const { data: entity, isLoading, refetch } = useGet<%= entityClass %>(id, {
    query: {
      enabled: !!id,
    },
  });

  // Delete mutation
  const { mutate: deleteEntity } = useDelete<%= entityClass %>({
    mutation: {
      onSuccess: () => {
        toast.success("<%= entityClass %> deleted successfully");
        router.push("/<%= entityRoute %>");
      },
      onError: (error) => {
        toast.error(`Failed to delete <%= entityClass %>: ${error}`);
      },
    },
  });

  const handleDelete = () => {
    deleteEntity({ id });
    setShowDeleteDialog(false);
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!entity) {
    return <div>Entity not found</div>;
  }

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl"><%= entityClass %> #<%= primaryKey.name %>{entity.<%= primaryKey.name %>}</CardTitle>
          <CardDescription>
            View details for this <%= entityClass.toLowerCase() %>
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
<%_ for (field of fields.filter(field => !field.id)) { 
    const fieldName = field.fieldName;
    const fieldNameHumanized = field.fieldNameHumanized;
_%>
            <div className="space-y-1">
              <p className="text-sm font-medium text-muted-foreground"><%= fieldNameHumanized %></p>
<% if (field.fieldTypeBoolean) { %>
              <p>{entity.<%= fieldName %> ? "Yes" : "No"}</p>
<% } else if (field.fieldTypeTimed || field.fieldTypeLocalDate) { %>
              <p>{entity.<%= fieldName %> ? format(new Date(entity.<%= fieldName %>), "PPP") : ""}</p>
<% } else if (field.fieldTypeBinary && !field.blobContentTypeText) { %>
              <p>
                {entity.<%= fieldName %> ? (
<% if (field.blobContentTypeImage) { %>
                  <img
                    src={`data:${entity.<%= fieldName %>ContentType};base64,${entity.<%= fieldName %>}`}
                    alt=""
                    className="max-h-20"
                  />
<% } else { %>
                  <span>Binary data</span>
<% } %>
                ) : ""}
              </p>
<% } else { %>
              <p>{entity.<%= fieldName %> || "—"}</p>
<% } %>
            </div>
<%_ } _%>

<%_ // Safely filter relationships to avoid undefined properties
    const safeRelationships = (persistableRelationships || []).filter(
      r => r && r.relationshipName && r.otherEntity
    );
    for (const rel of safeRelationships) { 
      const relationshipFieldName = rel.relationshipFieldName;
      const relationshipFieldNamePlural = rel.relationshipFieldNamePlural;
      const relationshipNameHumanized = rel.relationshipNameHumanized;
      const otherEntityField = rel.otherEntityField;
_%>
            <div className="space-y-1">
              <p className="text-sm font-medium text-muted-foreground"><%= relationshipNameHumanized %></p>
<% if (rel.collection) { %>
              <p>
                {entity.<%= relationshipFieldNamePlural %>?.length
                  ? entity.<%= relationshipFieldNamePlural %>.map((item) => item.<%= otherEntityField %>).join(", ")
                  : "—"}
              </p>
<% } else { %>
              <p>{entity.<%= relationshipFieldName %>?.<%= otherEntityField %> || "—"}</p>
<% } %>
            </div>
<%_ } _%>
          </div>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button variant="outline" asChild>
            <Link href="/<%= entityRoute %>">Back</Link>
          </Button>
          <div className="flex gap-2">
            <Button variant="outline" asChild>
              <Link href={`/<%= entityRoute %>/${id}/edit`}>
                <Pencil className="mr-2 h-4 w-4" />
                Edit
              </Link>
            </Button>
            <Button
              variant="destructive"
              onClick={() => setShowDeleteDialog(true)}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </Button>
          </div>
        </CardFooter>
      </Card>

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the
              <%= entityClass.toLowerCase() %> and remove its data from the server.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
