<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use client";

import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { format } from "date-fns";
import { Trash2, ArrowLeft, Pencil } from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";

import {
  useGet<%= entityClass %>,
  useDelete<%= entityClass %>,
} from "@/core/api/generated/spring/endpoints/<%= entityFileName %>-resource/<%= entityFileName %>-resource.gen";

<%
// Helper function to convert camelCase to Title Case
function camelToTitleCase(str) {
  return str
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}

// Filter relationships to avoid undefined properties
const safeRelationships = (relationships || []).filter(
  rel => rel && rel.relationshipName && rel.otherEntity && 
  rel.relationshipType !== 'one-to-many' && !rel.collection && rel.otherEntityField
);
%>

interface <%= entityClass %>DetailsProps {
  id: number;
}

export function <%= entityClass %>Details({ id }: <%= entityClass %>DetailsProps) {
  const router = useRouter();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  // Fetch entity details
  const { data: entity, isLoading } = useGet<%= entityClass %>(id, {
    query: {
      enabled: !!id,
    },
  });

  // Delete mutation
  const { mutate: deleteEntity } = useDelete<%= entityClass %>({
    mutation: {
      onSuccess: () => {
        toast.success("<%= entityClass %> deleted successfully");
        router.push("/<%= entityRoute %>");
      },
      onError: (error) => {
        toast.error(`Failed to delete <%= entityClass %>: ${error}`);
      },
    },
  });

  const handleDelete = () => {
    deleteEntity({ id });
    setShowDeleteDialog(false);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  if (!entity) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-lg text-muted-foreground">Entity not found</div>
      </div>
    );
  }

  return (
    <>
      <Card>
        <CardHeader>
          <CardDescription>
            Viewing details for <%= entityClassHumanized %> #<%= primaryKey.name %>{entity.<%= primaryKey.name %>}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Basic Information */}
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold mb-6 text-foreground border-b pb-2">Basic Information</h3>
                <div className="space-y-5">
                  <% for (field of fields) { 
                    const fieldName = field.fieldName;
                    const fieldLabel = camelToTitleCase(fieldName);
                  %>
                  <div className="border-l-4 border-primary/20 pl-4 py-2">
                    <dt className="text-xs font-semibold text-muted-foreground uppercase tracking-wide mb-1"><%= fieldLabel %></dt>
                    <dd className="text-base font-medium">
                      <% if (field.fieldTypeBoolean) { %>
                      <Badge variant={entity.<%= fieldName %> ? "default" : "secondary"} className="text-sm">
                        {entity.<%= fieldName %> ? "Yes" : "No"}
                      </Badge>
                      <% } else if (field.fieldTypeTimed || field.fieldTypeLocalDate) { %>
                      <span className="text-foreground">
                        {entity.<%= fieldName %> ? format(new Date(entity.<%= fieldName %>), "PPP") : "—"}
                      </span>
                      <% } else if (field.fieldTypeBinary && !field.blobContentTypeText) { %>
                      <div>
                        {entity.<%= fieldName %> ? (
                          <% if (field.blobContentTypeImage) { %>
                          <img
                            src={`data:${entity.<%= fieldName %>ContentType};base64,${entity.<%= fieldName %>}`}
                            alt="<%= fieldLabel %>"
                            className="max-h-40 rounded-lg border shadow-sm"
                          />
                          <% } else { %>
                          <Badge variant="outline" className="text-sm">Binary data</Badge>
                          <% } %>
                        ) : "—"}
                      </div>
                      <% } else if (field.fieldIsEnum) { %>
                      <Badge variant="outline" className="text-sm font-medium">{entity.<%= fieldName %> || "—"}</Badge>
                      <% } else { %>
                      <span className="text-foreground break-words">{entity.<%= fieldName %> || "—"}</span>
                      <% } %>
                    </dd>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>

            <% if (safeRelationships.length > 0) { %>
            {/* Relationships */}
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold mb-6 text-foreground border-b pb-2">Related Information</h3>
                <div className="space-y-5">
                  <% for (const rel of safeRelationships) { 
                    const relationshipFieldName = rel.relationshipFieldName;
                    const relationshipLabel = camelToTitleCase(rel.relationshipName);
                    const displayField = rel.otherEntity.builtInUser ? 'login' : rel.otherEntityField;
                  %>
                  <div className="border-l-4 border-primary/20 pl-4 py-2">
                    <dt className="text-xs font-semibold text-muted-foreground uppercase tracking-wide mb-1"><%= relationshipLabel %></dt>
                    <dd className="text-base font-medium">
                      <% if (rel.collection) { %>
                      {entity.<%= relationshipFieldName %>?.length ? (
                        <div className="flex flex-wrap gap-2">
                          {entity.<%= relationshipFieldName %>.map((item, index) => (
                            <Badge key={index} variant="outline" className="text-sm">
                              {item.<%= displayField %> || item.id}
                            </Badge>
                          ))}
                        </div>
                      ) : "—"}
                      <% } else { %>
                      {entity.<%= relationshipFieldName %> ? (
                        <Badge variant="outline" className="text-sm font-medium">
                          {(entity.<%= relationshipFieldName %> as any).<%= displayField %> || entity.<%= relationshipFieldName %>.id}
                        </Badge>
                      ) : "—"}
                      <% } %>
                    </dd>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>
            <% } %>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-end gap-3 mt-8 pt-6 border-t">
            <Button variant="outline" asChild>
              <Link href={`/<%= entityRoute %>/${id}/edit`} className="flex items-center gap-2">
                <Pencil className="h-4 w-4" />
                Edit
              </Link>
            </Button>
            <Button 
              variant="destructive"
              onClick={() => setShowDeleteDialog(true)}
              className="flex items-center gap-2"
            >
              <Trash2 className="h-4 w-4" />
              Delete
            </Button>
          </div>
        </CardContent>
      </Card>

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the
              <%= entityClass.toLowerCase() %> and remove its data from the server.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
