"use client";

import { ChevronDown, ChevronUp, ChevronsUpDown, Filter } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

<%
const displayableRelationships = relationships.filter(rel => 
  rel.relationshipType !== 'one-to-many' && 
  !rel.collection && 
  rel.otherEntityField
);

// Organize fields by type for better filter organization
const enumFields = fields.filter(f => f.fieldIsEnum);
const booleanFields = fields.filter(f => f.fieldTypeBoolean);
const dateFields = fields.filter(f => f.fieldTypeLocalDate || f.fieldTypeTimed);
const textFields = fields.filter(f => !f.fieldIsEnum && !f.fieldTypeBoolean && !f.fieldTypeLocalDate && !f.fieldTypeTimed && !f.fieldTypeBinary);

// Function to convert camelCase to Title Case
function camelToTitleCase(str) {
  return str
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}
%>

interface FilterState {
  [key: string]: string | string[] | Date | undefined;
}

interface <%= entityClass %>TableHeaderProps {
  onSort: (column: string) => void;
  getSortIcon: (column: string) => string;
  filters: FilterState;
  onFilterChange: (column: string, value: any) => void;
  isAllSelected: boolean;
  isIndeterminate: boolean;
  onSelectAll: () => void;
  visibleColumns: Array<{
    id: string;
    label: string;
    accessor: string;
    type: 'field' | 'relationship';
    visible: boolean;
    sortable: boolean;
  }>;
}

export function <%= entityClass %>TableHeader({ 
  onSort, 
  getSortIcon,
  filters,
  onFilterChange,
  isAllSelected,
  isIndeterminate,
  onSelectAll,
  visibleColumns
}: <%= entityClass %>TableHeaderProps) {
  const renderSortIcon = (column: string) => {
    const iconType = getSortIcon(column);
    switch (iconType) {
      case "ChevronUp":
        return <ChevronUp className="h-4 w-4" />;
      case "ChevronDown":
        return <ChevronDown className="h-4 w-4" />;
      default:
        return <ChevronsUpDown className="h-4 w-4" />;
    }
  };

  return (
    <TableHeader>
      {/* Header Row with Sort Buttons */}
      <TableRow className="border-b border-gray-200 bg-gray-50">
        <TableHead className="w-12 px-3 py-2">
          <Checkbox
            checked={isAllSelected}
            onCheckedChange={onSelectAll}
            ref={(el) => {
              if (el) el.indeterminate = isIndeterminate;
            }}
          />
        </TableHead>
        {visibleColumns.map((column) => (
          <TableHead key={column.id} className="whitespace-nowrap px-3 py-2">
            {column.sortable ? (
              <Button
                variant="ghost"
                onClick={() => onSort(column.accessor)}
                className="flex items-center gap-1.5 h-auto px-2 py-1 font-medium text-gray-700 hover:text-gray-900 hover:bg-white rounded text-sm transition-colors"
              >
                {column.label}
                <div className="text-gray-400">
                  {renderSortIcon(column.accessor)}
                </div>
              </Button>
            ) : (
              <span className="font-medium text-gray-700 text-sm">
                {column.label}
              </span>
            )}
          </TableHead>
        ))}
        <TableHead className="w-[120px] sticky right-0 bg-gray-50 px-3 py-2 border-l border-gray-200">
          <div className="flex items-center gap-2 font-medium text-gray-700 text-sm">
            <Filter className="h-3.5 w-3.5 text-gray-500" />
            <span>Actions</span>
          </div>
        </TableHead>
      </TableRow>
      
      {/* Filter Row */}
      <TableRow className="border-b bg-white">
        <TableHead className="w-12 px-3 py-2">
          {/* Empty cell for checkbox column */}
        </TableHead>
        {visibleColumns.map((column) => (
          <TableHead key={`filter-${column.id}`} className="px-3 py-2">
            {column.type === 'field' ? (
              (() => {
                <% for (field of fields) { %>
                if (column.accessor === '<%= field.fieldName %>') {
                  <% if (field.fieldIsEnum) { %>
                  return (
                    <Select
                      value={filters["<%= field.fieldName %>"] as string || "__all__"}
                      onValueChange={(value) => onFilterChange("<%= field.fieldName %>", value === "__all__" ? undefined : value)}
                    >
                      <SelectTrigger className="h-8 text-xs border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500">
                        <SelectValue placeholder="All" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="__all__">All</SelectItem>
                        <% for (const enumValue of field.enumValues || []) { %>
                        <SelectItem value="<%= enumValue.name || enumValue.value || 'EMPTY_VALUE' %>">
                          <%= enumValue.name || enumValue.value || 'Empty' %>
                        </SelectItem>
                        <% } %>
                      </SelectContent>
                    </Select>
                  );
                  <% } else if (field.fieldTypeBoolean) { %>
                  return (
                    <Select
                      value={filters["<%= field.fieldName %>"] as string || "__all__"}
                      onValueChange={(value) => onFilterChange("<%= field.fieldName %>", value === "__all__" ? undefined : value)}
                    >
                      <SelectTrigger className="h-8 text-xs border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500">
                        <SelectValue placeholder="All" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="__all__">All</SelectItem>
                        <SelectItem value="true">Yes</SelectItem>
                        <SelectItem value="false">No</SelectItem>
                      </SelectContent>
                    </Select>
                  );
                  <% } else if (field.fieldTypeLocalDate || field.fieldTypeTimed) { %>
                  return (
                    <Input
                      type="date"
                      className="h-8 text-xs border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      value={filters["<%= field.fieldName %>"] as string || ""}
                      onChange={(e) => onFilterChange("<%= field.fieldName %>", e.target.value || undefined)}
                    />
                  );
                  <% } else { %>
                  return (
                    <Input
                      placeholder="Filter..."
                      className="h-8 text-xs border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 placeholder:text-gray-400"
                      value={filters["<%= field.fieldName %>"] as string || ""}
                      onChange={(e) => onFilterChange("<%= field.fieldName %>", e.target.value || undefined)}
                    />
                  );
                  <% } %>
                }
                <% } %>
                return null;
              })()
            ) : (
              (() => {
                <% for (const rel of displayableRelationships) { 
                  const displayField = rel.otherEntity.builtInUser ? 'login' : rel.otherEntityField;
                %>
                if (column.accessor === '<%= rel.relationshipName %>') {
                  return (
                    <Input
                      placeholder="Filter..."
                      className="h-8 text-xs border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 placeholder:text-gray-400"
                      value={filters["<%= rel.relationshipName %>.<%=displayField%>"] as string || ""}
                      onChange={(e) => onFilterChange("<%= rel.relationshipName %>.<%=displayField%>", e.target.value || undefined)}
                    />
                  );
                }
                <% } %>
                return null;
              })()
            )}
          </TableHead>
        ))}
        <TableHead className="w-[120px] sticky right-0 bg-white px-3 py-2 border-l border-gray-200">
          <div className="flex items-center gap-1.5">
            <Filter className="h-3.5 w-3.5 text-gray-500" />
            <span className="text-xs font-medium text-gray-600">Filters</span>
          </div>
        </TableHead>
      </TableRow>
    </TableHeader>
  );
}
