"use client";

import Link from "next/link";
import { Eye, Pencil, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { TableCell, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";
import { InlinePermissionGuard } from "@/components/auth/permission-guard";
import { RelationshipCell } from "./relationship-cell";
import type { <%= entityClass %>DTO } from "@/core/api/generated/spring/schemas/<%= entityClass %>DTO";

<%
const displayableRelationships = relationships.filter(rel => 
  rel.relationshipType !== 'one-to-many' && 
  !rel.collection && 
  rel.otherEntityField
);

// Helper function to convert entity name to route
function entityToRoute(entityName) {
  if (!entityName) return '';
  const kebabCase = entityName.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
  // Simple pluralization logic
  if (kebabCase.endsWith('y') && kebabCase.length > 1 && !'aeiou'.includes(kebabCase[kebabCase.length - 2])) {
    return kebabCase.slice(0, -1) + 'ies';
  } else if (kebabCase.endsWith('s') || kebabCase.endsWith('sh') || kebabCase.endsWith('ch') || kebabCase.endsWith('x') || kebabCase.endsWith('z')) {
    return kebabCase + 'es';
  } else {
    return kebabCase + 's';
  }
}
%>

interface RelationshipConfig {
  name: string;
  displayName: string;
  options: Array<{ id: number; [key: string]: any }>;
  displayField: string;
  isEditable: boolean;
}

interface <%= entityClass %>TableRowProps {
  <%= entityInstance %>: <%= entityClass %>DTO;
  onDelete: (id: number) => void;
  isDeleting: boolean;
  isSelected: boolean;
  onSelect: (id: number) => void;
  relationshipConfigs?: RelationshipConfig[];
  onRelationshipUpdate?: (entityId: number, relationshipName: string, newValue: number | null) => Promise<void>;
  isUpdating?: boolean;
  visibleColumns: Array<{
    id: string;
    label: string;
    accessor: string;
    type: 'field' | 'relationship';
    visible: boolean;
    sortable: boolean;
  }>;
}

export function <%= entityClass %>TableRow({ 
  <%= entityInstance %>, 
  onDelete, 
  isDeleting, 
  isSelected, 
  onSelect,
  relationshipConfigs = [],
  onRelationshipUpdate,
  isUpdating = false,
  visibleColumns,
}: <%= entityClass %>TableRowProps) {
  return (
    <TableRow className="hover:bg-gray-50 transition-colors">
      <TableCell className="w-10 sm:w-12 px-2 sm:px-3 py-2 sticky left-0 bg-white z-10">
        <Checkbox
          checked={isSelected}
          onCheckedChange={() => <%= entityInstance %>.<%= primaryKey.name %> && onSelect(<%= entityInstance %>.<%= primaryKey.name %>)}
        />
      </TableCell>
      {visibleColumns.map((column, index) => (
        <TableCell 
          key={column.id} 
          className={`
            px-2 sm:px-3 py-2 
            ${index === 0 ? 'min-w-[120px]' : 'min-w-[100px]'} 
            whitespace-nowrap overflow-hidden text-ellipsis
          `}
        >
          {column.type === 'field' ? (
            // Render field column
            (() => {
              const field = <%= entityInstance %>[column.accessor as keyof typeof <%= entityInstance %>];
              <% for (field of fields) { 
                const fieldName = field.fieldName; %>
              if (column.id === '<%= fieldName %>') {
                <% if (field.fieldTypeBoolean) { %>
                return field ? "Yes" : "No";
                <% } else if (field.fieldTypeLocalDate || field.fieldTypeTimed) { %>
                return field ? format(new Date(field as string), "PPP") : "";
                <% } else if (field.fieldTypeBinary && !field.blobContentTypeText) { %>
                return field ? (
                  <>
                    <% if (field.blobContentTypeImage) { %>
                    <img
                      src={`data:${(<%= entityInstance %> as any).<%= fieldName %>ContentType};base64,${field}`}
                      alt=""
                      className="max-h-8 rounded"
                    />
                    <% } else { %>
                    <span className="text-muted-foreground">Binary data</span>
                    <% } %>
                  </>
                ) : "";
                <% } else if (field.fieldIsEnum) { %>
                return <Badge variant="secondary">{field as string}</Badge>;
                <% } else { %>
                return field?.toString() || "";
                <% } %>
              }
              <% } %>
              return field?.toString() || "";
            })()
          ) : (
            // Render relationship column
            (() => {
              <% for (const rel of displayableRelationships) { 
                const displayField = rel.otherEntity.builtInUser ? 'login' : rel.otherEntityField;
                const relationshipFieldName = rel.relationshipFieldName;
                const otherEntityRoute = rel.otherEntity.builtInUser ? 'users' : entityToRoute(rel.otherEntityName);
              %>
              if (column.id === '<%= rel.relationshipName %>') {
                return (
                  <RelationshipCell
                    entityId={<%= entityInstance %>.<%= primaryKey.name %> || 0}
                    relationshipName="<%= relationshipFieldName %>"
                    currentValue={<%= entityInstance %>.<%= relationshipFieldName %>}
                    options={relationshipConfigs.find(config => config.name === "<%= relationshipFieldName %>")?.options || []}
                    displayField="<%= displayField %>"
                    onUpdate={onRelationshipUpdate || (() => Promise.resolve())}
                    isEditable={relationshipConfigs.find(config => config.name === "<%= relationshipFieldName %>")?.isEditable || false}
                    isLoading={isUpdating}
                    className="min-w-[150px]"
                    relatedEntityRoute="<%= otherEntityRoute %>"
                    showNavigationIcon={true}
                  />
                );
              }
              <% } %>
              return null;
            })()
          )}
        </TableCell>
      ))}
      <TableCell className="sticky right-0 bg-white px-2 sm:px-3 py-2 border-l border-gray-200 z-10 w-[100px] sm:w-[120px]">
        <div className="flex items-center gap-0.5 sm:gap-1">
          <InlinePermissionGuard requiredPermission="<%= entityInstance %>:read">
            <Button
              variant="ghost"
              size="sm"
              asChild
              className="h-6 w-6 sm:h-7 sm:w-7 p-0"
            >
              <Link href={`/<%= entityRoute %>/${<%= entityInstance %>.<%= primaryKey.name %>}`}>
                <Eye className="h-3 w-3 sm:h-3.5 sm:w-3.5" />
                <span className="sr-only">View</span>
              </Link>
            </Button>
          </InlinePermissionGuard>
          <InlinePermissionGuard requiredPermission="<%= entityInstance %>:update">
            <Button
              variant="ghost"
              size="sm"
              asChild
              className="h-6 w-6 sm:h-7 sm:w-7 p-0"
            >
              <Link href={`/<%= entityRoute %>/${<%= entityInstance %>.<%= primaryKey.name %>}/edit`}>
                <Pencil className="h-3 w-3 sm:h-3.5 sm:w-3.5" />
                <span className="sr-only">Edit</span>
              </Link>
            </Button>
          </InlinePermissionGuard>
          <InlinePermissionGuard requiredPermission="<%= entityInstance %>:delete">
            <Button
              variant="ghost"
              size="sm"
              className="h-6 w-6 sm:h-7 sm:w-7 p-0 text-destructive"
              onClick={() => <%= entityInstance %>.<%= primaryKey.name %> && onDelete(<%= entityInstance %>.<%= primaryKey.name %>)}
              disabled={isDeleting || !<%= entityInstance %>.<%= primaryKey.name %>}
            >
              <Trash2 className="h-3 w-3 sm:h-3.5 sm:w-3.5" />
              <span className="sr-only">Delete</span>
            </Button>
          </InlinePermissionGuard>
        </div>
      </TableCell>
    </TableRow>
  );
}
