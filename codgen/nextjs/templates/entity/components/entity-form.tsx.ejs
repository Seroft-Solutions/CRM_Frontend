<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { ArrowLeft, ArrowRight, Check } from "lucide-react";
import { toast } from "sonner";

import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Form } from "@/components/ui/form";
import { Progress } from "@/components/ui/progress";

import { 
  useCreate<%= entityClass %>,
  useUpdate<%= entityClass %>,
  useGet<%= entityClass %>,
} from "@/core/api/generated/spring/endpoints/<%= entityFileName %>-resource/<%= entityFileName %>-resource.gen";

import { <%= entityInstance %>Toast, handle<%= entityClass %>Error } from "./<%= entityFileName %>-toast";
import type { <%= entityClass %>DTO } from "@/core/api/generated/spring/schemas/<%= entityClass %>DTO";

<%_
// Import step components
const stepComponents = [];

// Define steps based on entity structure
const steps = [];

// Add basic step only if there are basic fields (non-relationship, non-date fields)
const basicFields = fields.filter(field => 
  !field.id && 
  !field.fieldTypeBinary && 
  !field.fieldTypeTimed && 
  !field.fieldTypeLocalDate
);
if (basicFields.length > 0) {
  steps.push({
    id: "basic",
    title: "Basic Information", 
    description: "Enter essential details"
  });
  stepComponents.push("Basic");
}

// Add dates step if there are date fields
const dateFields = fields.filter(field => field.fieldTypeTimed || field.fieldTypeLocalDate);
if (dateFields.length > 0) {
  steps.push({
    id: "dates",
    title: "Date & Time",
    description: "Set relevant dates"
  });
  stepComponents.push("Dates");
}

// Add geographic step if there are location-related relationships
const geoRelationships = persistableRelationships.filter(rel => 
  ['state', 'district', 'city', 'area'].includes(rel.relationshipName.toLowerCase()) ||
  ['state', 'district', 'city', 'area'].includes(rel.otherEntityName.toLowerCase())
);
if (geoRelationships.length > 0) {
  steps.push({
    id: "geographic", 
    title: "Location Details",
    description: "Select geographic information"
  });
  stepComponents.push("Geographic");
}

// Add users step if there are user-related relationships
const userRelationships = persistableRelationships.filter(rel => 
  ['user', 'assignedto', 'createdby', 'modifiedby'].includes(rel.relationshipName.toLowerCase()) ||
  ['user', 'userprofile'].includes(rel.otherEntityName.toLowerCase())
);
if (userRelationships.length > 0) {
  steps.push({
    id: "users",
    title: "People & Assignment", 
    description: "Assign users and responsibilities"
  });
  stepComponents.push("Users");
}

// Add classification step if there are enum fields or classification relationships
const enumFields = fields.filter(field => field.fieldIsEnum);
const classificationRelationships = persistableRelationships.filter(rel => 
  ['priority', 'status', 'type', 'category', 'source', 'channel'].some(keyword => 
    rel.relationshipName.toLowerCase().includes(keyword) ||
    rel.otherEntityName.toLowerCase().includes(keyword)
  )
);
if (enumFields.length > 0 || classificationRelationships.length > 0) {
  // Generate dynamic description based on what's available
  const descriptionParts = [];
  
  if (enumFields.some(f => f.fieldName.toLowerCase().includes('priority'))) {
    descriptionParts.push('priority');
  }
  if (enumFields.some(f => f.fieldName.toLowerCase().includes('status')) || 
      classificationRelationships.some(r => r.relationshipName.toLowerCase().includes('status'))) {
    descriptionParts.push('status');
  }
  if (enumFields.some(f => f.fieldName.toLowerCase().includes('category')) || 
      classificationRelationships.some(r => r.relationshipName.toLowerCase().includes('category'))) {
    descriptionParts.push('categories');
  }
  if (classificationRelationships.some(r => r.relationshipName.toLowerCase().includes('type'))) {
    descriptionParts.push('type');
  }
  if (classificationRelationships.some(r => r.relationshipName.toLowerCase().includes('source'))) {
    descriptionParts.push('source');
  }
  if (classificationRelationships.some(r => r.relationshipName.toLowerCase().includes('channel'))) {
    descriptionParts.push('channel');
  }
  
  // Default fallback if no specific matches
  if (descriptionParts.length === 0) {
    descriptionParts.push('classification details');
  }
  
  const description = descriptionParts.length > 1 
    ? `Set ${descriptionParts.slice(0, -1).join(', ')} and ${descriptionParts[descriptionParts.length - 1]}`
    : `Set ${descriptionParts[0]}`;
    
  steps.push({
    id: "classification",
    title: "Classification",
    description: description
  });
  stepComponents.push("Classification");
}

// Add business step if there are business-related relationships
const businessRelationships = persistableRelationships.filter(rel => 
  ['party', 'customer', 'product', 'service', 'organization'].some(keyword =>
    rel.relationshipName.toLowerCase().includes(keyword) ||
    rel.otherEntityName.toLowerCase().includes(keyword)
  )
);
if (businessRelationships.length > 0) {
  steps.push({
    id: "business",
    title: "Business Relations",
    description: "Connect with customers and products"
  });
  stepComponents.push("Relationships");
}

// Always include review step last
steps.push({
  id: "review",
  title: "Review", 
  description: "Confirm your details"
});
stepComponents.push("Review");
_%>

// Import step components
<%_ stepComponents.forEach(component => { _%>
import { <%= entityClass %>Step<%= component %> } from "./steps/<%= entityFileName %>-step-<%= component.toLowerCase() %>";
<%_ }); _%>

// Props interface
interface <%= entityClass %>FormProps {
  id?: string;
}

// Form schema
const <%= entityInstance %>Schema = z.object({
<%_ fields.forEach((field, index) => { _%>
  <%_ if (field.fieldTypeBoolean) { _%>
  <%= field.fieldName %>: z.boolean().optional(),
  <%_ } else if (field.fieldTypeNumeric) { _%>
  <%= field.fieldName %>: z.number().optional(),
  <%_ } else if (field.fieldTypeTimed || field.fieldTypeLocalDate) { _%>
  <%= field.fieldName %>: z.date().optional(),
  <%_ } else { _%>
  <%= field.fieldName %>: z.string().optional(),
  <%_ } _%>
<%_ }); _%>
<%_ relationships.forEach((relationship) => { _%>
  <%= relationship.relationshipName %>: z.number().optional(),
<%_ }); _%>
});

// Step definitions
const STEPS = <%= JSON.stringify(steps) %>;

export function <%= entityClass %>Form({ id }: <%= entityClass %>FormProps) {
  const router = useRouter();
  const isNew = !id;
  const [currentStep, setCurrentStep] = useState(0);
  const [confirmSubmission, setConfirmSubmission] = useState(false);

  // Form setup
  const form = useForm<z.infer<typeof <%= entityInstance %>Schema>>({
    resolver: zodResolver(<%= entityInstance %>Schema),
    defaultValues: {
<%_ fields.forEach((field) => { _%>
  <%_ if (field.fieldTypeBoolean) { _%>
      <%= field.fieldName %>: false,
  <%_ } else if (field.fieldTypeNumeric) { _%>
      <%= field.fieldName %>: undefined,
  <%_ } else { _%>
      <%= field.fieldName %>: "",
  <%_ } _%>
<%_ }); _%>
<%_ relationships.forEach((relationship) => { _%>
      <%= relationship.relationshipName %>: undefined,
<%_ }); _%>
    },
  });

  // API hooks
  const { data: existing<%= entityClass %> } = useGet<%= entityClass %>(
    { id: id || "" },
    { query: { enabled: !isNew && !!id } }
  );

  const create<%= entityClass %>Mutation = useCreate<%= entityClass %>({
    mutation: {
      onSuccess: (data) => {
        <%= entityInstance %>Toast.created(data.data);
        router.push("/<%= entityFileName %>s");
      },
      onError: handle<%= entityClass %>Error,
    },
  });

  const update<%= entityClass %>Mutation = useUpdate<%= entityClass %>({
    mutation: {
      onSuccess: (data) => {
        <%= entityInstance %>Toast.updated(data.data);
        router.push("/<%= entityFileName %>s");
      },
      onError: handle<%= entityClass %>Error,
    },
  });

  // Load existing data
  if (existing<%= entityClass %> && !form.formState.isDirty) {
    const data = existing<%= entityClass %>.data;
    if (data) {
      const formData: any = {};
<%_ fields.forEach((field) => { _%>
  <%_ if (field.fieldTypeTimed || field.fieldTypeLocalDate) { _%>
      if (data.<%= field.fieldName %>) {
        formData.<%= field.fieldName %> = new Date(data.<%= field.fieldName %>);
      }
  <%_ } else { _%>
      if (data.<%= field.fieldName %> !== undefined) {
        formData.<%= field.fieldName %> = data.<%= field.fieldName %>;
      }
  <%_ } _%>
<%_ }); _%>
<%_ relationships.forEach((relationship) => { _%>
      if (data.<%= relationship.relationshipName %>) {
        formData.<%= relationship.relationshipName %> = data.<%= relationship.relationshipName %>.id;
      }
<%_ }); _%>
      form.reset(formData);
    }
  }

  // Entity creation handler for relationships
  const handleEntityCreated = (entityType: string, entityData: any) => {
    // Handle newly created entities in relationships
    toast.success(`${entityType} created successfully`);
  };

  // Navigation
  const nextStep = () => {
    if (currentStep < STEPS.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const goToStep = (step: number) => {
    setCurrentStep(step);
  };

  // Form submission
  const onSubmit = (values: z.infer<typeof <%= entityInstance %>Schema>) => {
    // If not on review step, go to review
    if (STEPS[currentStep].id !== 'review') {
      setCurrentStep(STEPS.length - 1); // Go to review step
      return;
    }

    // If on review step but not confirmed, show confirmation
    if (!confirmSubmission) {
      setConfirmSubmission(true);
      return;
    }

    // Proceed with actual submission
    const <%= entityInstance %>Data: <%= entityClass %>DTO = {
<%_ fields.forEach((field) => { _%>
  <%_ if (field.fieldTypeTimed || field.fieldTypeLocalDate) { _%>
      <%= field.fieldName %>: values.<%= field.fieldName %>?.toISOString(),
  <%_ } else { _%>
      <%= field.fieldName %>: values.<%= field.fieldName %>,
  <%_ } _%>
<%_ }); _%>
<%_ relationships.forEach((relationship) => { _%>
      <%= relationship.relationshipName %>: values.<%= relationship.relationshipName %> ? { id: values.<%= relationship.relationshipName %> } : undefined,
<%_ }); _%>
    };

    if (isNew) {
      create<%= entityClass %>Mutation.mutate({ data: <%= entityInstance %>Data });
    } else {
      update<%= entityClass %>Mutation.mutate({
        id: id!,
        data: { ...existing<%= entityClass %>?.data, ...<%= entityInstance %>Data },
      });
    }
  };

  const isLoading = create<%= entityClass %>Mutation.isPending || update<%= entityClass %>Mutation.isPending;
  const progress = ((currentStep + 1) / STEPS.length) * 100;

  return (
    <div className="space-y-6">
      {/* Progress Indicator */}
      <div className="space-y-2">
        <div className="flex justify-between text-sm text-muted-foreground">
          <span>Step {currentStep + 1} of {STEPS.length}</span>
          <span>{Math.round(progress)}% Complete</span>
        </div>
        <Progress value={progress} className="w-full" />
      </div>

      {/* Step Navigation */}
      <div className="flex flex-wrap gap-2 justify-center">
        {STEPS.map((step, index) => (
          <Button
            key={step.id}
            variant={index === currentStep ? "default" : index < currentStep ? "secondary" : "outline"}
            size="sm"
            onClick={() => goToStep(index)}
            className="text-xs"
          >
            {index < currentStep && <Check className="h-3 w-3 mr-1" />}
            {step.title}
          </Button>
        ))}
      </div>

      {/* Step Header */}
      <div className="text-center space-y-1">
        <h2 className="text-lg sm:text-xl font-semibold">{STEPS[currentStep].title}</h2>
        <p className="text-sm text-muted-foreground">{STEPS[currentStep].description}</p>
      </div>

      {/* Form Content */}
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <Card>
            <CardContent className="p-4 sm:p-6">
              {/* Step Content */}
<%_ stepComponents.forEach((component, index) => { _%>
              {STEPS[currentStep].id === '<%= steps[index].id %>' && (
                <<%= entityClass %>Step<%= component %> form={form}<% if (component !== 'Basic' && component !== 'Review') { %> handleEntityCreated={handleEntityCreated}<% } %> />
              )}

<%_ }); _%>
            </CardContent>
          </Card>

          {/* Navigation Buttons */}
          <div className="flex flex-col sm:flex-row gap-3 sm:justify-between">
            <Button
              type="button"
              variant="outline"
              onClick={prevStep}
              disabled={currentStep === 0}
              className="flex items-center gap-2 justify-center"
            >
              <ArrowLeft className="h-4 w-4" />
              Previous
            </Button>

            {STEPS[currentStep].id === 'review' && confirmSubmission ? (
              <Button
                type="submit"
                disabled={isLoading}
                className="flex items-center gap-2 justify-center"
              >
                <Check className="h-4 w-4" />
                {isLoading ? "Saving..." : `${isNew ? "Create" : "Update"} <%= entityClass %>`}
              </Button>
            ) : STEPS[currentStep].id === 'review' ? (
              <Button
                type="submit"
                className="flex items-center gap-2 justify-center"
              >
                <Check className="h-4 w-4" />
                Confirm & {isNew ? "Create" : "Update"}
              </Button>
            ) : (
              <Button
                type="button"
                onClick={nextStep}
                className="flex items-center gap-2 justify-center"
              >
                Next Step
                <ArrowRight className="h-4 w-4" />
              </Button>
            )}
          </div>
        </form>
      </Form>
    </div>
  );
}

export default <%= entityClass %>Form;