<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.
-%>
"use client";

import { useState, useEffect } from "react";
import * as React from "react";
import { useRouter } from "next/navigation";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { CalendarIcon, Save, ArrowLeft, ArrowRight, Check, ChevronRight } from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
<%_ if (persistableRelationships.length > 0) { _%>
import { PaginatedRelationshipCombobox } from "./paginated-relationship-combobox";
<%_ } _%>

import { 
  useCreate<%= entityClass %>,
  useUpdate<%= entityClass %>,
  useGet<%= entityClass %>,
} from "@/core/api/generated/spring/endpoints/<%= entityFileName %>-resource/<%= entityFileName %>-resource.gen";
<%_ 
// Helper function to convert camelCase to Title Case
function camelToTitleCase(str) {
  return str
    .replace(/([A-Z])/g, ' $1')
    .replace(/^./, str => str.toUpperCase())
    .trim();
}

// Organize fields by category
const basicFields = fields.filter(field => !field.id && !field.fieldTypeBinary);
const textFields = basicFields.filter(field => 
  !field.fieldTypeBoolean && !field.fieldTypeTimed && !field.fieldTypeLocalDate && 
  !field.fieldIsEnum && !field.fieldTypeNumeric
);
const numberFields = basicFields.filter(field => field.fieldTypeNumeric);
const dateFields = basicFields.filter(field => field.fieldTypeTimed || field.fieldTypeLocalDate);
const enumFields = basicFields.filter(field => field.fieldIsEnum);
const booleanFields = basicFields.filter(field => field.fieldTypeBoolean);
const binaryFields = fields.filter(field => field.fieldTypeBinary);

// Intelligent relationship grouping
const geographicKeywords = ['state', 'district', 'city', 'area', 'country', 'region', 'location'];
const userKeywords = ['user', 'assignedTo', 'createdBy', 'updatedBy', 'channelParty', 'owner'];
const classificationKeywords = ['priority', 'status', 'type', 'category', 'level', 'grade'];
const businessKeywords = ['party', 'customer', 'supplier', 'vendor', 'product', 'source', 'channel'];

function categorizeRelationship(rel) {
  const name = rel.relationshipName.toLowerCase();
  const otherEntity = rel.otherEntityName.toLowerCase();
  
  if (geographicKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw))) {
    return 'geographic';
  }
  if (userKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw)) || rel.otherEntity.builtInUser) {
    return 'user';
  }
  if (classificationKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw))) {
    return 'classification';
  }
  if (businessKeywords.some(kw => name.includes(kw) || otherEntity.includes(kw))) {
    return 'business';
  }
  return 'other';
}

// Group relationships by category
const relationshipGroups = {
  geographic: persistableRelationships.filter(rel => categorizeRelationship(rel) === 'geographic'),
  user: persistableRelationships.filter(rel => categorizeRelationship(rel) === 'user'),
  classification: persistableRelationships.filter(rel => categorizeRelationship(rel) === 'classification'),
  business: persistableRelationships.filter(rel => categorizeRelationship(rel) === 'business'),
  other: persistableRelationships.filter(rel => categorizeRelationship(rel) === 'other')
};

// Legacy variables for template compatibility
const hasUserRelationships = relationshipGroups.user.length > 0;

// Create geographic hierarchy (State → District → City → Area)
const geographicHierarchy = ['state', 'district', 'city', 'area'];
const sortedGeographic = relationshipGroups.geographic.sort((a, b) => {
  const aIndex = geographicHierarchy.findIndex(kw => a.relationshipName.toLowerCase().includes(kw));
  const bIndex = geographicHierarchy.findIndex(kw => b.relationshipName.toLowerCase().includes(kw));
  return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);
});

// Define wizard steps dynamically based on available fields
const steps = [
  ...(textFields.length > 0 || numberFields.length > 0 || enumFields.length > 0 ? [{ id: 'basic', title: 'Basic Information', description: 'Enter essential details' }] : []),
  ...(dateFields.length > 0 ? [{ id: 'dates', title: 'Date & Time', description: 'Set relevant dates' }] : []),
  ...(booleanFields.length > 0 || binaryFields.length > 0 ? [{ id: 'settings', title: 'Settings & Files', description: 'Configure options' }] : []),
  ...(relationshipGroups.geographic.length > 0 ? [{ id: 'geographic', title: 'Location Details', description: 'Select geographic information' }] : []),
  ...(relationshipGroups.user.length > 0 ? [{ id: 'users', title: 'People & Assignment', description: 'Assign users and responsibilities' }] : []),
  ...(relationshipGroups.classification.length > 0 ? [{ id: 'classification', title: 'Classification', description: 'Set priority, status, and categories' }] : []),
  ...(relationshipGroups.business.length > 0 ? [{ id: 'business', title: 'Business Relations', description: 'Connect with customers and products' }] : []),
  ...(relationshipGroups.other.length > 0 ? [{ id: 'other', title: 'Additional Relations', description: 'Other connections and references' }] : []),
  { id: 'review', title: 'Review', description: 'Confirm your details' }
];
_%>
<%_ for (const otherEntity of otherEntitiesWithPersistableRelationship.filter(e => !e.builtInUser)) { _%>
import { 
  useGetAll<%= otherEntity.entityClassPlural %>Infinite,
  useSearch<%= otherEntity.entityClassPlural %>Infinite 
} from "@/core/api/generated/spring/endpoints/<%= otherEntity.entityFileName %>-resource/<%= otherEntity.entityFileName %>-resource.gen";
<%_ } _%>
<%_ if (otherEntitiesWithPersistableRelationship.some(e => e.builtInUser)) { _%>
import { 
  useGetAllPublicUsersInfinite,
  useSearchInfinite as useSearchPublicUsersInfinite 
} from "@/core/api/generated/spring/endpoints/public-user-resource/public-user-resource.gen";
<%_ } _%>
import type { <%= entityClass %>DTO } from "@/core/api/generated/spring/schemas/<%= entityClass %>DTO";
<%_ if (hasUserRelationships) { _%>
import type { UserDTO } from "@/core/api/generated/spring/schemas/UserDTO";
<%_ } _%>

interface <%= entityClass %>FormProps {
  id?: number;
}

// Create Zod schema for form validation
const formSchema = z.object({
<%_ for (field of fields.filter(field => !field.id)) { 
    const fieldName = field.fieldName;
    const fieldValidateRules = field.fieldValidateRules || [];
    const isRequired = fieldValidateRules.includes('required');
_%>
  <%= fieldName %>: <% if (field.fieldTypeBoolean) { %>z.boolean()<% } else if (field.fieldTypeNumeric) { %>z.string()<% if (fieldValidateRules.includes('min')) { %>.refine(val => !val || Number(val) >= <%= field.fieldValidateRulesMin %>, { message: "Must be at least <%= field.fieldValidateRulesMin %>" })<% } %><% if (fieldValidateRules.includes('max')) { %>.refine(val => !val || Number(val) <= <%= field.fieldValidateRulesMax %>, { message: "Must be at most <%= field.fieldValidateRulesMax %>" })<% } %><% } else if (field.fieldTypeTimed || field.fieldTypeLocalDate) { %>z.date()<% } else if (field.fieldIsEnum) { %>z.string()<% if (!isRequired) { %>.transform(val => val === "__none__" ? undefined : val)<% } %><% } else { %>z.string()<% if (fieldValidateRules.includes('minlength')) { %>.min(<%= field.fieldValidateRulesMinlength %>)<% } %><% if (fieldValidateRules.includes('maxlength')) { %>.max(<%= field.fieldValidateRulesMaxlength %>)<% } %><% if (fieldValidateRules.includes('pattern')) { %>.regex(/<%= field.fieldValidateRulesPattern %>/)<% } %><% } %><% if (!isRequired) { %>.optional()<% } %>,
<%_ } _%>
<%_ for (const rel of persistableRelationships) { 
    const relationshipFieldName = rel.relationshipFieldName;
    const relationshipRequired = rel.relationshipRequired;
    const relationshipType = rel.otherEntity.builtInUser ? 'string' : 'number';
_%>
  <%= relationshipFieldName %>: z.<% if (rel.collection) { %>array(z.<%= relationshipType %>())<% } else { %><%= relationshipType %>()<% } %><% if (!relationshipRequired) { %>.optional()<% } %>,
<%_ } _%>
});

const STEPS = <%= JSON.stringify(steps) %>;

export function <%= entityClass %>Form({ id }: <%= entityClass %>FormProps) {
  const router = useRouter();
  const isNew = !id;
  const [currentStep, setCurrentStep] = useState(0);
  const [confirmSubmission, setConfirmSubmission] = useState(false);
  const [isRestoring, setIsRestoring] = useState(false);
  const [restorationAttempted, setRestorationAttempted] = useState(false);
  
  // Geographic hierarchy state for future cascading dropdowns
  const [geographicFilters, setGeographicFilters] = useState<{[key: string]: number | null}>({});

  // Create or update mutation (IMPROVED with localStorage)
  const { mutate: createEntity, isPending: isCreating } = useCreate<%= entityClass %>({
    mutation: {
      onSuccess: (data) => {
        // Check if we're creating for a relationship and need to return
        const returnUrl = localStorage.getItem('returnUrl');
        const relationshipInfo = localStorage.getItem('relationshipFieldInfo');
        
        console.log('Entity created successfully:', { data, returnUrl, relationshipInfo });
        
        if (returnUrl && relationshipInfo) {
          // Store the newly created entity ID for auto-selection
          const entityId = data?.id || data?.<%= primaryKey.name %>;
          if (entityId) {
            localStorage.setItem('newlyCreatedEntityId', entityId.toString());
            console.log('Stored newly created entity ID:', entityId);
          }
          
          toast.success("<%= entityClass %> created successfully");
          
          // Navigate back to the original form
          console.log('Returning to original form:', returnUrl);
          router.push(returnUrl);
          
          // DON'T clean up storage here - let the destination form handle cleanup after restoration
        } else {
          // Normal flow - go to list page
          toast.success("<%= entityClass %> created successfully");
          router.push("/<%= entityRoute %>");
        }
      },
      onError: (error) => {
        toast.error(`Failed to create <%= entityClass %>: ${error}`);
      },
    },
  });

  const { mutate: updateEntity, isPending: isUpdating } = useUpdate<%= entityClass %>({
    mutation: {
      onSuccess: () => {
        toast.success("<%= entityClass %> updated successfully");
        router.push("/<%= entityRoute %>");
      },
      onError: (error) => {
        toast.error(`Failed to update <%= entityClass %>: ${error}`);
      },
    },
  });

  // Fetch entity for editing
  const { data: entity, isLoading: isLoadingEntity } = useGet<%= entityClass %>(id || 0, {
    query: {
      enabled: !!id,
      queryKey: ["get-<%= entityFileName %>", id]
    },
  });

  // Form initialization with standard defaults
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    mode: "onChange",
    defaultValues: {
<%_ for (field of fields.filter(field => !field.id)) { 
    const fieldName = field.fieldName;
_%>
<% if (field.fieldTypeBoolean) { %>
      <%= fieldName %>: false,
<% } else if (field.fieldTypeNumeric) { %>
      <%= fieldName %>: "",
<% } else if (field.fieldTypeTimed || field.fieldTypeLocalDate) { %>
      <%= fieldName %>: new Date(),
<% } else if (field.fieldIsEnum) { %>
      <%= fieldName %>: <% if (!field.fieldValidateRules?.includes('required')) { %>undefined<% } else { %>"<%= field.enumValues[0].name %>"<% } %>,
<% } else { %>
      <%= fieldName %>: "",
<% } %>
<%_ } _%>
<%_ for (const rel of persistableRelationships) { 
    const relationshipFieldName = rel.relationshipFieldName;
_%>
<% if (rel.collection) { %>
      <%= relationshipFieldName %>: [],
<% } else { %>
      <%= relationshipFieldName %>: undefined,
<% } %>
<%_ } _%>
    },
  });

  // Restore preserved state immediately on mount
  React.useEffect(() => {
    const returnUrl = localStorage.getItem('returnUrl');
    const preserved = localStorage.getItem('preservedFormState');
    const currentUrl = window.location.href;
    
    console.log('Form mounting, checking for restoration:', { 
      returnUrl, 
      currentUrl,
      hasPreserved: !!preserved,
      isReturnDestination: currentUrl === returnUrl,
      currentEntityType: '<%= entityClass %>',
      restorationAttempted
    });
    
    // ONLY restore if this is the destination form (currentUrl matches returnUrl)
    if (returnUrl && preserved && !restorationAttempted && currentUrl === returnUrl) {
      setIsRestoring(true);
      setRestorationAttempted(true);
      
      try {
        const parsed = JSON.parse(preserved);
        console.log('Parsed preserved state:', {
          entityType: parsed.entityType,
          currentEntityType: '<%= entityClass %>',
          timestamp: parsed.timestamp,
          currentTime: Date.now(),
          timeDiff: Date.now() - parsed.timestamp,
          isRecent: Date.now() - parsed.timestamp < 1800000, // 30 minutes
          entityTypeMatch: parsed.entityType === '<%= entityClass %>'
        });
        
        // Check if this is the right form to restore to
        const isRecent = Date.now() - parsed.timestamp < 1800000; // 30 minutes
        const entityTypeMatch = parsed.entityType === '<%= entityClass %>';
        
        if (isRecent && entityTypeMatch) {
          console.log('Starting restoration process...');
          
          // Multiple restoration attempts with delays
          const attemptRestore = (attempt = 1) => {
            console.log(`Restoration attempt ${attempt}`);
            
            setTimeout(() => {
              try {
                form.reset(parsed.formData);
                setCurrentStep(parsed.currentStep);
                setConfirmSubmission(parsed.confirmSubmission);
                
                console.log('Form state restored successfully', {
                  step: parsed.currentStep,
                  formData: parsed.formData
                });
                
                // Verify restoration worked and clean up
                setTimeout(() => {
                  const currentFormData = form.getValues();
                  console.log('Verification - current form data:', currentFormData);
                  setIsRestoring(false);
                  
                  // Clean up storage after successful restoration
                  localStorage.removeItem('preservedFormState');
                  localStorage.removeItem('returnUrl');
                  localStorage.removeItem('relationshipFieldInfo');
                  console.log('Storage cleaned up after successful restoration');
                }, 100);
                
              } catch (error) {
                console.error(`Restoration attempt ${attempt} failed:`, error);
                if (attempt < 3) {
                  attemptRestore(attempt + 1);
                } else {
                  setIsRestoring(false);
                }
              }
            }, attempt * 100);
          };
          
          attemptRestore();
          
          // DON'T clean up storage immediately - let the destination form handle it
          // The destination form will clean up after successful restoration
        } else {
          console.log('Restoration rejected:', {
            reason: !isRecent ? 'expired' : 'wrong entity type',
            timeDiff: Date.now() - parsed.timestamp,
            entityType: parsed.entityType,
            expected: '<%= entityClass %>'
          });
          setIsRestoring(false);
        }
      } catch (error) {
        console.error('Error parsing preserved state:', error);
        setIsRestoring(false);
      }
    } else {
      console.log('No restoration needed:', {
        hasReturnUrl: !!returnUrl,
        hasPreserved: !!preserved,
        alreadyAttempted: restorationAttempted,
        isReturnDestination: currentUrl === returnUrl
      });
      setRestorationAttempted(true);
    }
  }, []); // Run once on mount

  // Handle newly created relationship entities (IMPROVED with localStorage)
  const handleEntityCreated = React.useCallback((entityId: number, relationshipName: string) => {
    console.log('Handling newly created entity:', { entityId, relationshipName });
    
    const currentValue = form.getValues(relationshipName as any);
    
    if (Array.isArray(currentValue)) {
      // Multiple relationship - add to array
      const newValue = [...currentValue, entityId];
      form.setValue(relationshipName as any, newValue);
      console.log('Updated multiple relationship:', newValue);
    } else {
      // Single relationship - set value
      form.setValue(relationshipName as any, entityId);
      console.log('Updated single relationship:', entityId);
    }
    
    // Trigger re-render to show updated selection
    form.trigger(relationshipName as any);
  }, [form]);

  // Check for newly created entity on component mount (IMPROVED with localStorage)
  React.useEffect(() => {
    const newEntityId = localStorage.getItem('newlyCreatedEntityId');
    const relationshipInfo = localStorage.getItem('relationshipFieldInfo');
    
    if (newEntityId && relationshipInfo && restorationAttempted) {
      try {
        const info = JSON.parse(relationshipInfo);
        console.log('Found newly created entity to auto-select:', { newEntityId, info });
        
        // Small delay to ensure form is ready after restoration
        setTimeout(() => {
          // Find the relationship field and update it
          // This is a simplified approach - in practice you'd need to identify the correct field
          console.log('Auto-selecting newly created entity:', newEntityId);
          
          // Clean up
          localStorage.removeItem('newlyCreatedEntityId');
        }, 500);
      } catch (error) {
        console.error('Error processing newly created entity:', error);
      }
    }
  }, [restorationAttempted]);

  // Form state persistence for relationship navigation (IMPROVED with localStorage)
  React.useEffect(() => {
    // Save form state when navigating to create related entity
    const handleSaveFormState = () => {
      const formData = form.getValues();
      const stateToSave = {
        formData,
        currentStep,
        confirmSubmission,
        entityType: '<%= entityClass %>',
        timestamp: Date.now()
      };
      
      console.log('Saving form state for navigation:', stateToSave);
      localStorage.setItem('preservedFormState', JSON.stringify(stateToSave));
    };

    // Add event listener
    window.addEventListener('saveFormState', handleSaveFormState);

    return () => {
      window.removeEventListener('saveFormState', handleSaveFormState);
    };
  }, [form, currentStep, confirmSubmission]);

  // Update form values when entity data is loaded (ONLY for edit mode, NOT when restoring)
  useEffect(() => {
    if (entity && !isRestoring && restorationAttempted) {
      console.log('Loading entity data for edit mode:', entity);
      const formValues = {
<%_ for (field of fields.filter(field => !field.id)) { 
    const fieldName = field.fieldName;
_%>
<% if (field.fieldTypeTimed || field.fieldTypeLocalDate) { %>
        <%= fieldName %>: entity.<%= fieldName %> ? new Date(entity.<%= fieldName %>) : undefined,
<% } else if (field.fieldTypeNumeric) { %>
        <%= fieldName %>: entity.<%= fieldName %> != null ? String(entity.<%= fieldName %>) : "",
<% } else { %>
        <%= fieldName %>: entity.<%= fieldName %> || "",
<% } %>
<%_ } _%>
<%_ for (const rel of persistableRelationships) { 
    const relationshipFieldName = rel.relationshipFieldName;
    const otherEntityPkName = rel.otherEntity.builtInUser ? 'id' : (rel.otherEntity.primaryKey?.name || 'id');
_%>
<% if (rel.collection) { %>
        <%= relationshipFieldName %>: entity.<%= relationshipFieldName %>?.map(item => item.<%= otherEntityPkName %>),
<% } else { %>
        <%= relationshipFieldName %>: entity.<%= relationshipFieldName %>?.<%= otherEntityPkName %>,
<% } %>
<%_ } _%>
      };
      form.reset(formValues);
      console.log('Entity data loaded successfully');
    }
  }, [entity, form, isRestoring, restorationAttempted]);

  // Prevent accidental form submission
  const handleFormKeyDown = (e: React.KeyboardEvent<HTMLFormElement>) => {
    // Prevent Enter key from submitting the form unless we're on the final step
    // and the user is explicitly focused on the submit button
    if (e.key === 'Enter' && currentStep !== STEPS.length - 1) {
      e.preventDefault();
      return;
    }
    
    // Even on the final step, only allow Enter if the target is the submit button
    if (e.key === 'Enter' && currentStep === STEPS.length - 1) {
      const target = e.target as HTMLElement;
      const isSubmitButton = target.getAttribute('type') === 'submit' || 
                           target.closest('button[type="submit"]');
      
      if (!isSubmitButton) {
        e.preventDefault();
        return;
      }
    }
  };

  // Form submission handler - only called when explicitly triggered
  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    // Double-check we're on the review step before allowing submission
    if (currentStep !== STEPS.length - 1) {
      console.warn('Form submission attempted from non-final step');
      return;
    }

    const entityToSave = {
      ...(!isNew && entity ? { id: entity.id } : {}),
<%_ for (field of fields.filter(field => !field.id)) { 
    const fieldName = field.fieldName;
_%>
<% if (field.fieldTypeNumeric) { %>
      <%= fieldName %>: data.<%= fieldName %> ? Number(data.<%= fieldName %>) : undefined,
<% } else { %>
      <%= fieldName %>: data.<%= fieldName %> === "__none__" ? undefined : data.<%= fieldName %>,
<% } %>
<%_ } _%>
<%_ for (const rel of persistableRelationships) { 
    const relationshipFieldName = rel.relationshipFieldName;
    const otherEntityPkName = rel.otherEntity.builtInUser ? 'id' : (rel.otherEntity.primaryKey?.name || 'id');
_%>
<% if (rel.collection) { %>
      <%= relationshipFieldName %>: data.<%= relationshipFieldName %>?.map(id => ({ <%= otherEntityPkName %>: id })),
<% } else { %>
      <%= relationshipFieldName %>: data.<%= relationshipFieldName %> ? { <%= otherEntityPkName %>: data.<%= relationshipFieldName %> } : null,
<% } %>
<%_ } _%>
      ...(entity && !isNew ? {
        ...Object.keys(entity).reduce((acc, key) => {
          const isFormField = [<%_ for (field of fields.filter(field => !field.id)) { _%>'<%= field.fieldName %>',<%_ } _%><%_ for (const rel of persistableRelationships) { _%>'<%= rel.relationshipFieldName %>',<%_ } _%>].includes(key);
          if (!isFormField && entity[key as keyof typeof entity] !== undefined) {
            acc[key] = entity[key as keyof typeof entity];
          }
          return acc;
        }, {} as any)
      } : {})
    } as <%= entityClass %>DTO;

    if (isNew) {
      createEntity({ data: entityToSave });
    } else if (id) {
      updateEntity({ id, data: entityToSave });
    }
  };

  // Validate current step
  const validateStep = async () => {
    const currentStepId = STEPS[currentStep].id;
    let fieldsToValidate: string[] = [];

    switch (currentStepId) {
      case 'basic':
        fieldsToValidate = [<%_ for (field of [...textFields, ...numberFields, ...enumFields]) { _%>'<%= field.fieldName %>',<%_ } _%>];
        break;
      case 'dates':
        fieldsToValidate = [<%_ for (field of dateFields) { _%>'<%= field.fieldName %>',<%_ } _%>];
        break;
      case 'settings':
        fieldsToValidate = [<%_ for (field of [...booleanFields, ...binaryFields]) { _%>'<%= field.fieldName %>',<%_ } _%>];
        break;
      case 'geographic':
        fieldsToValidate = [<%_ 
        if (relationshipGroups.geographic) {
          for (const rel of relationshipGroups.geographic) { _%>'<%= rel.relationshipFieldName %>',<%_ }
        } _%>];
        break;
      case 'users':
        fieldsToValidate = [<%_ 
        if (relationshipGroups.user) {
          for (const rel of relationshipGroups.user) { _%>'<%= rel.relationshipFieldName %>',<%_ }
        } _%>];
        break;
      case 'classification':
        fieldsToValidate = [<%_ 
        if (relationshipGroups.classification) {
          for (const rel of relationshipGroups.classification) { _%>'<%= rel.relationshipFieldName %>',<%_ }
        } _%>];
        break;
      case 'business':
        fieldsToValidate = [<%_ 
        if (relationshipGroups.business) {
          for (const rel of relationshipGroups.business) { _%>'<%= rel.relationshipFieldName %>',<%_ }
        } _%>];
        break;
      case 'other':
        fieldsToValidate = [<%_ 
        if (relationshipGroups.other) {
          for (const rel of relationshipGroups.other) { _%>'<%= rel.relationshipFieldName %>',<%_ }
        } _%>];
        break;
    }

    const result = await form.trigger(fieldsToValidate);
    return result;
  };

  const nextStep = async () => {
    const isValid = await validateStep();
    if (isValid && currentStep < STEPS.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
      // Reset confirmation when leaving review step
      if (currentStep === STEPS.length - 1) {
        setConfirmSubmission(false);
      }
    }
  };

  const progress = ((currentStep + 1) / STEPS.length) * 100;

  if (id && isLoadingEntity) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      {/* Header */}
      <div className="text-center space-y-2">
        <p className="text-muted-foreground">
          {isNew ? "Follow the steps below to create a new" : "Update the information for this"} <%= entityClassHumanized.toLowerCase() %>
        </p>
      </div>

      {/* Progress Bar */}
      <div className="space-y-4">
        <div className="flex justify-between text-sm font-medium">
          <span>Step {currentStep + 1} of {STEPS.length}</span>
          <span>{Math.round(progress)}% Complete</span>
        </div>
        <Progress value={progress} className="h-2" />
      </div>

      {/* Step Indicators */}
      <div className="flex justify-center">
        <div className="flex items-center space-x-4">
          {STEPS.map((step, index) => (
            <div key={step.id} className="flex items-center">
              <div className={cn(
                "flex items-center justify-center w-10 h-10 rounded-full border-2 transition-all",
                index < currentStep 
                  ? "bg-primary border-primary text-primary-foreground" 
                  : index === currentStep 
                  ? "border-primary text-primary bg-primary/10" 
                  : "border-muted-foreground/30 text-muted-foreground"
              )}>
                {index < currentStep ? (
                  <Check className="w-5 h-5" />
                ) : (
                  <span className="text-sm font-medium">{index + 1}</span>
                )}
              </div>
              {index < STEPS.length - 1 && (
                <ChevronRight className="w-4 h-4 text-muted-foreground mx-2" />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Current Step Info */}
      <div className="text-center space-y-1">
        <h2 className="text-xl font-semibold">{STEPS[currentStep].title}</h2>
        <p className="text-muted-foreground">{STEPS[currentStep].description}</p>
      </div>

      {/* Form Content */}
      <Form {...form}>
        <form 
          onSubmit={form.handleSubmit(onSubmit)} 
          onKeyDown={handleFormKeyDown}
          className="space-y-6"
        >
          <Card>
            <CardContent className="pt-6">
              {/* Step 1: Basic Information */}
              {STEPS[currentStep].id === 'basic' && (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <% for (field of [...textFields, ...numberFields, ...enumFields]) { 
                      const fieldName = field.fieldName;
                      const fieldLabel = camelToTitleCase(fieldName);
                      const fieldValidateRules = field.fieldValidateRules || [];
                      const isRequired = fieldValidateRules.includes('required');
                    %>
                    <FormField
                      control={form.control}
                      name="<%= fieldName %>"
                      render={({ field }) => (
                        <% if (field.fieldIsEnum) { %>
                        <FormItem>
                          <FormLabel className="text-sm font-medium"><%= fieldLabel %><% if (isRequired) { %> *<% } %></FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select <%= fieldLabel.toLowerCase() %>" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <% if (!isRequired) { %>
                              <SelectItem value="__none__">None</SelectItem>
                              <% } %>
                              <% for (const enumValue of field.enumValues || []) { %>
                              <SelectItem value="<%= enumValue.name || enumValue.value || 'EMPTY_VALUE' %>">
                                <%= enumValue.name || enumValue.value || 'Empty' %>
                              </SelectItem>
                              <% } %>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                        <% } else { %>
                        <FormItem>
                          <FormLabel className="text-sm font-medium"><%= fieldLabel %><% if (isRequired) { %> *<% } %></FormLabel>
                          <FormControl>
                            <Input 
                              {...field}
                              <% if (field.fieldTypeNumeric) { %>type="number"<% } %>
                              placeholder="Enter <%= fieldLabel.toLowerCase() %>"
                              className="transition-colors"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                        <% } %>
                      )}
                    />
                    <% } %>
                  </div>
                </div>
              )}

              {/* Step 2: Date & Time (if exists) */}
              <% if (dateFields.length > 0) { %>
              {STEPS[currentStep].id === 'dates' && (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <% for (field of dateFields) { 
                      const fieldName = field.fieldName;
                      const fieldLabel = camelToTitleCase(fieldName);
                      const fieldValidateRules = field.fieldValidateRules || [];
                      const isRequired = fieldValidateRules.includes('required');
                    %>
                    <FormField
                      control={form.control}
                      name="<%= fieldName %>"
                      render={({ field }) => (
                        <FormItem className="flex flex-col">
                          <FormLabel className="text-sm font-medium"><%= fieldLabel %><% if (isRequired) { %> *<% } %></FormLabel>
                          <Popover>
                            <PopoverTrigger asChild>
                              <FormControl>
                                <Button
                                  variant="outline"
                                  className={cn(
                                    "w-full pl-3 text-left font-normal",
                                    !field.value && "text-muted-foreground"
                                  )}
                                >
                                  {field.value ? format(field.value, "PPP") : <span>Select date</span>}
                                  <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                </Button>
                              </FormControl>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                              <Calendar
                                mode="single"
                                selected={field.value}
                                onSelect={field.onChange}
                                initialFocus
                              />
                            </PopoverContent>
                          </Popover>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <% } %>
                  </div>
                </div>
              )}
              <% } %>

              {/* Step 3: Settings & Files (if exists) */}
              <% if (booleanFields.length > 0 || binaryFields.length > 0) { %>
              {STEPS[currentStep].id === 'settings' && (
                <div className="space-y-6">
                  {/* Boolean Fields */}
                  <% if (booleanFields.length > 0) { %>
                  <div className="space-y-4">
                    <h4 className="font-medium">Settings</h4>
                    <% for (field of booleanFields) { 
                      const fieldName = field.fieldName;
                      const fieldLabel = camelToTitleCase(fieldName);
                    %>
                    <FormField
                      control={form.control}
                      name="<%= fieldName %>"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base font-medium"><%= fieldLabel %></FormLabel>
                          </div>
                          <FormControl>
                            <Checkbox checked={field.value} onCheckedChange={field.onChange} />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    <% } %>
                  </div>
                  <% } %>

                  {/* Binary Fields */}
                  <% if (binaryFields.length > 0) { %>
                  <div className="space-y-4">
                    <h4 className="font-medium">Files & Additional Information</h4>
                    <% for (field of binaryFields) { 
                      const fieldName = field.fieldName;
                      const fieldLabel = camelToTitleCase(fieldName);
                      const fieldValidateRules = field.fieldValidateRules || [];
                      const isRequired = fieldValidateRules.includes('required');
                    %>
                    <FormField
                      control={form.control}
                      name="<%= fieldName %>"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-medium"><%= fieldLabel %><% if (isRequired) { %> *<% } %></FormLabel>
                          <FormControl>
                            <% if (field.fieldTypeBinary && (field.blobContentTypeText || field.fieldType === 'TextBlob')) { %>
                            <Textarea
                              {...field}
                              placeholder="Enter <%= fieldLabel.toLowerCase() %>"
                              className="min-h-[100px]"
                            />
                            <% } else { %>
                            <Input
                              type="file"
                              <% if (field.blobContentTypeImage) { %>accept="image/*"<% } %>
                              onChange={(e) => {
                                const file = e.target.files?.[0];
                                if (file) {
                                  const reader = new FileReader();
                                  reader.onload = (event) => {
                                    if (event.target?.result) {
                                      const base64 = event.target.result.toString().split(',')[1];
                                      field.onChange(base64);
                                    }
                                  };
                                  reader.readAsDataURL(file);
                                }
                              }}
                            />
                            <% } %>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <% } %>
                  </div>
                  <% } %>
                </div>
              )}
              <% } %>

              {/* Geographic Information Step */}
              <%_ if (relationshipGroups.geographic && relationshipGroups.geographic.length > 0) { _%>
              {STEPS[currentStep].id === 'geographic' && (
                <div className="space-y-6">
                  <div className="text-center mb-6">
                    <h3 className="text-lg font-medium">Location Information</h3>
                    <p className="text-muted-foreground">Select location details in hierarchical order</p>
                  </div>
                  <div className="grid grid-cols-1 gap-6">
                    <%_ for (const rel of relationshipGroups.geographic) { 
                      const relationshipFieldName = rel.relationshipFieldName;
                      const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      const relationshipRequired = rel.relationshipRequired;
                      const otherEntity = rel.otherEntity;
                      const displayField = rel.otherEntityField;
                    _%>
                    <FormField
                      control={form.control}
                      name="<%= relationshipFieldName %>"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-medium">
                            <%= relationshipLabel %><% if (relationshipRequired) { %> *<% } %>
                          </FormLabel>
                          <FormControl>
                            <PaginatedRelationshipCombobox
                              value={field.value}
                              onValueChange={(value) => {
                                field.onChange(value);
                                setGeographicFilters(prev => ({ ...prev, <%= relationshipFieldName %>: value }));
                              }}
                              displayField="<%= displayField %>"
                              placeholder="Select <%= relationshipLabel.toLowerCase() %>"
                              multiple={<%= rel.collection %>}
                              useInfiniteQueryHook={useGetAll<%= otherEntity.entityClassPlural %>Infinite}
                              searchHook={useSearch<%= otherEntity.entityClassPlural %>Infinite}
                              entityName="<%= otherEntity.entityClassPlural %>"
                              searchField="<%= displayField %>"
                              canCreate={true}
                              createEntityPath="/<%= otherEntity.routePath %>/new"
                              createPermission="<%= otherEntity.entityInstance || otherEntity.entityName.toLowerCase() %>:create"
                              onEntityCreated={(entityId) => handleEntityCreated(entityId, '<%= relationshipFieldName %>')}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <%_ } _%>
                  </div>
                </div>
              )}
              <%_ } _%>

              {/* User Assignment Step */}
              <%_ if (relationshipGroups.user && relationshipGroups.user.length > 0) { _%>
              {STEPS[currentStep].id === 'users' && (
                <div className="space-y-6">
                  <div className="text-center mb-6">
                    <h3 className="text-lg font-medium">People & Assignment</h3>
                    <p className="text-muted-foreground">Assign users and responsibilities</p>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <%_ for (const rel of relationshipGroups.user) { 
                      const relationshipFieldName = rel.relationshipFieldName;
                      const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      const relationshipRequired = rel.relationshipRequired;
                      const otherEntity = rel.otherEntity;
                      const displayField = otherEntity.builtInUser ? 'login' : rel.otherEntityField;
                    _%>
                    <FormField
                      control={form.control}
                      name="<%= relationshipFieldName %>"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-medium">
                            <%= relationshipLabel %><% if (relationshipRequired) { %> *<% } %>
                          </FormLabel>
                          <FormControl>
                            <%_ if (otherEntity.builtInUser) { _%>
                            <PaginatedRelationshipCombobox
                              value={field.value}
                              onValueChange={field.onChange}
                              displayField="<%= displayField %>"
                              placeholder="Select <%= relationshipLabel.toLowerCase() %>"
                              multiple={<%= rel.collection %>}
                              useInfiniteQueryHook={useGetAllPublicUsersInfinite}
                              searchHook={useSearchPublicUsersInfinite}
                              entityName="PublicUsers"
                              searchField="<%= displayField %>"
                              canCreate={false}
                              createEntityPath=""
                              createPermission=""
                              onEntityCreated={(entityId) => handleEntityCreated(entityId, '<%= relationshipFieldName %>')}
                            />
                            <%_ } else { _%>
                            <PaginatedRelationshipCombobox
                              value={field.value}
                              onValueChange={field.onChange}
                              displayField="<%= displayField %>"
                              placeholder="Select <%= relationshipLabel.toLowerCase() %>"
                              multiple={<%= rel.collection %>}
                              useInfiniteQueryHook={useGetAll<%= otherEntity.entityClassPlural %>Infinite}
                              searchHook={useSearch<%= otherEntity.entityClassPlural %>Infinite}
                              entityName="<%= otherEntity.entityClassPlural %>"
                              searchField="<%= displayField %>"
                              canCreate={true}
                              createEntityPath="/<%= otherEntity.routePath %>/new"
                              createPermission="<%= otherEntity.entityInstance || otherEntity.entityName.toLowerCase() %>:create"
                              onEntityCreated={(entityId) => handleEntityCreated(entityId, '<%= relationshipFieldName %>')}
                            />
                            <%_ } _%>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <%_ } _%>
                  </div>
                </div>
              )}
              <%_ } _%>

              {/* Classification Step */}
              <%_ if (relationshipGroups.classification && relationshipGroups.classification.length > 0) { _%>
              {STEPS[currentStep].id === 'classification' && (
                <div className="space-y-6">
                  <div className="text-center mb-6">
                    <h3 className="text-lg font-medium">Classification</h3>
                    <p className="text-muted-foreground">Set priority, status, and categories</p>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <%_ for (const rel of relationshipGroups.classification) { 
                      const relationshipFieldName = rel.relationshipFieldName;
                      const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      const relationshipRequired = rel.relationshipRequired;
                      const otherEntity = rel.otherEntity;
                      const displayField = rel.otherEntityField;
                    _%>
                    <FormField
                      control={form.control}
                      name="<%= relationshipFieldName %>"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-medium">
                            <%= relationshipLabel %><% if (relationshipRequired) { %> *<% } %>
                          </FormLabel>
                          <FormControl>
                            <PaginatedRelationshipCombobox
                              value={field.value}
                              onValueChange={field.onChange}
                              displayField="<%= displayField %>"
                              placeholder="Select <%= relationshipLabel.toLowerCase() %>"
                              multiple={<%= rel.collection %>}
                              useInfiniteQueryHook={useGetAll<%= otherEntity.entityClassPlural %>Infinite}
                              searchHook={useSearch<%= otherEntity.entityClassPlural %>Infinite}
                              entityName="<%= otherEntity.entityClassPlural %>"
                              searchField="<%= displayField %>"
                              canCreate={true}
                              createEntityPath="/<%= otherEntity.routePath %>/new"
                              createPermission="<%= otherEntity.entityInstance || otherEntity.entityName.toLowerCase() %>:create"
                              onEntityCreated={(entityId) => handleEntityCreated(entityId, '<%= relationshipFieldName %>')}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <%_ } _%>
                  </div>
                </div>
              )}
              <%_ } _%>

              {/* Business Relations Step */}
              <%_ if (relationshipGroups.business && relationshipGroups.business.length > 0) { _%>
              {STEPS[currentStep].id === 'business' && (
                <div className="space-y-6">
                  <div className="text-center mb-6">
                    <h3 className="text-lg font-medium">Business Relations</h3>
                    <p className="text-muted-foreground">Connect with customers, products, and sources</p>
                  </div>
                  <div className="grid grid-cols-1 gap-6">
                    <%_ for (const rel of relationshipGroups.business) { 
                      const relationshipFieldName = rel.relationshipFieldName;
                      const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      const relationshipRequired = rel.relationshipRequired;
                      const otherEntity = rel.otherEntity;
                      const displayField = rel.otherEntityField;
                    _%>
                    <FormField
                      control={form.control}
                      name="<%= relationshipFieldName %>"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-medium">
                            <%= relationshipLabel %><% if (relationshipRequired) { %> *<% } %>
                          </FormLabel>
                          <FormControl>
                            <PaginatedRelationshipCombobox
                              value={field.value}
                              onValueChange={field.onChange}
                              displayField="<%= displayField %>"
                              placeholder="Select <%= relationshipLabel.toLowerCase() %>"
                              multiple={<%= rel.collection %>}
                              useInfiniteQueryHook={useGetAll<%= otherEntity.entityClassPlural %>Infinite}
                              searchHook={useSearch<%= otherEntity.entityClassPlural %>Infinite}
                              entityName="<%= otherEntity.entityClassPlural %>"
                              searchField="<%= displayField %>"
                              canCreate={true}
                              createEntityPath="/<%= otherEntity.routePath %>/new"
                              createPermission="<%= otherEntity.entityInstance || otherEntity.entityName.toLowerCase() %>:create"
                              onEntityCreated={(entityId) => handleEntityCreated(entityId, '<%= relationshipFieldName %>')}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <%_ } _%>
                  </div>
                </div>
              )}
              <%_ } _%>

              {/* Other Relations Step */}
              <%_ if (relationshipGroups.other && relationshipGroups.other.length > 0) { _%>
              {STEPS[currentStep].id === 'other' && (
                <div className="space-y-6">
                  <div className="text-center mb-6">
                    <h3 className="text-lg font-medium">Additional Relations</h3>
                    <p className="text-muted-foreground">Other connections and references</p>
                  </div>
                  <div className="grid grid-cols-1 gap-6">
                    <%_ for (const rel of relationshipGroups.other) { 
                      const relationshipFieldName = rel.relationshipFieldName;
                      const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      const relationshipRequired = rel.relationshipRequired;
                      const otherEntity = rel.otherEntity;
                      const displayField = rel.otherEntityField;
                    _%>
                    <FormField
                      control={form.control}
                      name="<%= relationshipFieldName %>"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-sm font-medium">
                            <%= relationshipLabel %><% if (relationshipRequired) { %> *<% } %>
                          </FormLabel>
                          <FormControl>
                            <PaginatedRelationshipCombobox
                              value={field.value}
                              onValueChange={field.onChange}
                              displayField="<%= displayField %>"
                              placeholder="Select <%= relationshipLabel.toLowerCase() %>"
                              multiple={<%= rel.collection %>}
                              useInfiniteQueryHook={useGetAll<%= otherEntity.entityClassPlural %>Infinite}
                              searchHook={useSearch<%= otherEntity.entityClassPlural %>Infinite}
                              entityName="<%= otherEntity.entityClassPlural %>"
                              searchField="<%= displayField %>"
                              canCreate={true}
                              createEntityPath="/<%= otherEntity.routePath %>/new"
                              createPermission="<%= otherEntity.entityInstance || otherEntity.entityName.toLowerCase() %>:create"
                              onEntityCreated={(entityId) => handleEntityCreated(entityId, '<%= relationshipFieldName %>')}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <%_ } _%>
                  </div>
                </div>
              )}
              <%_ } _%>

              {/* Enhanced Review Step */}
              {STEPS[currentStep].id === 'review' && (
                <div className="space-y-6">
                  <div className="text-center">
                    <h3 className="text-lg font-medium mb-2">Review Your Information</h3>
                    <p className="text-muted-foreground">Please review all the information before submitting</p>
                  </div>
                  
                  {/* Basic Fields */}
                  <%_ if (fields.filter(field => !field.id).length > 0) { _%>
                  <div className="space-y-4">
                    <h4 className="font-medium text-lg border-b pb-2">Basic Information</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <%_ for (field of fields.filter(field => !field.id)) { 
                        const fieldName = field.fieldName;
                        const fieldLabel = camelToTitleCase(fieldName);
                      _%>
                      <div className="space-y-1">
                        <dt className="text-sm font-medium text-muted-foreground"><%= fieldLabel %></dt>
                        <dd className="text-sm">
                          <%_ if (field.fieldTypeBoolean) { _%>
                          <Badge variant={form.watch('<%= fieldName %>') ? "default" : "secondary"}>
                            {form.watch('<%= fieldName %>') ? "Yes" : "No"}
                          </Badge>
                          <%_ } else if (field.fieldTypeTimed || field.fieldTypeLocalDate) { _%>
                          {form.watch('<%= fieldName %>') ? format(form.watch('<%= fieldName %>'), "PPP") : "—"}
                          <%_ } else if (field.fieldIsEnum) { _%>
                          <Badge variant="outline">{form.watch('<%= fieldName %>') || "—"}</Badge>
                          <%_ } else { _%>
                          {form.watch('<%= fieldName %>') || "—"}
                          <%_ } _%>
                        </dd>
                      </div>
                      <%_ } _%>
                    </div>
                  </div>
                  <%_ } _%>

                  {/* Geographic Relations */}
                  <%_ if (relationshipGroups.geographic && relationshipGroups.geographic.length > 0) { _%>
                  <div className="space-y-4">
                    <h4 className="font-medium text-lg border-b pb-2">📍 Location Details</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <%_ for (const rel of relationshipGroups.geographic) { 
                        const relationshipFieldName = rel.relationshipFieldName;
                        const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      _%>
                      <div className="space-y-1">
                        <dt className="text-sm font-medium text-muted-foreground"><%= relationshipLabel %></dt>
                        <dd className="text-sm">
                          <Badge variant="outline">
                            {form.watch('<%= relationshipFieldName %>') ? 'Selected' : 'Not selected'}
                          </Badge>
                        </dd>
                      </div>
                      <%_ } _%>
                    </div>
                  </div>
                  <%_ } _%>

                  {/* User Relations */}
                  <%_ if (relationshipGroups.user && relationshipGroups.user.length > 0) { _%>
                  <div className="space-y-4">
                    <h4 className="font-medium text-lg border-b pb-2">👥 People & Assignment</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <%_ for (const rel of relationshipGroups.user) { 
                        const relationshipFieldName = rel.relationshipFieldName;
                        const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      _%>
                      <div className="space-y-1">
                        <dt className="text-sm font-medium text-muted-foreground"><%= relationshipLabel %></dt>
                        <dd className="text-sm">
                          <Badge variant="outline">
                            <%_ if (rel.collection) { _%>
                            {Array.isArray(form.watch('<%= relationshipFieldName %>')) ? 
                              `${form.watch('<%= relationshipFieldName %>').length} selected` : 'None selected'}
                            <%_ } else { _%>
                            {form.watch('<%= relationshipFieldName %>') ? 'Assigned' : 'Not assigned'}
                            <%_ } _%>
                          </Badge>
                        </dd>
                      </div>
                      <%_ } _%>
                    </div>
                  </div>
                  <%_ } _%>

                  {/* Classification Relations */}
                  <%_ if (relationshipGroups.classification && relationshipGroups.classification.length > 0) { _%>
                  <div className="space-y-4">
                    <h4 className="font-medium text-lg border-b pb-2">🏷️ Classification</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <%_ for (const rel of relationshipGroups.classification) { 
                        const relationshipFieldName = rel.relationshipFieldName;
                        const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      _%>
                      <div className="space-y-1">
                        <dt className="text-sm font-medium text-muted-foreground"><%= relationshipLabel %></dt>
                        <dd className="text-sm">
                          <Badge variant="outline">
                            {form.watch('<%= relationshipFieldName %>') ? 'Selected' : 'Not selected'}
                          </Badge>
                        </dd>
                      </div>
                      <%_ } _%>
                    </div>
                  </div>
                  <%_ } _%>

                  {/* Business Relations */}
                  <%_ if (relationshipGroups.business && relationshipGroups.business.length > 0) { _%>
                  <div className="space-y-4">
                    <h4 className="font-medium text-lg border-b pb-2">🏢 Business Relations</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <%_ for (const rel of relationshipGroups.business) { 
                        const relationshipFieldName = rel.relationshipFieldName;
                        const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      _%>
                      <div className="space-y-1">
                        <dt className="text-sm font-medium text-muted-foreground"><%= relationshipLabel %></dt>
                        <dd className="text-sm">
                          <Badge variant="outline">
                            <%_ if (rel.collection) { _%>
                            {Array.isArray(form.watch('<%= relationshipFieldName %>')) ? 
                              `${form.watch('<%= relationshipFieldName %>').length} selected` : 'None selected'}
                            <%_ } else { _%>
                            {form.watch('<%= relationshipFieldName %>') ? 'Connected' : 'Not connected'}
                            <%_ } _%>
                          </Badge>
                        </dd>
                      </div>
                      <%_ } _%>
                    </div>
                  </div>
                  <%_ } _%>

                  {/* Other Relations */}
                  <%_ if (relationshipGroups.other && relationshipGroups.other.length > 0) { _%>
                  <div className="space-y-4">
                    <h4 className="font-medium text-lg border-b pb-2">🔗 Additional Relations</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <%_ for (const rel of relationshipGroups.other) { 
                        const relationshipFieldName = rel.relationshipFieldName;
                        const relationshipLabel = camelToTitleCase(rel.relationshipName);
                      _%>
                      <div className="space-y-1">
                        <dt className="text-sm font-medium text-muted-foreground"><%= relationshipLabel %></dt>
                        <dd className="text-sm">
                          <Badge variant="outline">
                            {form.watch('<%= relationshipFieldName %>') ? 'Selected' : 'Not selected'}
                          </Badge>
                        </dd>
                      </div>
                      <%_ } _%>
                    </div>
                  </div>
                  <%_ } _%>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Navigation Buttons */}
          <div className="flex justify-between">
            <Button
              type="button"
              variant="outline"
              onClick={currentStep === 0 ? () => router.push("/<%= entityRoute %>") : prevStep}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              {currentStep === 0 ? "Cancel" : "Previous"}
            </Button>

            {currentStep === STEPS.length - 1 ? (
              !confirmSubmission ? (
                <Button 
                  type="button"
                  onClick={() => setConfirmSubmission(true)}
                  className="flex items-center gap-2 bg-orange-600 hover:bg-orange-700"
                >
                  <Check className="h-4 w-4" />
                  Confirm {isNew ? "Create" : "Update"}
                </Button>
              ) : (
                <Button 
                  type="submit" 
                  disabled={isCreating || isUpdating}
                  className="flex items-center gap-2 bg-green-600 hover:bg-green-700"
                >
                  <Save className="h-4 w-4" />
                  {isCreating || isUpdating ? "Submitting..." : `${isNew ? "Create" : "Update"} <%= entityClassHumanized %>`}
                </Button>
              )
            ) : (
              <Button
                type="button"
                onClick={nextStep}
                className="flex items-center gap-2"
              >
                Next Step
                <ArrowRight className="h-4 w-4" />
              </Button>
            )}
          </div>
        </form>
      </Form>
    </div>
  );
}
