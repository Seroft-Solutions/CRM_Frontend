# Reusable Template for Next.js 15 with ShadCN UI and Orval-generated React Query Hooks

## Project Overview
This project aims to develop a reusable template for Next.js 15 applications that integrates ShadCN UI components with React Query hooks generated by Orval. The template will be designed to handle entities defined in JHipster metadata, providing a standardized approach for CRUD operations, data fetching, and UI presentation.

## Key Requirements

### Core Components
1. Entity Context Provider
   - Provide a context for sharing entity state across components
   - Handle loading states, error handling, and data fetching

2. Entity Layout
   - Provide a consistent layout for all entity pages
   - Include breadcrumbs, headers, and navigation elements

3. Entity Table Component
   - Display a list of entities with sorting, filtering, and pagination
   - Include action buttons for view, edit, and delete operations
   - Use Orval-generated hooks for data fetching (useGetAllEntities)

4. Entity Form Component
   - Handle both create and update operations
   - Use Orval-generated hooks (useCreateEntity, useUpdateEntity)
   - Validate form input using Zod schemas
   - Support all field types defined in JHipster (string, number, date, boolean, enum)

5. Entity Page Component
   - Container for the entity table
   - Handle URL parameters and query string for filtering and pagination

6. Entity Detail Component
   - Display detailed information about a single entity
   - Use Orval-generated hooks for data fetching (useGetEntity)

7. Relationship Field Component
   - Handle entity relationships (many-to-one, one-to-many, etc.)
   - Use Orval-generated hooks for fetching related entities

### Technical Requirements
1. Next.js 15 App Router Integration
   - Create appropriate folder structure for app router
   - Implement routing for entity pages, forms, and detail views

2. React Query Integration
   - Use React Query's latest features for optimistic updates and cache management
   - Implement proper query invalidation for related entities

3. ShadCN UI Components
   - Use ShadCN UI components for all UI elements
   - Ensure consistent styling and user experience

4. Type Safety
   - Provide proper TypeScript type definitions for all components
   - Ensure type safety for Orval-generated hooks and DTOs

5. Error Handling
   - Implement comprehensive error handling for API calls
   - Display error messages to the user

6. Loading States
   - Implement proper loading states for all data fetching operations
   - Provide skeleton loaders for initial data loading

### Entity Metadata
1. Generate entity-specific configuration from JHipster metadata
2. Support for all field types and relationships
3. Generate validation schemas based on JHipster metadata

## Implementation Plan
1. Create a set of reusable template files in the templates directory
2. Implement a utility to generate entity-specific components from the templates
3. Create a sample implementation for a selected entity
4. Document the usage and customization options

## Deliverables
1. Template files for all entity components
2. Implementation for selected entities
3. Documentation on how to use and customize the templates
