/**
 * Usage Examples for Multi-Service API Architecture
 * 
 * This file demonstrates how to use the new service-based API clients
 * in your React components and pages.
 */

// ============================================================================
// DIRECT SERVICE USAGE (without React Query)
// ============================================================================

import { springService, keycloakService } from '@/core/api';

// Example 1: Direct Spring service calls
export async function directSpringExample() {
  try {
    // Get all calls with pagination
    const calls = await springService.get('/calls?page=0&size=20');
    console.log('Calls:', calls);

    // Create a new party
    const newParty = await springService.post('/parties', {
      name: 'John Doe',
      email: 'john@example.com',
      mobile: '1234567890',
    });
    console.log('Created party:', newParty);

    // Custom health check
    const health = await springService.healthCheck();
    console.log('Health status:', health);
  } catch (error) {
    console.error('Spring service error:', error);
  }
}

// Example 2: Direct Keycloak service calls
export async function directKeycloakExample() {
  try {
    // Get all users
    const users = await keycloakService.get('/admin/realms/crm/users');
    console.log('Users:', users);

    // Search users
    const searchResults = await keycloakService.searchUsers('john', {
      first: 0,
      max: 10,
    });
    console.log('Search results:', searchResults);

    // Get realm info
    const realmInfo = await keycloakService.getRealmInfo();
    console.log('Realm info:', realmInfo);
  } catch (error) {
    console.error('Keycloak service error:', error);
  }
}

// ============================================================================
// REACT QUERY USAGE (Generated by Orval)
// ============================================================================

import React from 'react';
// These imports will be available after running Orval generation
// import { useGetAllCalls, useCreateParty } from '@/core/api/generated/spring/endpoints/call-resource';
// import { useGetUsers, useCreateUser } from '@/core/api/generated/keycloak/endpoints/users';

export function SpringServiceExample() {
  // After Orval generation, you can use these hooks:
  
  // const { data: calls, isLoading, error } = useGetAllCalls({
  //   page: 0,  
  //   size: 20,
  // });

  // const createPartyMutation = useCreateParty();

  return (
    <div>
      <h2>Spring Service Example</h2>
      {/* Your component content here */}
      <p>Generated React Query hooks will be available after running Orval</p>
    </div>
  );
}

export function KeycloakServiceExample() {
  // After Orval generation, you can use these hooks:
  
  // const { data: users, isLoading, error } = useGetUsers({
  //   realm: 'crm',
  // });

  // const createUserMutation = useCreateUser();

  return (
    <div>
      <h2>Keycloak Service Example</h2>
      {/* Your component content here */}
      <p>Generated React Query hooks will be available after running Orval</p>
    </div>
  );
}

// ============================================================================
// MIXED USAGE EXAMPLE
// ============================================================================

export function MixedServicesExample() {
  const [userData, setUserData] = React.useState(null);
  const [callData, setCallData] = React.useState(null);

  const loadUserAndCallData = async (userId: string) => {
    try {
      // Get user from Keycloak
      const user = await keycloakService.get(`/admin/realms/crm/users/${userId}`);
      setUserData(user);

      // Get user's calls from Spring backend
      const calls = await springService.get(`/calls?assignedToId.equals=${userId}`);
      setCallData(calls);
    } catch (error) {
      console.error('Error loading mixed data:', error);
    }
  };

  return (
    <div>
      <h2>Mixed Services Example</h2>
      <button onClick={() => loadUserAndCallData('some-user-id')}>
        Load User & Call Data
      </button>
      {/* Display data */}
    </div>
  );
}

// ============================================================================
// ENVIRONMENT CONFIGURATION
// ============================================================================

/*
Add these to your .env.local file:

# Spring Backend
NEXT_PUBLIC_SPRING_API_URL=http://localhost:8080/api

# Keycloak  
NEXT_PUBLIC_KEYCLOAK_URL=http://localhost:8080/auth
NEXT_PUBLIC_KEYCLOAK_REALM=crm

# Authentication
NEXT_PUBLIC_AUTH_TOKEN_KEY=auth_token
NEXT_PUBLIC_AUTH_REFRESH_TOKEN_KEY=refresh_token
*/
