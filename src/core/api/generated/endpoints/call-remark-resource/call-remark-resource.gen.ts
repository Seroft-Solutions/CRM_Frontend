/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CallRemarkDTO,
  CountCallRemarksParams,
  GetAllCallRemarksParams,
  SearchCallRemarksParams,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getCallRemark = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallRemarkDTO>(
    { url: `/api/call-remarks/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetCallRemarkQueryKey = (id: number) => {
  return [`/api/call-remarks/${id}`] as const;
};

export const getGetCallRemarkInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallRemark>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallRemarkQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallRemark>>> = ({ signal }) =>
    getCallRemark(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCallRemarkInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCallRemark>>
>;
export type GetCallRemarkInfiniteQueryError = unknown;

export function useGetCallRemarkInfinite<
  TData = Awaited<ReturnType<typeof getCallRemark>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallRemarkInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCallRemarkQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallRemark>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallRemarkQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallRemark>>> = ({ signal }) =>
    getCallRemark(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCallRemark>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCallRemarkQueryResult = NonNullable<Awaited<ReturnType<typeof getCallRemark>>>;
export type GetCallRemarkQueryError = unknown;

export function useGetCallRemark<
  TData = Awaited<ReturnType<typeof getCallRemark>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallRemarkQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCallRemark = (
  id: number,
  callRemarkDTO: CallRemarkDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallRemarkDTO>(
    {
      url: `/api/call-remarks/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: callRemarkDTO,
    },
    options
  );
};

export const getUpdateCallRemarkMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallRemark>>,
    TError,
    { id: number; data: CallRemarkDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCallRemark>>,
  TError,
  { id: number; data: CallRemarkDTO },
  TContext
> => {
  const mutationKey = ['updateCallRemark'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCallRemark>>,
    { id: number; data: CallRemarkDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateCallRemark(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCallRemarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCallRemark>>
>;
export type UpdateCallRemarkMutationBody = CallRemarkDTO;
export type UpdateCallRemarkMutationError = unknown;

export const useUpdateCallRemark = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallRemark>>,
    TError,
    { id: number; data: CallRemarkDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCallRemark>>,
  TError,
  { id: number; data: CallRemarkDTO },
  TContext
> => {
  const mutationOptions = getUpdateCallRemarkMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCallRemark = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/call-remarks/${id}`, method: 'DELETE' }, options);
};

export const getDeleteCallRemarkMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallRemark>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCallRemark>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteCallRemark'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCallRemark>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteCallRemark(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCallRemarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCallRemark>>
>;

export type DeleteCallRemarkMutationError = unknown;

export const useDeleteCallRemark = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallRemark>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCallRemark>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCallRemarkMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateCallRemark = (
  id: number,
  callRemarkDTO: CallRemarkDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallRemarkDTO>(
    {
      url: `/api/call-remarks/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: callRemarkDTO,
    },
    options
  );
};

export const getPartialUpdateCallRemarkMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallRemark>>,
    TError,
    { id: number; data: CallRemarkDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateCallRemark>>,
  TError,
  { id: number; data: CallRemarkDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateCallRemark'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateCallRemark>>,
    { id: number; data: CallRemarkDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateCallRemark(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateCallRemarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateCallRemark>>
>;
export type PartialUpdateCallRemarkMutationBody = CallRemarkDTO;
export type PartialUpdateCallRemarkMutationError = unknown;

export const usePartialUpdateCallRemark = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallRemark>>,
    TError,
    { id: number; data: CallRemarkDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateCallRemark>>,
  TError,
  { id: number; data: CallRemarkDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateCallRemarkMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllCallRemarks = (
  params?: GetAllCallRemarksParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallRemarkDTO[]>(
    { url: `/api/call-remarks`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllCallRemarksQueryKey = (params?: GetAllCallRemarksParams) => {
  return [`/api/call-remarks`, ...(params ? [params] : [])] as const;
};

export const getGetAllCallRemarksInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallRemarks>>,
  TError = unknown,
>(
  params?: GetAllCallRemarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallRemarksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallRemarks>>> = ({
    signal,
    pageParam,
  }) =>
    getAllCallRemarks({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllCallRemarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallRemarksInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCallRemarks>>
>;
export type GetAllCallRemarksInfiniteQueryError = unknown;

export function useGetAllCallRemarksInfinite<
  TData = Awaited<ReturnType<typeof getAllCallRemarks>>,
  TError = unknown,
>(
  params?: GetAllCallRemarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallRemarksInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllCallRemarksQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallRemarks>>,
  TError = unknown,
>(
  params?: GetAllCallRemarksParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallRemarksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallRemarks>>> = ({ signal }) =>
    getAllCallRemarks(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCallRemarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallRemarksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCallRemarks>>
>;
export type GetAllCallRemarksQueryError = unknown;

export function useGetAllCallRemarks<
  TData = Awaited<ReturnType<typeof getAllCallRemarks>>,
  TError = unknown,
>(
  params?: GetAllCallRemarksParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallRemarksQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createCallRemark = (
  callRemarkDTO: CallRemarkDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallRemarkDTO>(
    {
      url: `/api/call-remarks`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: callRemarkDTO,
      signal,
    },
    options
  );
};

export const getCreateCallRemarkMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallRemark>>,
    TError,
    { data: CallRemarkDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCallRemark>>,
  TError,
  { data: CallRemarkDTO },
  TContext
> => {
  const mutationKey = ['createCallRemark'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCallRemark>>,
    { data: CallRemarkDTO }
  > = props => {
    const { data } = props ?? {};

    return createCallRemark(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCallRemarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCallRemark>>
>;
export type CreateCallRemarkMutationBody = CallRemarkDTO;
export type CreateCallRemarkMutationError = unknown;

export const useCreateCallRemark = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallRemark>>,
    TError,
    { data: CallRemarkDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createCallRemark>>,
  TError,
  { data: CallRemarkDTO },
  TContext
> => {
  const mutationOptions = getCreateCallRemarkMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countCallRemarks = (
  params?: CountCallRemarksParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>(
    { url: `/api/call-remarks/count`, method: 'GET', params, signal },
    options
  );
};

export const getCountCallRemarksQueryKey = (params?: CountCallRemarksParams) => {
  return [`/api/call-remarks/count`, ...(params ? [params] : [])] as const;
};

export const getCountCallRemarksInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallRemarks>>,
  TError = unknown,
>(
  params?: CountCallRemarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallRemarksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallRemarks>>> = ({
    signal,
    pageParam,
  }) =>
    countCallRemarks({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countCallRemarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallRemarksInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof countCallRemarks>>
>;
export type CountCallRemarksInfiniteQueryError = unknown;

export function useCountCallRemarksInfinite<
  TData = Awaited<ReturnType<typeof countCallRemarks>>,
  TError = unknown,
>(
  params?: CountCallRemarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallRemarksInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountCallRemarksQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallRemarks>>,
  TError = unknown,
>(
  params?: CountCallRemarksParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallRemarksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallRemarks>>> = ({ signal }) =>
    countCallRemarks(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countCallRemarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallRemarksQueryResult = NonNullable<Awaited<ReturnType<typeof countCallRemarks>>>;
export type CountCallRemarksQueryError = unknown;

export function useCountCallRemarks<
  TData = Awaited<ReturnType<typeof countCallRemarks>>,
  TError = unknown,
>(
  params?: CountCallRemarksParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallRemarksQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchCallRemarks = (
  params: SearchCallRemarksParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallRemarkDTO[]>(
    { url: `/api/call-remarks/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchCallRemarksQueryKey = (params: SearchCallRemarksParams) => {
  return [`/api/call-remarks/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchCallRemarksInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallRemarks>>,
  TError = unknown,
>(
  params: SearchCallRemarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallRemarksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallRemarks>>> = ({
    signal,
    pageParam,
  }) =>
    searchCallRemarks({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchCallRemarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallRemarksInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCallRemarks>>
>;
export type SearchCallRemarksInfiniteQueryError = unknown;

export function useSearchCallRemarksInfinite<
  TData = Awaited<ReturnType<typeof searchCallRemarks>>,
  TError = unknown,
>(
  params: SearchCallRemarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallRemarksInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchCallRemarksQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallRemarks>>,
  TError = unknown,
>(
  params: SearchCallRemarksParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallRemarksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallRemarks>>> = ({ signal }) =>
    searchCallRemarks(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchCallRemarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallRemarksQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCallRemarks>>
>;
export type SearchCallRemarksQueryError = unknown;

export function useSearchCallRemarks<
  TData = Awaited<ReturnType<typeof searchCallRemarks>>,
  TError = unknown,
>(
  params: SearchCallRemarksParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallRemarksQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
