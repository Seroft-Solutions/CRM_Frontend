/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CountSubCallTypesParams,
  GetAllSubCallTypesParams,
  SearchSubCallTypesParams,
  SubCallTypeDTO,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSubCallType = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SubCallTypeDTO>(
    { url: `/api/sub-call-types/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetSubCallTypeQueryKey = (id: number) => {
  return [`/api/sub-call-types/${id}`] as const;
};

export const getGetSubCallTypeInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubCallType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubCallTypeQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubCallType>>> = ({ signal }) =>
    getSubCallType(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubCallType>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetSubCallTypeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubCallType>>
>;
export type GetSubCallTypeInfiniteQueryError = unknown;

export function useGetSubCallTypeInfinite<
  TData = Awaited<ReturnType<typeof getSubCallType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSubCallTypeInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetSubCallTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubCallType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSubCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubCallTypeQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubCallType>>> = ({ signal }) =>
    getSubCallType(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSubCallType>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSubCallTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getSubCallType>>>;
export type GetSubCallTypeQueryError = unknown;

export function useGetSubCallType<
  TData = Awaited<ReturnType<typeof getSubCallType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSubCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSubCallTypeQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateSubCallType = (
  id: number,
  subCallTypeDTO: SubCallTypeDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<SubCallTypeDTO>(
    {
      url: `/api/sub-call-types/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: subCallTypeDTO,
    },
    options
  );
};

export const getUpdateSubCallTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSubCallType>>,
    TError,
    { id: number; data: SubCallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSubCallType>>,
  TError,
  { id: number; data: SubCallTypeDTO },
  TContext
> => {
  const mutationKey = ['updateSubCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSubCallType>>,
    { id: number; data: SubCallTypeDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateSubCallType(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateSubCallTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSubCallType>>
>;
export type UpdateSubCallTypeMutationBody = SubCallTypeDTO;
export type UpdateSubCallTypeMutationError = unknown;

export const useUpdateSubCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSubCallType>>,
    TError,
    { id: number; data: SubCallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSubCallType>>,
  TError,
  { id: number; data: SubCallTypeDTO },
  TContext
> => {
  const mutationOptions = getUpdateSubCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteSubCallType = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/sub-call-types/${id}`, method: 'DELETE' }, options);
};

export const getDeleteSubCallTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSubCallType>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSubCallType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteSubCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSubCallType>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteSubCallType(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSubCallTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSubCallType>>
>;

export type DeleteSubCallTypeMutationError = unknown;

export const useDeleteSubCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSubCallType>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteSubCallType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteSubCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateSubCallType = (
  id: number,
  subCallTypeDTO: SubCallTypeDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<SubCallTypeDTO>(
    {
      url: `/api/sub-call-types/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: subCallTypeDTO,
    },
    options
  );
};

export const getPartialUpdateSubCallTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateSubCallType>>,
    TError,
    { id: number; data: SubCallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateSubCallType>>,
  TError,
  { id: number; data: SubCallTypeDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateSubCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateSubCallType>>,
    { id: number; data: SubCallTypeDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateSubCallType(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateSubCallTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateSubCallType>>
>;
export type PartialUpdateSubCallTypeMutationBody = SubCallTypeDTO;
export type PartialUpdateSubCallTypeMutationError = unknown;

export const usePartialUpdateSubCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateSubCallType>>,
    TError,
    { id: number; data: SubCallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateSubCallType>>,
  TError,
  { id: number; data: SubCallTypeDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateSubCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllSubCallTypes = (
  params?: GetAllSubCallTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SubCallTypeDTO[]>(
    { url: `/api/sub-call-types`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllSubCallTypesQueryKey = (params?: GetAllSubCallTypesParams) => {
  return [`/api/sub-call-types`, ...(params ? [params] : [])] as const;
};

export const getGetAllSubCallTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSubCallTypes>>,
  TError = unknown,
>(
  params?: GetAllSubCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllSubCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSubCallTypes>>> = ({
    signal,
    pageParam,
  }) =>
    getAllSubCallTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllSubCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllSubCallTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllSubCallTypes>>
>;
export type GetAllSubCallTypesInfiniteQueryError = unknown;

export function useGetAllSubCallTypesInfinite<
  TData = Awaited<ReturnType<typeof getAllSubCallTypes>>,
  TError = unknown,
>(
  params?: GetAllSubCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllSubCallTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllSubCallTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSubCallTypes>>,
  TError = unknown,
>(
  params?: GetAllSubCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllSubCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSubCallTypes>>> = ({ signal }) =>
    getAllSubCallTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllSubCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllSubCallTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllSubCallTypes>>
>;
export type GetAllSubCallTypesQueryError = unknown;

export function useGetAllSubCallTypes<
  TData = Awaited<ReturnType<typeof getAllSubCallTypes>>,
  TError = unknown,
>(
  params?: GetAllSubCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllSubCallTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createSubCallType = (
  subCallTypeDTO: SubCallTypeDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SubCallTypeDTO>(
    {
      url: `/api/sub-call-types`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: subCallTypeDTO,
      signal,
    },
    options
  );
};

export const getCreateSubCallTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSubCallType>>,
    TError,
    { data: SubCallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSubCallType>>,
  TError,
  { data: SubCallTypeDTO },
  TContext
> => {
  const mutationKey = ['createSubCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSubCallType>>,
    { data: SubCallTypeDTO }
  > = props => {
    const { data } = props ?? {};

    return createSubCallType(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSubCallTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSubCallType>>
>;
export type CreateSubCallTypeMutationBody = SubCallTypeDTO;
export type CreateSubCallTypeMutationError = unknown;

export const useCreateSubCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSubCallType>>,
    TError,
    { data: SubCallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createSubCallType>>,
  TError,
  { data: SubCallTypeDTO },
  TContext
> => {
  const mutationOptions = getCreateSubCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countSubCallTypes = (
  params?: CountSubCallTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>(
    { url: `/api/sub-call-types/count`, method: 'GET', params, signal },
    options
  );
};

export const getCountSubCallTypesQueryKey = (params?: CountSubCallTypesParams) => {
  return [`/api/sub-call-types/count`, ...(params ? [params] : [])] as const;
};

export const getCountSubCallTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countSubCallTypes>>,
  TError = unknown,
>(
  params?: CountSubCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountSubCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countSubCallTypes>>> = ({
    signal,
    pageParam,
  }) =>
    countSubCallTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countSubCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountSubCallTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof countSubCallTypes>>
>;
export type CountSubCallTypesInfiniteQueryError = unknown;

export function useCountSubCallTypesInfinite<
  TData = Awaited<ReturnType<typeof countSubCallTypes>>,
  TError = unknown,
>(
  params?: CountSubCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountSubCallTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountSubCallTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof countSubCallTypes>>,
  TError = unknown,
>(
  params?: CountSubCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountSubCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countSubCallTypes>>> = ({ signal }) =>
    countSubCallTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countSubCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountSubCallTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof countSubCallTypes>>
>;
export type CountSubCallTypesQueryError = unknown;

export function useCountSubCallTypes<
  TData = Awaited<ReturnType<typeof countSubCallTypes>>,
  TError = unknown,
>(
  params?: CountSubCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountSubCallTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchSubCallTypes = (
  params: SearchSubCallTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SubCallTypeDTO[]>(
    { url: `/api/sub-call-types/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchSubCallTypesQueryKey = (params: SearchSubCallTypesParams) => {
  return [`/api/sub-call-types/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchSubCallTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchSubCallTypes>>,
  TError = unknown,
>(
  params: SearchSubCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchSubCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchSubCallTypes>>> = ({
    signal,
    pageParam,
  }) =>
    searchSubCallTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchSubCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchSubCallTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchSubCallTypes>>
>;
export type SearchSubCallTypesInfiniteQueryError = unknown;

export function useSearchSubCallTypesInfinite<
  TData = Awaited<ReturnType<typeof searchSubCallTypes>>,
  TError = unknown,
>(
  params: SearchSubCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchSubCallTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchSubCallTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchSubCallTypes>>,
  TError = unknown,
>(
  params: SearchSubCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchSubCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchSubCallTypes>>> = ({ signal }) =>
    searchSubCallTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchSubCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchSubCallTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchSubCallTypes>>
>;
export type SearchSubCallTypesQueryError = unknown;

export function useSearchSubCallTypes<
  TData = Awaited<ReturnType<typeof searchSubCallTypes>>,
  TError = unknown,
>(
  params: SearchSubCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchSubCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchSubCallTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
