/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CountSourcesParams,
  GetAllSourcesParams,
  SearchSourcesParams,
  SourceDTO,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSource = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SourceDTO>({ url: `/api/sources/${id}`, method: 'GET', signal }, options);
};

export const getGetSourceQueryKey = (id: number) => {
  return [`/api/sources/${id}`] as const;
};

export const getGetSourceInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getSource>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSource>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSourceQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSource>>> = ({ signal }) =>
    getSource(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSource>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetSourceInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSource>>>;
export type GetSourceInfiniteQueryError = unknown;

export function useGetSourceInfinite<
  TData = Awaited<ReturnType<typeof getSource>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSource>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSourceInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetSourceQueryOptions = <
  TData = Awaited<ReturnType<typeof getSource>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSource>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSourceQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSource>>> = ({ signal }) =>
    getSource(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSource>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSourceQueryResult = NonNullable<Awaited<ReturnType<typeof getSource>>>;
export type GetSourceQueryError = unknown;

export function useGetSource<TData = Awaited<ReturnType<typeof getSource>>, TError = unknown>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSource>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSourceQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateSource = (
  id: number,
  sourceDTO: SourceDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<SourceDTO>(
    {
      url: `/api/sources/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDTO,
    },
    options
  );
};

export const getUpdateSourceMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSource>>,
    TError,
    { id: number; data: SourceDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSource>>,
  TError,
  { id: number; data: SourceDTO },
  TContext
> => {
  const mutationKey = ['updateSource'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSource>>,
    { id: number; data: SourceDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateSource(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateSourceMutationResult = NonNullable<Awaited<ReturnType<typeof updateSource>>>;
export type UpdateSourceMutationBody = SourceDTO;
export type UpdateSourceMutationError = unknown;

export const useUpdateSource = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSource>>,
    TError,
    { id: number; data: SourceDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSource>>,
  TError,
  { id: number; data: SourceDTO },
  TContext
> => {
  const mutationOptions = getUpdateSourceMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteSource = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/sources/${id}`, method: 'DELETE' }, options);
};

export const getDeleteSourceMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSource>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSource>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteSource'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSource>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteSource(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSourceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSource>>>;

export type DeleteSourceMutationError = unknown;

export const useDeleteSource = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSource>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteSource>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteSourceMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateSource = (
  id: number,
  sourceDTO: SourceDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<SourceDTO>(
    {
      url: `/api/sources/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDTO,
    },
    options
  );
};

export const getPartialUpdateSourceMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateSource>>,
    TError,
    { id: number; data: SourceDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateSource>>,
  TError,
  { id: number; data: SourceDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateSource'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateSource>>,
    { id: number; data: SourceDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateSource(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateSourceMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateSource>>
>;
export type PartialUpdateSourceMutationBody = SourceDTO;
export type PartialUpdateSourceMutationError = unknown;

export const usePartialUpdateSource = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateSource>>,
    TError,
    { id: number; data: SourceDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateSource>>,
  TError,
  { id: number; data: SourceDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateSourceMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllSources = (
  params?: GetAllSourcesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SourceDTO[]>({ url: `/api/sources`, method: 'GET', params, signal }, options);
};

export const getGetAllSourcesQueryKey = (params?: GetAllSourcesParams) => {
  return [`/api/sources`, ...(params ? [params] : [])] as const;
};

export const getGetAllSourcesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSources>>,
  TError = unknown,
>(
  params?: GetAllSourcesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllSourcesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSources>>> = ({
    signal,
    pageParam,
  }) => getAllSources({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllSources>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllSourcesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllSources>>
>;
export type GetAllSourcesInfiniteQueryError = unknown;

export function useGetAllSourcesInfinite<
  TData = Awaited<ReturnType<typeof getAllSources>>,
  TError = unknown,
>(
  params?: GetAllSourcesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllSourcesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllSourcesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSources>>,
  TError = unknown,
>(
  params?: GetAllSourcesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllSourcesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSources>>> = ({ signal }) =>
    getAllSources(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllSources>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllSourcesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllSources>>>;
export type GetAllSourcesQueryError = unknown;

export function useGetAllSources<
  TData = Awaited<ReturnType<typeof getAllSources>>,
  TError = unknown,
>(
  params?: GetAllSourcesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllSourcesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createSource = (
  sourceDTO: SourceDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SourceDTO>(
    {
      url: `/api/sources`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDTO,
      signal,
    },
    options
  );
};

export const getCreateSourceMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSource>>,
    TError,
    { data: SourceDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSource>>,
  TError,
  { data: SourceDTO },
  TContext
> => {
  const mutationKey = ['createSource'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSource>>,
    { data: SourceDTO }
  > = props => {
    const { data } = props ?? {};

    return createSource(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSourceMutationResult = NonNullable<Awaited<ReturnType<typeof createSource>>>;
export type CreateSourceMutationBody = SourceDTO;
export type CreateSourceMutationError = unknown;

export const useCreateSource = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSource>>,
    TError,
    { data: SourceDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createSource>>,
  TError,
  { data: SourceDTO },
  TContext
> => {
  const mutationOptions = getCreateSourceMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countSources = (
  params?: CountSourcesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>({ url: `/api/sources/count`, method: 'GET', params, signal }, options);
};

export const getCountSourcesQueryKey = (params?: CountSourcesParams) => {
  return [`/api/sources/count`, ...(params ? [params] : [])] as const;
};

export const getCountSourcesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countSources>>,
  TError = unknown,
>(
  params?: CountSourcesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountSourcesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countSources>>> = ({
    signal,
    pageParam,
  }) => countSources({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countSources>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountSourcesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof countSources>>>;
export type CountSourcesInfiniteQueryError = unknown;

export function useCountSourcesInfinite<
  TData = Awaited<ReturnType<typeof countSources>>,
  TError = unknown,
>(
  params?: CountSourcesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountSourcesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountSourcesQueryOptions = <
  TData = Awaited<ReturnType<typeof countSources>>,
  TError = unknown,
>(
  params?: CountSourcesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountSourcesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countSources>>> = ({ signal }) =>
    countSources(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countSources>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountSourcesQueryResult = NonNullable<Awaited<ReturnType<typeof countSources>>>;
export type CountSourcesQueryError = unknown;

export function useCountSources<TData = Awaited<ReturnType<typeof countSources>>, TError = unknown>(
  params?: CountSourcesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountSourcesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchSources = (
  params: SearchSourcesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<SourceDTO[]>(
    { url: `/api/sources/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchSourcesQueryKey = (params: SearchSourcesParams) => {
  return [`/api/sources/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchSourcesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchSources>>,
  TError = unknown,
>(
  params: SearchSourcesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchSourcesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchSources>>> = ({
    signal,
    pageParam,
  }) => searchSources({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchSources>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchSourcesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchSources>>
>;
export type SearchSourcesInfiniteQueryError = unknown;

export function useSearchSourcesInfinite<
  TData = Awaited<ReturnType<typeof searchSources>>,
  TError = unknown,
>(
  params: SearchSourcesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchSourcesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchSourcesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchSources>>,
  TError = unknown,
>(
  params: SearchSourcesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchSourcesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchSources>>> = ({ signal }) =>
    searchSources(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchSources>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchSourcesQueryResult = NonNullable<Awaited<ReturnType<typeof searchSources>>>;
export type SearchSourcesQueryError = unknown;

export function useSearchSources<
  TData = Awaited<ReturnType<typeof searchSources>>,
  TError = unknown,
>(
  params: SearchSourcesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchSources>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchSourcesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
