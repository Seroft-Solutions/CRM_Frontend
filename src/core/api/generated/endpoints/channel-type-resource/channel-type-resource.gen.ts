/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ChannelTypeDTO,
  CountChannelTypesParams,
  GetAllChannelTypesParams,
  SearchChannelTypesParams,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getChannelType = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<ChannelTypeDTO>(
    { url: `/api/channel-types/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetChannelTypeQueryKey = (id: number) => {
  return [`/api/channel-types/${id}`] as const;
};

export const getGetChannelTypeInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getChannelType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelTypeQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelType>>> = ({ signal }) =>
    getChannelType(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetChannelTypeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChannelType>>
>;
export type GetChannelTypeInfiniteQueryError = unknown;

export function useGetChannelTypeInfinite<
  TData = Awaited<ReturnType<typeof getChannelType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetChannelTypeInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetChannelTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getChannelType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelTypeQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelType>>> = ({ signal }) =>
    getChannelType(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getChannelType>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetChannelTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getChannelType>>>;
export type GetChannelTypeQueryError = unknown;

export function useGetChannelType<
  TData = Awaited<ReturnType<typeof getChannelType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetChannelTypeQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateChannelType = (
  id: number,
  channelTypeDTO: ChannelTypeDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<ChannelTypeDTO>(
    {
      url: `/api/channel-types/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: channelTypeDTO,
    },
    options
  );
};

export const getUpdateChannelTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateChannelType>>,
    TError,
    { id: number; data: ChannelTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateChannelType>>,
  TError,
  { id: number; data: ChannelTypeDTO },
  TContext
> => {
  const mutationKey = ['updateChannelType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateChannelType>>,
    { id: number; data: ChannelTypeDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateChannelType(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateChannelTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateChannelType>>
>;
export type UpdateChannelTypeMutationBody = ChannelTypeDTO;
export type UpdateChannelTypeMutationError = unknown;

export const useUpdateChannelType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateChannelType>>,
    TError,
    { id: number; data: ChannelTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateChannelType>>,
  TError,
  { id: number; data: ChannelTypeDTO },
  TContext
> => {
  const mutationOptions = getUpdateChannelTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteChannelType = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/channel-types/${id}`, method: 'DELETE' }, options);
};

export const getDeleteChannelTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteChannelType>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteChannelType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteChannelType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteChannelType>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteChannelType(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteChannelTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteChannelType>>
>;

export type DeleteChannelTypeMutationError = unknown;

export const useDeleteChannelType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteChannelType>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteChannelType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteChannelTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateChannelType = (
  id: number,
  channelTypeDTO: ChannelTypeDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<ChannelTypeDTO>(
    {
      url: `/api/channel-types/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: channelTypeDTO,
    },
    options
  );
};

export const getPartialUpdateChannelTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateChannelType>>,
    TError,
    { id: number; data: ChannelTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateChannelType>>,
  TError,
  { id: number; data: ChannelTypeDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateChannelType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateChannelType>>,
    { id: number; data: ChannelTypeDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateChannelType(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateChannelTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateChannelType>>
>;
export type PartialUpdateChannelTypeMutationBody = ChannelTypeDTO;
export type PartialUpdateChannelTypeMutationError = unknown;

export const usePartialUpdateChannelType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateChannelType>>,
    TError,
    { id: number; data: ChannelTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateChannelType>>,
  TError,
  { id: number; data: ChannelTypeDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateChannelTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllChannelTypes = (
  params?: GetAllChannelTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<ChannelTypeDTO[]>(
    { url: `/api/channel-types`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllChannelTypesQueryKey = (params?: GetAllChannelTypesParams) => {
  return [`/api/channel-types`, ...(params ? [params] : [])] as const;
};

export const getGetAllChannelTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllChannelTypes>>,
  TError = unknown,
>(
  params?: GetAllChannelTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllChannelTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllChannelTypes>>> = ({
    signal,
    pageParam,
  }) =>
    getAllChannelTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllChannelTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllChannelTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllChannelTypes>>
>;
export type GetAllChannelTypesInfiniteQueryError = unknown;

export function useGetAllChannelTypesInfinite<
  TData = Awaited<ReturnType<typeof getAllChannelTypes>>,
  TError = unknown,
>(
  params?: GetAllChannelTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllChannelTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllChannelTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllChannelTypes>>,
  TError = unknown,
>(
  params?: GetAllChannelTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllChannelTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllChannelTypes>>> = ({ signal }) =>
    getAllChannelTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllChannelTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllChannelTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllChannelTypes>>
>;
export type GetAllChannelTypesQueryError = unknown;

export function useGetAllChannelTypes<
  TData = Awaited<ReturnType<typeof getAllChannelTypes>>,
  TError = unknown,
>(
  params?: GetAllChannelTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllChannelTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createChannelType = (
  channelTypeDTO: ChannelTypeDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<ChannelTypeDTO>(
    {
      url: `/api/channel-types`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: channelTypeDTO,
      signal,
    },
    options
  );
};

export const getCreateChannelTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createChannelType>>,
    TError,
    { data: ChannelTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createChannelType>>,
  TError,
  { data: ChannelTypeDTO },
  TContext
> => {
  const mutationKey = ['createChannelType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createChannelType>>,
    { data: ChannelTypeDTO }
  > = props => {
    const { data } = props ?? {};

    return createChannelType(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateChannelTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof createChannelType>>
>;
export type CreateChannelTypeMutationBody = ChannelTypeDTO;
export type CreateChannelTypeMutationError = unknown;

export const useCreateChannelType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createChannelType>>,
    TError,
    { data: ChannelTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createChannelType>>,
  TError,
  { data: ChannelTypeDTO },
  TContext
> => {
  const mutationOptions = getCreateChannelTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countChannelTypes = (
  params?: CountChannelTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>(
    { url: `/api/channel-types/count`, method: 'GET', params, signal },
    options
  );
};

export const getCountChannelTypesQueryKey = (params?: CountChannelTypesParams) => {
  return [`/api/channel-types/count`, ...(params ? [params] : [])] as const;
};

export const getCountChannelTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countChannelTypes>>,
  TError = unknown,
>(
  params?: CountChannelTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountChannelTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countChannelTypes>>> = ({
    signal,
    pageParam,
  }) =>
    countChannelTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countChannelTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountChannelTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof countChannelTypes>>
>;
export type CountChannelTypesInfiniteQueryError = unknown;

export function useCountChannelTypesInfinite<
  TData = Awaited<ReturnType<typeof countChannelTypes>>,
  TError = unknown,
>(
  params?: CountChannelTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountChannelTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountChannelTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof countChannelTypes>>,
  TError = unknown,
>(
  params?: CountChannelTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountChannelTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countChannelTypes>>> = ({ signal }) =>
    countChannelTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countChannelTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountChannelTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof countChannelTypes>>
>;
export type CountChannelTypesQueryError = unknown;

export function useCountChannelTypes<
  TData = Awaited<ReturnType<typeof countChannelTypes>>,
  TError = unknown,
>(
  params?: CountChannelTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountChannelTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchChannelTypes = (
  params: SearchChannelTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<ChannelTypeDTO[]>(
    { url: `/api/channel-types/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchChannelTypesQueryKey = (params: SearchChannelTypesParams) => {
  return [`/api/channel-types/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchChannelTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchChannelTypes>>,
  TError = unknown,
>(
  params: SearchChannelTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchChannelTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchChannelTypes>>> = ({
    signal,
    pageParam,
  }) =>
    searchChannelTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchChannelTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchChannelTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchChannelTypes>>
>;
export type SearchChannelTypesInfiniteQueryError = unknown;

export function useSearchChannelTypesInfinite<
  TData = Awaited<ReturnType<typeof searchChannelTypes>>,
  TError = unknown,
>(
  params: SearchChannelTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchChannelTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchChannelTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchChannelTypes>>,
  TError = unknown,
>(
  params: SearchChannelTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchChannelTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchChannelTypes>>> = ({ signal }) =>
    searchChannelTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchChannelTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchChannelTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchChannelTypes>>
>;
export type SearchChannelTypesQueryError = unknown;

export function useSearchChannelTypes<
  TData = Awaited<ReturnType<typeof searchChannelTypes>>,
  TError = unknown,
>(
  params: SearchChannelTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchChannelTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
