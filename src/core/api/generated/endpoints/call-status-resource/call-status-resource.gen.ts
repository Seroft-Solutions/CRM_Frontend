/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CallStatusDTO,
  CountCallStatusesParams,
  GetAllCallStatusesParams,
  SearchCallStatusesParams,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getCallStatus = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallStatusDTO>(
    { url: `/api/call-statuses/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetCallStatusQueryKey = (id: number) => {
  return [`/api/call-statuses/${id}`] as const;
};

export const getGetCallStatusInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallStatus>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallStatusQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallStatus>>> = ({ signal }) =>
    getCallStatus(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCallStatusInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCallStatus>>
>;
export type GetCallStatusInfiniteQueryError = unknown;

export function useGetCallStatusInfinite<
  TData = Awaited<ReturnType<typeof getCallStatus>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallStatusInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCallStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallStatus>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallStatusQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallStatus>>> = ({ signal }) =>
    getCallStatus(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCallStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCallStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getCallStatus>>>;
export type GetCallStatusQueryError = unknown;

export function useGetCallStatus<
  TData = Awaited<ReturnType<typeof getCallStatus>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallStatusQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCallStatus = (
  id: number,
  callStatusDTO: CallStatusDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallStatusDTO>(
    {
      url: `/api/call-statuses/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: callStatusDTO,
    },
    options
  );
};

export const getUpdateCallStatusMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallStatus>>,
    TError,
    { id: number; data: CallStatusDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCallStatus>>,
  TError,
  { id: number; data: CallStatusDTO },
  TContext
> => {
  const mutationKey = ['updateCallStatus'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCallStatus>>,
    { id: number; data: CallStatusDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateCallStatus(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCallStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCallStatus>>
>;
export type UpdateCallStatusMutationBody = CallStatusDTO;
export type UpdateCallStatusMutationError = unknown;

export const useUpdateCallStatus = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallStatus>>,
    TError,
    { id: number; data: CallStatusDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCallStatus>>,
  TError,
  { id: number; data: CallStatusDTO },
  TContext
> => {
  const mutationOptions = getUpdateCallStatusMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCallStatus = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/call-statuses/${id}`, method: 'DELETE' }, options);
};

export const getDeleteCallStatusMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallStatus>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCallStatus>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteCallStatus'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCallStatus>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteCallStatus(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCallStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCallStatus>>
>;

export type DeleteCallStatusMutationError = unknown;

export const useDeleteCallStatus = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallStatus>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCallStatus>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCallStatusMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateCallStatus = (
  id: number,
  callStatusDTO: CallStatusDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallStatusDTO>(
    {
      url: `/api/call-statuses/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: callStatusDTO,
    },
    options
  );
};

export const getPartialUpdateCallStatusMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallStatus>>,
    TError,
    { id: number; data: CallStatusDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateCallStatus>>,
  TError,
  { id: number; data: CallStatusDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateCallStatus'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateCallStatus>>,
    { id: number; data: CallStatusDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateCallStatus(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateCallStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateCallStatus>>
>;
export type PartialUpdateCallStatusMutationBody = CallStatusDTO;
export type PartialUpdateCallStatusMutationError = unknown;

export const usePartialUpdateCallStatus = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallStatus>>,
    TError,
    { id: number; data: CallStatusDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateCallStatus>>,
  TError,
  { id: number; data: CallStatusDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateCallStatusMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllCallStatuses = (
  params?: GetAllCallStatusesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallStatusDTO[]>(
    { url: `/api/call-statuses`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllCallStatusesQueryKey = (params?: GetAllCallStatusesParams) => {
  return [`/api/call-statuses`, ...(params ? [params] : [])] as const;
};

export const getGetAllCallStatusesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallStatuses>>,
  TError = unknown,
>(
  params?: GetAllCallStatusesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallStatuses>>> = ({
    signal,
    pageParam,
  }) =>
    getAllCallStatuses({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllCallStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallStatusesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCallStatuses>>
>;
export type GetAllCallStatusesInfiniteQueryError = unknown;

export function useGetAllCallStatusesInfinite<
  TData = Awaited<ReturnType<typeof getAllCallStatuses>>,
  TError = unknown,
>(
  params?: GetAllCallStatusesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallStatusesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllCallStatusesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallStatuses>>,
  TError = unknown,
>(
  params?: GetAllCallStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallStatuses>>> = ({ signal }) =>
    getAllCallStatuses(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCallStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallStatusesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCallStatuses>>
>;
export type GetAllCallStatusesQueryError = unknown;

export function useGetAllCallStatuses<
  TData = Awaited<ReturnType<typeof getAllCallStatuses>>,
  TError = unknown,
>(
  params?: GetAllCallStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallStatusesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createCallStatus = (
  callStatusDTO: CallStatusDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallStatusDTO>(
    {
      url: `/api/call-statuses`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: callStatusDTO,
      signal,
    },
    options
  );
};

export const getCreateCallStatusMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallStatus>>,
    TError,
    { data: CallStatusDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCallStatus>>,
  TError,
  { data: CallStatusDTO },
  TContext
> => {
  const mutationKey = ['createCallStatus'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCallStatus>>,
    { data: CallStatusDTO }
  > = props => {
    const { data } = props ?? {};

    return createCallStatus(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCallStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCallStatus>>
>;
export type CreateCallStatusMutationBody = CallStatusDTO;
export type CreateCallStatusMutationError = unknown;

export const useCreateCallStatus = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallStatus>>,
    TError,
    { data: CallStatusDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createCallStatus>>,
  TError,
  { data: CallStatusDTO },
  TContext
> => {
  const mutationOptions = getCreateCallStatusMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countCallStatuses = (
  params?: CountCallStatusesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>(
    { url: `/api/call-statuses/count`, method: 'GET', params, signal },
    options
  );
};

export const getCountCallStatusesQueryKey = (params?: CountCallStatusesParams) => {
  return [`/api/call-statuses/count`, ...(params ? [params] : [])] as const;
};

export const getCountCallStatusesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallStatuses>>,
  TError = unknown,
>(
  params?: CountCallStatusesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallStatuses>>> = ({
    signal,
    pageParam,
  }) =>
    countCallStatuses({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countCallStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallStatusesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof countCallStatuses>>
>;
export type CountCallStatusesInfiniteQueryError = unknown;

export function useCountCallStatusesInfinite<
  TData = Awaited<ReturnType<typeof countCallStatuses>>,
  TError = unknown,
>(
  params?: CountCallStatusesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallStatusesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountCallStatusesQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallStatuses>>,
  TError = unknown,
>(
  params?: CountCallStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallStatuses>>> = ({ signal }) =>
    countCallStatuses(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countCallStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallStatusesQueryResult = NonNullable<
  Awaited<ReturnType<typeof countCallStatuses>>
>;
export type CountCallStatusesQueryError = unknown;

export function useCountCallStatuses<
  TData = Awaited<ReturnType<typeof countCallStatuses>>,
  TError = unknown,
>(
  params?: CountCallStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallStatusesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchCallStatuses = (
  params: SearchCallStatusesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallStatusDTO[]>(
    { url: `/api/call-statuses/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchCallStatusesQueryKey = (params: SearchCallStatusesParams) => {
  return [`/api/call-statuses/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchCallStatusesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallStatuses>>,
  TError = unknown,
>(
  params: SearchCallStatusesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallStatuses>>> = ({
    signal,
    pageParam,
  }) =>
    searchCallStatuses({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchCallStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallStatusesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCallStatuses>>
>;
export type SearchCallStatusesInfiniteQueryError = unknown;

export function useSearchCallStatusesInfinite<
  TData = Awaited<ReturnType<typeof searchCallStatuses>>,
  TError = unknown,
>(
  params: SearchCallStatusesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallStatusesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchCallStatusesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallStatuses>>,
  TError = unknown,
>(
  params: SearchCallStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallStatusesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallStatuses>>> = ({ signal }) =>
    searchCallStatuses(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchCallStatuses>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallStatusesQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCallStatuses>>
>;
export type SearchCallStatusesQueryError = unknown;

export function useSearchCallStatuses<
  TData = Awaited<ReturnType<typeof searchCallStatuses>>,
  TError = unknown,
>(
  params: SearchCallStatusesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallStatusesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
