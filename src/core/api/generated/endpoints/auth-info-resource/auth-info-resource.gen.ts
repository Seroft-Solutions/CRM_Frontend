/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { AuthInfoVM } from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAuthInfo = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<AuthInfoVM>({ url: `/api/auth-info`, method: 'GET', signal }, options);
};

export const getGetAuthInfoQueryKey = () => {
  return [`/api/auth-info`] as const;
};

export const getGetAuthInfoInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthInfo>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthInfo>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthInfoQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthInfo>>> = ({ signal }) =>
    getAuthInfo(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAuthInfo>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuthInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthInfo>>>;
export type GetAuthInfoInfiniteQueryError = unknown;

export function useGetAuthInfoInfinite<
  TData = Awaited<ReturnType<typeof getAuthInfo>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthInfo>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAuthInfoInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAuthInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthInfo>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAuthInfo>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthInfoQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthInfo>>> = ({ signal }) =>
    getAuthInfo(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthInfo>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuthInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthInfo>>>;
export type GetAuthInfoQueryError = unknown;

export function useGetAuthInfo<
  TData = Awaited<ReturnType<typeof getAuthInfo>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAuthInfo>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAuthInfoQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
