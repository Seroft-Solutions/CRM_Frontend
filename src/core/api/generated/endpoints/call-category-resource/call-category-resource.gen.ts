/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CallCategoryDTO,
  CountCallCategoriesParams,
  GetAllCallCategoriesParams,
  SearchCallCategoriesParams,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getCallCategory = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallCategoryDTO>(
    { url: `/api/call-categories/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetCallCategoryQueryKey = (id: number) => {
  return [`/api/call-categories/${id}`] as const;
};

export const getGetCallCategoryInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallCategory>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallCategoryQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallCategory>>> = ({ signal }) =>
    getCallCategory(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCallCategoryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCallCategory>>
>;
export type GetCallCategoryInfiniteQueryError = unknown;

export function useGetCallCategoryInfinite<
  TData = Awaited<ReturnType<typeof getCallCategory>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallCategoryInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCallCategoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallCategory>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallCategoryQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallCategory>>> = ({ signal }) =>
    getCallCategory(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCallCategory>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCallCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getCallCategory>>>;
export type GetCallCategoryQueryError = unknown;

export function useGetCallCategory<
  TData = Awaited<ReturnType<typeof getCallCategory>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallCategoryQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCallCategory = (
  id: number,
  callCategoryDTO: CallCategoryDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallCategoryDTO>(
    {
      url: `/api/call-categories/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: callCategoryDTO,
    },
    options
  );
};

export const getUpdateCallCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallCategory>>,
    TError,
    { id: number; data: CallCategoryDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCallCategory>>,
  TError,
  { id: number; data: CallCategoryDTO },
  TContext
> => {
  const mutationKey = ['updateCallCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCallCategory>>,
    { id: number; data: CallCategoryDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateCallCategory(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCallCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCallCategory>>
>;
export type UpdateCallCategoryMutationBody = CallCategoryDTO;
export type UpdateCallCategoryMutationError = unknown;

export const useUpdateCallCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallCategory>>,
    TError,
    { id: number; data: CallCategoryDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCallCategory>>,
  TError,
  { id: number; data: CallCategoryDTO },
  TContext
> => {
  const mutationOptions = getUpdateCallCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCallCategory = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/call-categories/${id}`, method: 'DELETE' }, options);
};

export const getDeleteCallCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallCategory>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCallCategory>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteCallCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCallCategory>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteCallCategory(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCallCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCallCategory>>
>;

export type DeleteCallCategoryMutationError = unknown;

export const useDeleteCallCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallCategory>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCallCategory>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCallCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateCallCategory = (
  id: number,
  callCategoryDTO: CallCategoryDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallCategoryDTO>(
    {
      url: `/api/call-categories/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: callCategoryDTO,
    },
    options
  );
};

export const getPartialUpdateCallCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallCategory>>,
    TError,
    { id: number; data: CallCategoryDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateCallCategory>>,
  TError,
  { id: number; data: CallCategoryDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateCallCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateCallCategory>>,
    { id: number; data: CallCategoryDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateCallCategory(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateCallCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateCallCategory>>
>;
export type PartialUpdateCallCategoryMutationBody = CallCategoryDTO;
export type PartialUpdateCallCategoryMutationError = unknown;

export const usePartialUpdateCallCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallCategory>>,
    TError,
    { id: number; data: CallCategoryDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateCallCategory>>,
  TError,
  { id: number; data: CallCategoryDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateCallCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllCallCategories = (
  params?: GetAllCallCategoriesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallCategoryDTO[]>(
    { url: `/api/call-categories`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllCallCategoriesQueryKey = (params?: GetAllCallCategoriesParams) => {
  return [`/api/call-categories`, ...(params ? [params] : [])] as const;
};

export const getGetAllCallCategoriesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallCategories>>,
  TError = unknown,
>(
  params?: GetAllCallCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getAllCallCategories>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallCategories>>> = ({
    signal,
    pageParam,
  }) =>
    getAllCallCategories(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllCallCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallCategoriesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCallCategories>>
>;
export type GetAllCallCategoriesInfiniteQueryError = unknown;

export function useGetAllCallCategoriesInfinite<
  TData = Awaited<ReturnType<typeof getAllCallCategories>>,
  TError = unknown,
>(
  params?: GetAllCallCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getAllCallCategories>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallCategoriesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllCallCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallCategories>>,
  TError = unknown,
>(
  params?: GetAllCallCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallCategories>>> = ({ signal }) =>
    getAllCallCategories(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCallCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCallCategories>>
>;
export type GetAllCallCategoriesQueryError = unknown;

export function useGetAllCallCategories<
  TData = Awaited<ReturnType<typeof getAllCallCategories>>,
  TError = unknown,
>(
  params?: GetAllCallCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createCallCategory = (
  callCategoryDTO: CallCategoryDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallCategoryDTO>(
    {
      url: `/api/call-categories`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: callCategoryDTO,
      signal,
    },
    options
  );
};

export const getCreateCallCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallCategory>>,
    TError,
    { data: CallCategoryDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCallCategory>>,
  TError,
  { data: CallCategoryDTO },
  TContext
> => {
  const mutationKey = ['createCallCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCallCategory>>,
    { data: CallCategoryDTO }
  > = props => {
    const { data } = props ?? {};

    return createCallCategory(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCallCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCallCategory>>
>;
export type CreateCallCategoryMutationBody = CallCategoryDTO;
export type CreateCallCategoryMutationError = unknown;

export const useCreateCallCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallCategory>>,
    TError,
    { data: CallCategoryDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createCallCategory>>,
  TError,
  { data: CallCategoryDTO },
  TContext
> => {
  const mutationOptions = getCreateCallCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countCallCategories = (
  params?: CountCallCategoriesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>(
    { url: `/api/call-categories/count`, method: 'GET', params, signal },
    options
  );
};

export const getCountCallCategoriesQueryKey = (params?: CountCallCategoriesParams) => {
  return [`/api/call-categories/count`, ...(params ? [params] : [])] as const;
};

export const getCountCallCategoriesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallCategories>>,
  TError = unknown,
>(
  params?: CountCallCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallCategories>>> = ({
    signal,
    pageParam,
  }) =>
    countCallCategories({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countCallCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallCategoriesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof countCallCategories>>
>;
export type CountCallCategoriesInfiniteQueryError = unknown;

export function useCountCallCategoriesInfinite<
  TData = Awaited<ReturnType<typeof countCallCategories>>,
  TError = unknown,
>(
  params?: CountCallCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallCategoriesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountCallCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallCategories>>,
  TError = unknown,
>(
  params?: CountCallCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallCategories>>> = ({ signal }) =>
    countCallCategories(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countCallCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof countCallCategories>>
>;
export type CountCallCategoriesQueryError = unknown;

export function useCountCallCategories<
  TData = Awaited<ReturnType<typeof countCallCategories>>,
  TError = unknown,
>(
  params?: CountCallCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchCallCategories = (
  params: SearchCallCategoriesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallCategoryDTO[]>(
    { url: `/api/call-categories/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchCallCategoriesQueryKey = (params: SearchCallCategoriesParams) => {
  return [`/api/call-categories/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchCallCategoriesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallCategories>>,
  TError = unknown,
>(
  params: SearchCallCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof searchCallCategories>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallCategories>>> = ({
    signal,
    pageParam,
  }) =>
    searchCallCategories(
      { ...params, page: pageParam || params?.['page'] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchCallCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallCategoriesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCallCategories>>
>;
export type SearchCallCategoriesInfiniteQueryError = unknown;

export function useSearchCallCategoriesInfinite<
  TData = Awaited<ReturnType<typeof searchCallCategories>>,
  TError = unknown,
>(
  params: SearchCallCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof searchCallCategories>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallCategoriesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchCallCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallCategories>>,
  TError = unknown,
>(
  params: SearchCallCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallCategories>>> = ({ signal }) =>
    searchCallCategories(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchCallCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCallCategories>>
>;
export type SearchCallCategoriesQueryError = unknown;

export function useSearchCallCategories<
  TData = Awaited<ReturnType<typeof searchCallCategories>>,
  TError = unknown,
>(
  params: SearchCallCategoriesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
