/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { AdminUserDTO } from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const isAuthenticated = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<void>({ url: `/api/authenticate`, method: 'GET', signal }, options);
};

export const getIsAuthenticatedQueryKey = () => {
  return [`/api/authenticate`] as const;
};

export const getIsAuthenticatedInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof isAuthenticated>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof isAuthenticated>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIsAuthenticatedQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof isAuthenticated>>> = ({ signal }) =>
    isAuthenticated(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof isAuthenticated>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IsAuthenticatedInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof isAuthenticated>>
>;
export type IsAuthenticatedInfiniteQueryError = unknown;

export function useIsAuthenticatedInfinite<
  TData = Awaited<ReturnType<typeof isAuthenticated>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof isAuthenticated>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getIsAuthenticatedInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getIsAuthenticatedQueryOptions = <
  TData = Awaited<ReturnType<typeof isAuthenticated>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof isAuthenticated>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIsAuthenticatedQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof isAuthenticated>>> = ({ signal }) =>
    isAuthenticated(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof isAuthenticated>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type IsAuthenticatedQueryResult = NonNullable<Awaited<ReturnType<typeof isAuthenticated>>>;
export type IsAuthenticatedQueryError = unknown;

export function useIsAuthenticated<
  TData = Awaited<ReturnType<typeof isAuthenticated>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof isAuthenticated>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getIsAuthenticatedQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAccount = (options?: SecondParameter<typeof customFetch>, signal?: AbortSignal) => {
  return customFetch<AdminUserDTO>({ url: `/api/account`, method: 'GET', signal }, options);
};

export const getGetAccountQueryKey = () => {
  return [`/api/account`] as const;
};

export const getGetAccountInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({ signal }) =>
    getAccount(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAccount>>>;
export type GetAccountInfiniteQueryError = unknown;

export function useGetAccountInfinite<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({ signal }) =>
    getAccount(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getAccount>>>;
export type GetAccountQueryError = unknown;

export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
