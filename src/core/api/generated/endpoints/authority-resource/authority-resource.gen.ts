/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { Authority } from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAllAuthorities = (
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<Authority[]>({ url: `/api/authorities`, method: 'GET', signal }, options);
};

export const getGetAllAuthoritiesQueryKey = () => {
  return [`/api/authorities`] as const;
};

export const getGetAllAuthoritiesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllAuthorities>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllAuthoritiesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAuthorities>>> = ({ signal }) =>
    getAllAuthorities(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllAuthorities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllAuthoritiesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllAuthorities>>
>;
export type GetAllAuthoritiesInfiniteQueryError = unknown;

export function useGetAllAuthoritiesInfinite<
  TData = Awaited<ReturnType<typeof getAllAuthorities>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllAuthoritiesInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllAuthoritiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllAuthorities>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllAuthoritiesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAuthorities>>> = ({ signal }) =>
    getAllAuthorities(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllAuthorities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllAuthoritiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllAuthorities>>
>;
export type GetAllAuthoritiesQueryError = unknown;

export function useGetAllAuthorities<
  TData = Awaited<ReturnType<typeof getAllAuthorities>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllAuthoritiesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createAuthority = (
  authority: Authority,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<Authority>(
    {
      url: `/api/authorities`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authority,
      signal,
    },
    options
  );
};

export const getCreateAuthorityMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAuthority>>,
    TError,
    { data: Authority },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAuthority>>,
  TError,
  { data: Authority },
  TContext
> => {
  const mutationKey = ['createAuthority'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAuthority>>,
    { data: Authority }
  > = props => {
    const { data } = props ?? {};

    return createAuthority(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAuthorityMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAuthority>>
>;
export type CreateAuthorityMutationBody = Authority;
export type CreateAuthorityMutationError = unknown;

export const useCreateAuthority = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAuthority>>,
    TError,
    { data: Authority },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createAuthority>>,
  TError,
  { data: Authority },
  TContext
> => {
  const mutationOptions = getCreateAuthorityMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAuthority = (
  id: string,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<Authority>({ url: `/api/authorities/${id}`, method: 'GET', signal }, options);
};

export const getGetAuthorityQueryKey = (id: string) => {
  return [`/api/authorities/${id}`] as const;
};

export const getGetAuthorityInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthority>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthorityQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthority>>> = ({ signal }) =>
    getAuthority(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetAuthorityInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthority>>>;
export type GetAuthorityInfiniteQueryError = unknown;

export function useGetAuthorityInfinite<
  TData = Awaited<ReturnType<typeof getAuthority>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAuthorityInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAuthorityQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthority>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAuthorityQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthority>>> = ({ signal }) =>
    getAuthority(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthority>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuthorityQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthority>>>;
export type GetAuthorityQueryError = unknown;

export function useGetAuthority<TData = Awaited<ReturnType<typeof getAuthority>>, TError = unknown>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAuthorityQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteAuthority = (id: string, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/authorities/${id}`, method: 'DELETE' }, options);
};

export const getDeleteAuthorityMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAuthority>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAuthority>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteAuthority'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAuthority>>,
    { id: string }
  > = props => {
    const { id } = props ?? {};

    return deleteAuthority(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAuthorityMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAuthority>>
>;

export type DeleteAuthorityMutationError = unknown;

export const useDeleteAuthority = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAuthority>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteAuthority>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteAuthorityMutationOptions(options);

  return useMutation(mutationOptions);
};
