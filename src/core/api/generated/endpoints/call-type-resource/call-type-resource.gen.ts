/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CallTypeDTO,
  CountCallTypesParams,
  GetAllCallTypesParams,
  SearchCallTypesParams,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getCallType = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallTypeDTO>({ url: `/api/call-types/${id}`, method: 'GET', signal }, options);
};

export const getGetCallTypeQueryKey = (id: number) => {
  return [`/api/call-types/${id}`] as const;
};

export const getGetCallTypeInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallTypeQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallType>>> = ({ signal }) =>
    getCallType(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCallTypeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCallType>>>;
export type GetCallTypeInfiniteQueryError = unknown;

export function useGetCallTypeInfinite<
  TData = Awaited<ReturnType<typeof getCallType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallTypeInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCallTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getCallType>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCallTypeQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallType>>> = ({ signal }) =>
    getCallType(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCallType>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCallTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getCallType>>>;
export type GetCallTypeQueryError = unknown;

export function useGetCallType<TData = Awaited<ReturnType<typeof getCallType>>, TError = unknown>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCallTypeQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCallType = (
  id: number,
  callTypeDTO: CallTypeDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallTypeDTO>(
    {
      url: `/api/call-types/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: callTypeDTO,
    },
    options
  );
};

export const getUpdateCallTypeMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallType>>,
    TError,
    { id: number; data: CallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCallType>>,
  TError,
  { id: number; data: CallTypeDTO },
  TContext
> => {
  const mutationKey = ['updateCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCallType>>,
    { id: number; data: CallTypeDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateCallType(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCallTypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateCallType>>>;
export type UpdateCallTypeMutationBody = CallTypeDTO;
export type UpdateCallTypeMutationError = unknown;

export const useUpdateCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCallType>>,
    TError,
    { id: number; data: CallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCallType>>,
  TError,
  { id: number; data: CallTypeDTO },
  TContext
> => {
  const mutationOptions = getUpdateCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCallType = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/call-types/${id}`, method: 'DELETE' }, options);
};

export const getDeleteCallTypeMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallType>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCallType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCallType>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteCallType(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCallTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCallType>>>;

export type DeleteCallTypeMutationError = unknown;

export const useDeleteCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCallType>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCallType>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateCallType = (
  id: number,
  callTypeDTO: CallTypeDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<CallTypeDTO>(
    {
      url: `/api/call-types/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: callTypeDTO,
    },
    options
  );
};

export const getPartialUpdateCallTypeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallType>>,
    TError,
    { id: number; data: CallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateCallType>>,
  TError,
  { id: number; data: CallTypeDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateCallType>>,
    { id: number; data: CallTypeDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateCallType(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateCallTypeMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateCallType>>
>;
export type PartialUpdateCallTypeMutationBody = CallTypeDTO;
export type PartialUpdateCallTypeMutationError = unknown;

export const usePartialUpdateCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateCallType>>,
    TError,
    { id: number; data: CallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateCallType>>,
  TError,
  { id: number; data: CallTypeDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllCallTypes = (
  params?: GetAllCallTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallTypeDTO[]>(
    { url: `/api/call-types`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllCallTypesQueryKey = (params?: GetAllCallTypesParams) => {
  return [`/api/call-types`, ...(params ? [params] : [])] as const;
};

export const getGetAllCallTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallTypes>>,
  TError = unknown,
>(
  params?: GetAllCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallTypes>>> = ({
    signal,
    pageParam,
  }) => getAllCallTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCallTypes>>
>;
export type GetAllCallTypesInfiniteQueryError = unknown;

export function useGetAllCallTypesInfinite<
  TData = Awaited<ReturnType<typeof getAllCallTypes>>,
  TError = unknown,
>(
  params?: GetAllCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllCallTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCallTypes>>,
  TError = unknown,
>(
  params?: GetAllCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallTypes>>> = ({ signal }) =>
    getAllCallTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCallTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCallTypes>>>;
export type GetAllCallTypesQueryError = unknown;

export function useGetAllCallTypes<
  TData = Awaited<ReturnType<typeof getAllCallTypes>>,
  TError = unknown,
>(
  params?: GetAllCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCallTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createCallType = (
  callTypeDTO: CallTypeDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallTypeDTO>(
    {
      url: `/api/call-types`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: callTypeDTO,
      signal,
    },
    options
  );
};

export const getCreateCallTypeMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallType>>,
    TError,
    { data: CallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCallType>>,
  TError,
  { data: CallTypeDTO },
  TContext
> => {
  const mutationKey = ['createCallType'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCallType>>,
    { data: CallTypeDTO }
  > = props => {
    const { data } = props ?? {};

    return createCallType(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCallTypeMutationResult = NonNullable<Awaited<ReturnType<typeof createCallType>>>;
export type CreateCallTypeMutationBody = CallTypeDTO;
export type CreateCallTypeMutationError = unknown;

export const useCreateCallType = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCallType>>,
    TError,
    { data: CallTypeDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createCallType>>,
  TError,
  { data: CallTypeDTO },
  TContext
> => {
  const mutationOptions = getCreateCallTypeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countCallTypes = (
  params?: CountCallTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>(
    { url: `/api/call-types/count`, method: 'GET', params, signal },
    options
  );
};

export const getCountCallTypesQueryKey = (params?: CountCallTypesParams) => {
  return [`/api/call-types/count`, ...(params ? [params] : [])] as const;
};

export const getCountCallTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallTypes>>,
  TError = unknown,
>(
  params?: CountCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallTypes>>> = ({
    signal,
    pageParam,
  }) => countCallTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof countCallTypes>>
>;
export type CountCallTypesInfiniteQueryError = unknown;

export function useCountCallTypesInfinite<
  TData = Awaited<ReturnType<typeof countCallTypes>>,
  TError = unknown,
>(
  params?: CountCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountCallTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof countCallTypes>>,
  TError = unknown,
>(
  params?: CountCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallTypes>>> = ({ signal }) =>
    countCallTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountCallTypesQueryResult = NonNullable<Awaited<ReturnType<typeof countCallTypes>>>;
export type CountCallTypesQueryError = unknown;

export function useCountCallTypes<
  TData = Awaited<ReturnType<typeof countCallTypes>>,
  TError = unknown,
>(
  params?: CountCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountCallTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchCallTypes = (
  params: SearchCallTypesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<CallTypeDTO[]>(
    { url: `/api/call-types/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchCallTypesQueryKey = (params: SearchCallTypesParams) => {
  return [`/api/call-types/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchCallTypesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallTypes>>,
  TError = unknown,
>(
  params: SearchCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallTypes>>> = ({
    signal,
    pageParam,
  }) => searchCallTypes({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallTypesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCallTypes>>
>;
export type SearchCallTypesInfiniteQueryError = unknown;

export function useSearchCallTypesInfinite<
  TData = Awaited<ReturnType<typeof searchCallTypes>>,
  TError = unknown,
>(
  params: SearchCallTypesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallTypesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchCallTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCallTypes>>,
  TError = unknown,
>(
  params: SearchCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchCallTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallTypes>>> = ({ signal }) =>
    searchCallTypes(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchCallTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCallTypesQueryResult = NonNullable<Awaited<ReturnType<typeof searchCallTypes>>>;
export type SearchCallTypesQueryError = unknown;

export function useSearchCallTypes<
  TData = Awaited<ReturnType<typeof searchCallTypes>>,
  TError = unknown,
>(
  params: SearchCallTypesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchCallTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
