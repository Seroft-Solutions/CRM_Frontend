/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { GetAllPublicUsersParams, UserDTO } from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAllPublicUsers = (
  params?: GetAllPublicUsersParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<UserDTO[]>({ url: `/api/users`, method: 'GET', params, signal }, options);
};

export const getGetAllPublicUsersQueryKey = (params?: GetAllPublicUsersParams) => {
  return [`/api/users`, ...(params ? [params] : [])] as const;
};

export const getGetAllPublicUsersInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllPublicUsers>>,
  TError = unknown,
>(
  params?: GetAllPublicUsersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllPublicUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPublicUsers>>> = ({
    signal,
    pageParam,
  }) =>
    getAllPublicUsers({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllPublicUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllPublicUsersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllPublicUsers>>
>;
export type GetAllPublicUsersInfiniteQueryError = unknown;

export function useGetAllPublicUsersInfinite<
  TData = Awaited<ReturnType<typeof getAllPublicUsers>>,
  TError = unknown,
>(
  params?: GetAllPublicUsersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllPublicUsersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllPublicUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllPublicUsers>>,
  TError = unknown,
>(
  params?: GetAllPublicUsersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllPublicUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPublicUsers>>> = ({ signal }) =>
    getAllPublicUsers(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllPublicUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllPublicUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllPublicUsers>>
>;
export type GetAllPublicUsersQueryError = unknown;

export function useGetAllPublicUsers<
  TData = Awaited<ReturnType<typeof getAllPublicUsers>>,
  TError = unknown,
>(
  params?: GetAllPublicUsersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllPublicUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const search = (
  query: string,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<UserDTO[]>(
    { url: `/api/users/_search/${query}`, method: 'GET', signal },
    options
  );
};

export const getSearchQueryKey = (query: string) => {
  return [`/api/users/_search/${query}`] as const;
};

export const getSearchInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof search>>,
  TError = unknown,
>(
  query: string,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchQueryKey(query);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof search>>> = ({ signal }) =>
    search(query, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!query,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type SearchInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof search>>>;
export type SearchInfiniteQueryError = unknown;

export function useSearchInfinite<TData = Awaited<ReturnType<typeof search>>, TError = unknown>(
  query: string,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchInfiniteQueryOptions(query, options);

  const _query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  _query.queryKey = queryOptions.queryKey;

  return _query;
}

export const getSearchQueryOptions = <TData = Awaited<ReturnType<typeof search>>, TError = unknown>(
  query: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchQueryKey(query);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof search>>> = ({ signal }) =>
    search(query, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!query,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData> & { queryKey: QueryKey };
};

export type SearchQueryResult = NonNullable<Awaited<ReturnType<typeof search>>>;
export type SearchQueryError = unknown;

export function useSearch<TData = Awaited<ReturnType<typeof search>>, TError = unknown>(
  query: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchQueryOptions(query, options);

  const _query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  _query.queryKey = queryOptions.queryKey;

  return _query;
}
