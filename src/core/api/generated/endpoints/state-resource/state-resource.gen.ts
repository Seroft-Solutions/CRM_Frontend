/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CountStatesParams,
  GetAllStatesParams,
  SearchStatesParams,
  StateDTO,
} from '../../schemas';

import { customFetch } from '../../../client/fetch-client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getState = (
  id: number,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<StateDTO>({ url: `/api/states/${id}`, method: 'GET', signal }, options);
};

export const getGetStateQueryKey = (id: number) => {
  return [`/api/states/${id}`] as const;
};

export const getGetStateInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getState>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStateQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getState>>> = ({ signal }) =>
    getState(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetStateInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getState>>>;
export type GetStateInfiniteQueryError = unknown;

export function useGetStateInfinite<TData = Awaited<ReturnType<typeof getState>>, TError = unknown>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetStateInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetStateQueryOptions = <
  TData = Awaited<ReturnType<typeof getState>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStateQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getState>>> = ({ signal }) =>
    getState(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getState>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStateQueryResult = NonNullable<Awaited<ReturnType<typeof getState>>>;
export type GetStateQueryError = unknown;

export function useGetState<TData = Awaited<ReturnType<typeof getState>>, TError = unknown>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetStateQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateState = (
  id: number,
  stateDTO: StateDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<StateDTO>(
    {
      url: `/api/states/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: stateDTO,
    },
    options
  );
};

export const getUpdateStateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateState>>,
    TError,
    { id: number; data: StateDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateState>>,
  TError,
  { id: number; data: StateDTO },
  TContext
> => {
  const mutationKey = ['updateState'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateState>>,
    { id: number; data: StateDTO }
  > = props => {
    const { id, data } = props ?? {};

    return updateState(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateStateMutationResult = NonNullable<Awaited<ReturnType<typeof updateState>>>;
export type UpdateStateMutationBody = StateDTO;
export type UpdateStateMutationError = unknown;

export const useUpdateState = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateState>>,
    TError,
    { id: number; data: StateDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateState>>,
  TError,
  { id: number; data: StateDTO },
  TContext
> => {
  const mutationOptions = getUpdateStateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteState = (id: number, options?: SecondParameter<typeof customFetch>) => {
  return customFetch<void>({ url: `/api/states/${id}`, method: 'DELETE' }, options);
};

export const getDeleteStateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteState>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteState>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteState'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteState>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return deleteState(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteStateMutationResult = NonNullable<Awaited<ReturnType<typeof deleteState>>>;

export type DeleteStateMutationError = unknown;

export const useDeleteState = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteState>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteState>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteStateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const partialUpdateState = (
  id: number,
  stateDTO: StateDTO,
  options?: SecondParameter<typeof customFetch>
) => {
  return customFetch<StateDTO>(
    {
      url: `/api/states/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: stateDTO,
    },
    options
  );
};

export const getPartialUpdateStateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateState>>,
    TError,
    { id: number; data: StateDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof partialUpdateState>>,
  TError,
  { id: number; data: StateDTO },
  TContext
> => {
  const mutationKey = ['partialUpdateState'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof partialUpdateState>>,
    { id: number; data: StateDTO }
  > = props => {
    const { id, data } = props ?? {};

    return partialUpdateState(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PartialUpdateStateMutationResult = NonNullable<
  Awaited<ReturnType<typeof partialUpdateState>>
>;
export type PartialUpdateStateMutationBody = StateDTO;
export type PartialUpdateStateMutationError = unknown;

export const usePartialUpdateState = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof partialUpdateState>>,
    TError,
    { id: number; data: StateDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof partialUpdateState>>,
  TError,
  { id: number; data: StateDTO },
  TContext
> => {
  const mutationOptions = getPartialUpdateStateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllStates = (
  params?: GetAllStatesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<StateDTO[]>({ url: `/api/states`, method: 'GET', params, signal }, options);
};

export const getGetAllStatesQueryKey = (params?: GetAllStatesParams) => {
  return [`/api/states`, ...(params ? [params] : [])] as const;
};

export const getGetAllStatesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllStates>>,
  TError = unknown,
>(
  params?: GetAllStatesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllStatesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllStates>>> = ({
    signal,
    pageParam,
  }) => getAllStates({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllStates>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllStatesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllStates>>>;
export type GetAllStatesInfiniteQueryError = unknown;

export function useGetAllStatesInfinite<
  TData = Awaited<ReturnType<typeof getAllStates>>,
  TError = unknown,
>(
  params?: GetAllStatesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllStatesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllStatesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllStates>>,
  TError = unknown,
>(
  params?: GetAllStatesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllStatesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllStates>>> = ({ signal }) =>
    getAllStates(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllStates>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllStatesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllStates>>>;
export type GetAllStatesQueryError = unknown;

export function useGetAllStates<TData = Awaited<ReturnType<typeof getAllStates>>, TError = unknown>(
  params?: GetAllStatesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllStatesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createState = (
  stateDTO: StateDTO,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<StateDTO>(
    {
      url: `/api/states`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: stateDTO,
      signal,
    },
    options
  );
};

export const getCreateStateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createState>>,
    TError,
    { data: StateDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createState>>,
  TError,
  { data: StateDTO },
  TContext
> => {
  const mutationKey = ['createState'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createState>>,
    { data: StateDTO }
  > = props => {
    const { data } = props ?? {};

    return createState(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateStateMutationResult = NonNullable<Awaited<ReturnType<typeof createState>>>;
export type CreateStateMutationBody = StateDTO;
export type CreateStateMutationError = unknown;

export const useCreateState = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createState>>,
    TError,
    { data: StateDTO },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createState>>,
  TError,
  { data: StateDTO },
  TContext
> => {
  const mutationOptions = getCreateStateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const countStates = (
  params?: CountStatesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<number>({ url: `/api/states/count`, method: 'GET', params, signal }, options);
};

export const getCountStatesQueryKey = (params?: CountStatesParams) => {
  return [`/api/states/count`, ...(params ? [params] : [])] as const;
};

export const getCountStatesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof countStates>>,
  TError = unknown,
>(
  params?: CountStatesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountStatesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countStates>>> = ({ signal, pageParam }) =>
    countStates({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof countStates>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountStatesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof countStates>>>;
export type CountStatesInfiniteQueryError = unknown;

export function useCountStatesInfinite<
  TData = Awaited<ReturnType<typeof countStates>>,
  TError = unknown,
>(
  params?: CountStatesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountStatesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCountStatesQueryOptions = <
  TData = Awaited<ReturnType<typeof countStates>>,
  TError = unknown,
>(
  params?: CountStatesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCountStatesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof countStates>>> = ({ signal }) =>
    countStates(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof countStates>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CountStatesQueryResult = NonNullable<Awaited<ReturnType<typeof countStates>>>;
export type CountStatesQueryError = unknown;

export function useCountStates<TData = Awaited<ReturnType<typeof countStates>>, TError = unknown>(
  params?: CountStatesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCountStatesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchStates = (
  params: SearchStatesParams,
  options?: SecondParameter<typeof customFetch>,
  signal?: AbortSignal
) => {
  return customFetch<StateDTO[]>(
    { url: `/api/states/_search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchStatesQueryKey = (params: SearchStatesParams) => {
  return [`/api/states/_search`, ...(params ? [params] : [])] as const;
};

export const getSearchStatesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof searchStates>>,
  TError = unknown,
>(
  params: SearchStatesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchStatesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchStates>>> = ({
    signal,
    pageParam,
  }) => searchStates({ ...params, page: pageParam || params?.['page'] }, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchStates>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchStatesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchStates>>>;
export type SearchStatesInfiniteQueryError = unknown;

export function useSearchStatesInfinite<
  TData = Awaited<ReturnType<typeof searchStates>>,
  TError = unknown,
>(
  params: SearchStatesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchStatesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchStatesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchStates>>,
  TError = unknown,
>(
  params: SearchStatesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchStatesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchStates>>> = ({ signal }) =>
    searchStates(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchStates>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchStatesQueryResult = NonNullable<Awaited<ReturnType<typeof searchStates>>>;
export type SearchStatesQueryError = unknown;

export function useSearchStates<TData = Awaited<ReturnType<typeof searchStates>>, TError = unknown>(
  params: SearchStatesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>;
    request?: SecondParameter<typeof customFetch>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchStatesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
