/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type { BruteForceStrategy } from './BruteForceStrategy';
import type { RolesRepresentation } from './RolesRepresentation';
import type { GroupRepresentation } from './GroupRepresentation';
import type { RoleRepresentation } from './RoleRepresentation';
import type { ClientRepresentation } from './ClientRepresentation';
import type { RealmRepresentationLocalizationTexts } from './RealmRepresentationLocalizationTexts';
import type { ClientProfilesRepresentation } from './ClientProfilesRepresentation';
import type { ClientPoliciesRepresentation } from './ClientPoliciesRepresentation';
import type { UserRepresentation } from './UserRepresentation';
import type { ScopeMappingRepresentation } from './ScopeMappingRepresentation';
import type { RealmRepresentationClientScopeMappings } from './RealmRepresentationClientScopeMappings';
import type { ClientScopeRepresentation } from './ClientScopeRepresentation';
import type { RealmRepresentationBrowserSecurityHeaders } from './RealmRepresentationBrowserSecurityHeaders';
import type { RealmRepresentationSmtpServer } from './RealmRepresentationSmtpServer';
import type { UserFederationProviderRepresentation } from './UserFederationProviderRepresentation';
import type { UserFederationMapperRepresentation } from './UserFederationMapperRepresentation';
import type { IdentityProviderRepresentation } from './IdentityProviderRepresentation';
import type { IdentityProviderMapperRepresentation } from './IdentityProviderMapperRepresentation';
import type { ProtocolMapperRepresentation } from './ProtocolMapperRepresentation';
import type { MultivaluedHashMapStringComponentExportRepresentation } from './MultivaluedHashMapStringComponentExportRepresentation';
import type { AuthenticationFlowRepresentation } from './AuthenticationFlowRepresentation';
import type { AuthenticatorConfigRepresentation } from './AuthenticatorConfigRepresentation';
import type { RequiredActionProviderRepresentation } from './RequiredActionProviderRepresentation';
import type { RealmRepresentationAttributes } from './RealmRepresentationAttributes';
import type { OrganizationRepresentation } from './OrganizationRepresentation';
import type { RealmRepresentationSocialProviders } from './RealmRepresentationSocialProviders';
import type { RealmRepresentationApplicationScopeMappings } from './RealmRepresentationApplicationScopeMappings';
import type { ApplicationRepresentation } from './ApplicationRepresentation';
import type { OAuthClientRepresentation } from './OAuthClientRepresentation';
import type { ClientTemplateRepresentation } from './ClientTemplateRepresentation';

export interface RealmRepresentation {
  id?: string;
  realm?: string;
  displayName?: string;
  displayNameHtml?: string;
  notBefore?: number;
  defaultSignatureAlgorithm?: string;
  revokeRefreshToken?: boolean;
  refreshTokenMaxReuse?: number;
  accessTokenLifespan?: number;
  accessTokenLifespanForImplicitFlow?: number;
  ssoSessionIdleTimeout?: number;
  ssoSessionMaxLifespan?: number;
  ssoSessionIdleTimeoutRememberMe?: number;
  ssoSessionMaxLifespanRememberMe?: number;
  offlineSessionIdleTimeout?: number;
  offlineSessionMaxLifespanEnabled?: boolean;
  offlineSessionMaxLifespan?: number;
  clientSessionIdleTimeout?: number;
  clientSessionMaxLifespan?: number;
  clientOfflineSessionIdleTimeout?: number;
  clientOfflineSessionMaxLifespan?: number;
  accessCodeLifespan?: number;
  accessCodeLifespanUserAction?: number;
  accessCodeLifespanLogin?: number;
  actionTokenGeneratedByAdminLifespan?: number;
  actionTokenGeneratedByUserLifespan?: number;
  oauth2DeviceCodeLifespan?: number;
  oauth2DevicePollingInterval?: number;
  enabled?: boolean;
  sslRequired?: string;
  /** @deprecated */
  passwordCredentialGrantAllowed?: boolean;
  registrationAllowed?: boolean;
  registrationEmailAsUsername?: boolean;
  rememberMe?: boolean;
  verifyEmail?: boolean;
  loginWithEmailAllowed?: boolean;
  duplicateEmailsAllowed?: boolean;
  resetPasswordAllowed?: boolean;
  editUsernameAllowed?: boolean;
  /** @deprecated */
  userCacheEnabled?: boolean;
  /** @deprecated */
  realmCacheEnabled?: boolean;
  bruteForceProtected?: boolean;
  permanentLockout?: boolean;
  maxTemporaryLockouts?: number;
  bruteForceStrategy?: BruteForceStrategy;
  maxFailureWaitSeconds?: number;
  minimumQuickLoginWaitSeconds?: number;
  waitIncrementSeconds?: number;
  quickLoginCheckMilliSeconds?: number;
  maxDeltaTimeSeconds?: number;
  failureFactor?: number;
  /** @deprecated */
  privateKey?: string;
  /** @deprecated */
  publicKey?: string;
  /** @deprecated */
  certificate?: string;
  /** @deprecated */
  codeSecret?: string;
  roles?: RolesRepresentation;
  groups?: GroupRepresentation[];
  /** @deprecated */
  defaultRoles?: string[];
  defaultRole?: RoleRepresentation;
  adminPermissionsClient?: ClientRepresentation;
  defaultGroups?: string[];
  /** @deprecated */
  requiredCredentials?: string[];
  passwordPolicy?: string;
  otpPolicyType?: string;
  otpPolicyAlgorithm?: string;
  otpPolicyInitialCounter?: number;
  otpPolicyDigits?: number;
  otpPolicyLookAheadWindow?: number;
  otpPolicyPeriod?: number;
  otpPolicyCodeReusable?: boolean;
  otpSupportedApplications?: string[];
  localizationTexts?: RealmRepresentationLocalizationTexts;
  webAuthnPolicyRpEntityName?: string;
  webAuthnPolicySignatureAlgorithms?: string[];
  webAuthnPolicyRpId?: string;
  webAuthnPolicyAttestationConveyancePreference?: string;
  webAuthnPolicyAuthenticatorAttachment?: string;
  webAuthnPolicyRequireResidentKey?: string;
  webAuthnPolicyUserVerificationRequirement?: string;
  webAuthnPolicyCreateTimeout?: number;
  webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean;
  webAuthnPolicyAcceptableAaguids?: string[];
  webAuthnPolicyExtraOrigins?: string[];
  webAuthnPolicyPasswordlessRpEntityName?: string;
  webAuthnPolicyPasswordlessSignatureAlgorithms?: string[];
  webAuthnPolicyPasswordlessRpId?: string;
  webAuthnPolicyPasswordlessAttestationConveyancePreference?: string;
  webAuthnPolicyPasswordlessAuthenticatorAttachment?: string;
  webAuthnPolicyPasswordlessRequireResidentKey?: string;
  webAuthnPolicyPasswordlessUserVerificationRequirement?: string;
  webAuthnPolicyPasswordlessCreateTimeout?: number;
  webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean;
  webAuthnPolicyPasswordlessAcceptableAaguids?: string[];
  webAuthnPolicyPasswordlessExtraOrigins?: string[];
  clientProfiles?: ClientProfilesRepresentation;
  clientPolicies?: ClientPoliciesRepresentation;
  users?: UserRepresentation[];
  federatedUsers?: UserRepresentation[];
  scopeMappings?: ScopeMappingRepresentation[];
  clientScopeMappings?: RealmRepresentationClientScopeMappings;
  clients?: ClientRepresentation[];
  clientScopes?: ClientScopeRepresentation[];
  defaultDefaultClientScopes?: string[];
  defaultOptionalClientScopes?: string[];
  browserSecurityHeaders?: RealmRepresentationBrowserSecurityHeaders;
  smtpServer?: RealmRepresentationSmtpServer;
  userFederationProviders?: UserFederationProviderRepresentation[];
  userFederationMappers?: UserFederationMapperRepresentation[];
  loginTheme?: string;
  accountTheme?: string;
  adminTheme?: string;
  emailTheme?: string;
  eventsEnabled?: boolean;
  eventsExpiration?: number;
  eventsListeners?: string[];
  enabledEventTypes?: string[];
  adminEventsEnabled?: boolean;
  adminEventsDetailsEnabled?: boolean;
  identityProviders?: IdentityProviderRepresentation[];
  identityProviderMappers?: IdentityProviderMapperRepresentation[];
  protocolMappers?: ProtocolMapperRepresentation[];
  components?: MultivaluedHashMapStringComponentExportRepresentation;
  internationalizationEnabled?: boolean;
  supportedLocales?: string[];
  defaultLocale?: string;
  authenticationFlows?: AuthenticationFlowRepresentation[];
  authenticatorConfig?: AuthenticatorConfigRepresentation[];
  requiredActions?: RequiredActionProviderRepresentation[];
  browserFlow?: string;
  registrationFlow?: string;
  directGrantFlow?: string;
  resetCredentialsFlow?: string;
  clientAuthenticationFlow?: string;
  dockerAuthenticationFlow?: string;
  firstBrokerLoginFlow?: string;
  attributes?: RealmRepresentationAttributes;
  keycloakVersion?: string;
  userManagedAccessAllowed?: boolean;
  organizationsEnabled?: boolean;
  organizations?: OrganizationRepresentation[];
  verifiableCredentialsEnabled?: boolean;
  adminPermissionsEnabled?: boolean;
  /** @deprecated */
  social?: boolean;
  /** @deprecated */
  updateProfileOnInitialSocialLogin?: boolean;
  /** @deprecated */
  socialProviders?: RealmRepresentationSocialProviders;
  /** @deprecated */
  applicationScopeMappings?: RealmRepresentationApplicationScopeMappings;
  /** @deprecated */
  applications?: ApplicationRepresentation[];
  /** @deprecated */
  oauthClients?: OAuthClientRepresentation[];
  /** @deprecated */
  clientTemplates?: ClientTemplateRepresentation[];
  oAuth2DeviceCodeLifespan?: number;
  oAuth2DevicePollingInterval?: number;
}
