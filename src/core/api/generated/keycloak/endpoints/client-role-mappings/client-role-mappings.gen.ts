/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams,
  GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams,
  RoleRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get client-level role mappings for the user or group, and the app
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
    realm: string,
    groupId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdQueryKey = (realm: string,
    groupId: string,
    clientId: string,) => {
    return [`/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}`] as const;
    }

    
export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>, TError = unknown>(realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdQueryKey(realm,groupId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(realm,groupId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId && clientId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get client-level role mappings for the user or group, and the app
 */

export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdInfiniteQueryOptions(realm,groupId,clientId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError = unknown>(realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdQueryKey(realm,groupId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(realm,groupId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId && clientId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get client-level role mappings for the user or group, and the app
 */

export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdQueryOptions(realm,groupId,clientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Add client-level roles to the user or group role mapping
 */
export const postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
    realm: string,
    groupId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError,{realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError,{realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, {realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}> = (props) => {
          const {realm,groupId,clientId,data} = props ?? {};

          return  postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(realm,groupId,clientId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>
    export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationBody = RoleRepresentation[]
    export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationError = unknown

    /**
 * @summary Add client-level roles to the user or group role mapping
 */
export const usePostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError,{realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>,
        TError,
        {realm: string;groupId: string;clientId: string;data: RoleRepresentation[]},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete client-level roles from user or group role mapping
 */
export const deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
    realm: string,
    groupId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError,{realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError,{realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, {realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}> = (props) => {
          const {realm,groupId,clientId,data} = props ?? {};

          return  deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(realm,groupId,clientId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>
    export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationBody = RoleRepresentation[]
    export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationError = unknown

    /**
 * @summary Delete client-level roles from user or group role mapping
 */
export const useDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>, TError,{realm: string;groupId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>,
        TError,
        {realm: string;groupId: string;clientId: string;data: RoleRepresentation[]},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get available client-level roles that can be mapped to the user or group
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable = (
    realm: string,
    groupId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}/available`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableQueryKey = (realm: string,
    groupId: string,
    clientId: string,) => {
    return [`/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}/available`] as const;
    }

    
export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableQueryKey(realm,groupId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable(realm,groupId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId && clientId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get available client-level roles that can be mapped to the user or group
 */

export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableInfiniteQueryOptions(realm,groupId,clientId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableQueryKey(realm,groupId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable(realm,groupId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId && clientId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get available client-level roles that can be mapped to the user or group
 */

export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableQueryOptions(realm,groupId,clientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite = (
    realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}/composite`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryKey = (realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams,) => {
    return [`/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}/composite`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryKey(realm,groupId,clientId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite(realm,groupId,clientId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId && clientId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params: undefined |  GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */

export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeInfiniteQueryOptions(realm,groupId,clientId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryKey(realm,groupId,clientId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite(realm,groupId,clientId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId && clientId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params: undefined |  GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */

export function useGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeQueryOptions(realm,groupId,clientId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get client-level role mappings for the user or group, and the app
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
    realm: string,
    userId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdQueryKey = (realm: string,
    userId: string,
    clientId: string,) => {
    return [`/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}`] as const;
    }

    
export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>, TError = unknown>(realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdQueryKey(realm,userId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>> = ({ signal }) => getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(realm,userId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && userId && clientId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfiniteQueryError = unknown


export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get client-level role mappings for the user or group, and the app
 */

export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdInfiniteQueryOptions(realm,userId,clientId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError = unknown>(realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdQueryKey(realm,userId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>> = ({ signal }) => getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(realm,userId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && userId && clientId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdQueryError = unknown


export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get client-level role mappings for the user or group, and the app
 */

export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdQueryOptions(realm,userId,clientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Add client-level roles to the user or group role mapping
 */
export const postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
    realm: string,
    userId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError,{realm: string;userId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError,{realm: string;userId: string;clientId: string;data: RoleRepresentation[]}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, {realm: string;userId: string;clientId: string;data: RoleRepresentation[]}> = (props) => {
          const {realm,userId,clientId,data} = props ?? {};

          return  postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(realm,userId,clientId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>
    export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationBody = RoleRepresentation[]
    export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationError = unknown

    /**
 * @summary Add client-level roles to the user or group role mapping
 */
export const usePostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError,{realm: string;userId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>,
        TError,
        {realm: string;userId: string;clientId: string;data: RoleRepresentation[]},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete client-level roles from user or group role mapping
 */
export const deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
    realm: string,
    userId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError,{realm: string;userId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError,{realm: string;userId: string;clientId: string;data: RoleRepresentation[]}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, {realm: string;userId: string;clientId: string;data: RoleRepresentation[]}> = (props) => {
          const {realm,userId,clientId,data} = props ?? {};

          return  deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(realm,userId,clientId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>
    export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationBody = RoleRepresentation[]
    export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationError = unknown

    /**
 * @summary Delete client-level roles from user or group role mapping
 */
export const useDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>, TError,{realm: string;userId: string;clientId: string;data: RoleRepresentation[]}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>,
        TError,
        {realm: string;userId: string;clientId: string;data: RoleRepresentation[]},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get available client-level roles that can be mapped to the user or group
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable = (
    realm: string,
    userId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}/available`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableQueryKey = (realm: string,
    userId: string,
    clientId: string,) => {
    return [`/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}/available`] as const;
    }

    
export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableQueryKey(realm,userId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>> = ({ signal }) => getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable(realm,userId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && userId && clientId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfiniteQueryError = unknown


export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get available client-level roles that can be mapped to the user or group
 */

export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableInfiniteQueryOptions(realm,userId,clientId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableQueryKey(realm,userId,clientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>> = ({ signal }) => getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable(realm,userId,clientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && userId && clientId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableQueryError = unknown


export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get available client-level roles that can be mapped to the user or group
 */

export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableQueryOptions(realm,userId,clientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite = (
    realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}/composite`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryKey = (realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams,) => {
    return [`/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}/composite`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryKey(realm,userId,clientId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite(realm,userId,clientId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && userId && clientId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfiniteQueryError = unknown


export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params: undefined |  GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */

export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, QueryKey, GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeInfiniteQueryOptions(realm,userId,clientId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryKey(realm,userId,clientId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>> = ({ signal }) => getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite(realm,userId,clientId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && userId && clientId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryError = unknown


export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params: undefined |  GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */

export function useGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError = unknown>(
 realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeQueryOptions(realm,userId,clientId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



