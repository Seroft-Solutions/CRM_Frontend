/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams,
  GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams,
  RoleRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get client-level role mappings for the user or group, and the app
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
    realm: string,
    groupId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add client-level roles to the user or group role mapping
 */
export const postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
    realm: string,
    groupId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Delete client-level roles from user or group role mapping
 */
export const deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId = (
    realm: string,
    groupId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get available client-level roles that can be mapped to the user or group
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable = (
    realm: string,
    groupId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}/available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite = (
    realm: string,
    groupId: string,
    clientId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/clients/${clientId}/composite`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Get client-level role mappings for the user or group, and the app
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
    realm: string,
    userId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add client-level roles to the user or group role mapping
 */
export const postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
    realm: string,
    userId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Delete client-level roles from user or group role mapping
 */
export const deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId = (
    realm: string,
    userId: string,
    clientId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get available client-level roles that can be mapped to the user or group
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable = (
    realm: string,
    userId: string,
    clientId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}/available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get effective client-level role mappings This recurses any composite roles
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite = (
    realm: string,
    userId: string,
    clientId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/clients/${clientId}/composite`, method: 'GET',
        params
    },
      options);
    }
  export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>
export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>
export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>
export type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>
export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite>>>
