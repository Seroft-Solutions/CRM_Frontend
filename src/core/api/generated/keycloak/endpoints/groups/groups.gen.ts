/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmGroupsCount200,
  GetAdminRealmsRealmGroupsCountParams,
  GetAdminRealmsRealmGroupsGroupIdChildrenParams,
  GetAdminRealmsRealmGroupsGroupIdMembersParams,
  GetAdminRealmsRealmGroupsParams,
  GroupRepresentation,
  ManagementPermissionReference,
  UserRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get group hierarchy.  Only `name` and `id` are returned.  `subGroups` are only returned when using the `search` or `q` parameter. If none of these parameters is provided, the top-level groups are returned without `subGroups` being filled.
 */
export const getAdminRealmsRealmGroups = (
    realm: string,
    params?: GetAdminRealmsRealmGroupsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GroupRepresentation[]>(
      {url: `/admin/realms/${realm}/groups`, method: 'GET',
        params
    },
      options);
    }
  /**
 * This will update the group and set the parent if it exists. Create it and set the parent if the group doesn‚Äôt exist.
 * @summary create or add a top level realm groupSet or create child.
 */
export const postAdminRealmsRealmGroups = (
    realm: string,
    groupRepresentation: GroupRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: groupRepresentation
    },
      options);
    }
  /**
 * @summary Returns the groups counts.
 */
export const getAdminRealmsRealmGroupsCount = (
    realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmGroupsCount200>(
      {url: `/admin/realms/${realm}/groups/count`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GroupRepresentation>(
      {url: `/admin/realms/${realm}/groups/${groupId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update group, ignores subgroups.
 */
export const putAdminRealmsRealmGroupsGroupId = (
    realm: string,
    groupId: string,
    groupRepresentation: GroupRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: groupRepresentation
    },
      options);
    }
  export const deleteAdminRealmsRealmGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
 */
export const getAdminRealmsRealmGroupsGroupIdChildren = (
    realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GroupRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/children`, method: 'GET',
        params
    },
      options);
    }
  /**
 * This will just set the parent if it exists. Create it and set the parent if the group doesn‚Äôt exist.
 * @summary Set or create child.
 */
export const postAdminRealmsRealmGroupsGroupIdChildren = (
    realm: string,
    groupId: string,
    groupRepresentation: GroupRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/children`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: groupRepresentation
    },
      options);
    }
  /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmGroupsGroupIdManagementPermissions = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/groups/${groupId}/management/permissions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmGroupsGroupIdManagementPermissions = (
    realm: string,
    groupId: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/groups/${groupId}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  /**
 * @summary Get users Returns a stream of users, filtered according to query parameters
 */
export const getAdminRealmsRealmGroupsGroupIdMembers = (
    realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/members`, method: 'GET',
        params
    },
      options);
    }
  export type GetAdminRealmsRealmGroupsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>>
export type PostAdminRealmsRealmGroupsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmGroups>>>
export type GetAdminRealmsRealmGroupsCountResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>>
export type GetAdminRealmsRealmGroupsGroupIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>
export type PutAdminRealmsRealmGroupsGroupIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupId>>>
export type DeleteAdminRealmsRealmGroupsGroupIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupId>>>
export type GetAdminRealmsRealmGroupsGroupIdChildrenResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>>
export type PostAdminRealmsRealmGroupsGroupIdChildrenResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdChildren>>>
export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>
export type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupIdManagementPermissions>>>
export type GetAdminRealmsRealmGroupsGroupIdMembersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>>
