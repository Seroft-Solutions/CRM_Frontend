/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAdminRealmsRealmGroupsCount200,
  GetAdminRealmsRealmGroupsCountParams,
  GetAdminRealmsRealmGroupsGroupIdChildrenParams,
  GetAdminRealmsRealmGroupsGroupIdMembersParams,
  GetAdminRealmsRealmGroupsParams,
  GroupRepresentation,
  ManagementPermissionReference,
  UserRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get group hierarchy.  Only `name` and `id` are returned.  `subGroups` are only returned when using the `search` or `q` parameter. If none of these parameters is provided, the top-level groups are returned without `subGroups` being filled.
 */
export const getAdminRealmsRealmGroups = (
    realm: string,
    params?: GetAdminRealmsRealmGroupsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GroupRepresentation[]>(
      {url: `/admin/realms/${realm}/groups`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsQueryKey = (realm: string,
    params?: GetAdminRealmsRealmGroupsParams,) => {
    return [`/admin/realms/${realm}/groups`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmGroupsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, GetAdminRealmsRealmGroupsParams['first']>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey, GetAdminRealmsRealmGroupsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey, GetAdminRealmsRealmGroupsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmGroups(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey, GetAdminRealmsRealmGroupsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>>
export type GetAdminRealmsRealmGroupsInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, GetAdminRealmsRealmGroupsParams['first']>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmGroupsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey, GetAdminRealmsRealmGroupsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, GetAdminRealmsRealmGroupsParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey, GetAdminRealmsRealmGroupsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, GetAdminRealmsRealmGroupsParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey, GetAdminRealmsRealmGroupsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get group hierarchy.  Only `name` and `id` are returned.  `subGroups` are only returned when using the `search` or `q` parameter. If none of these parameters is provided, the top-level groups are returned without `subGroups` being filled.
 */

export function useGetAdminRealmsRealmGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, GetAdminRealmsRealmGroupsParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, QueryKey, GetAdminRealmsRealmGroupsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>> = ({ signal }) => getAdminRealmsRealmGroups(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>>
export type GetAdminRealmsRealmGroupsQueryError = unknown


export function useGetAdminRealmsRealmGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmGroupsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get group hierarchy.  Only `name` and `id` are returned.  `subGroups` are only returned when using the `search` or `q` parameter. If none of these parameters is provided, the top-level groups are returned without `subGroups` being filled.
 */

export function useGetAdminRealmsRealmGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This will update the group and set the parent if it exists. Create it and set the parent if the group doesn‚Äôt exist.
 * @summary create or add a top level realm groupSet or create child.
 */
export const postAdminRealmsRealmGroups = (
    realm: string,
    groupRepresentation: GroupRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: groupRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmGroupsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroups>>, TError,{realm: string;data: GroupRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroups>>, TError,{realm: string;data: GroupRepresentation}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmGroups'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmGroups>>, {realm: string;data: GroupRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  postAdminRealmsRealmGroups(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmGroupsMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmGroups>>>
    export type PostAdminRealmsRealmGroupsMutationBody = GroupRepresentation
    export type PostAdminRealmsRealmGroupsMutationError = unknown

    /**
 * @summary create or add a top level realm groupSet or create child.
 */
export const usePostAdminRealmsRealmGroups = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroups>>, TError,{realm: string;data: GroupRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmGroups>>,
        TError,
        {realm: string;data: GroupRepresentation},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmGroupsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Returns the groups counts.
 */
export const getAdminRealmsRealmGroupsCount = (
    realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GetAdminRealmsRealmGroupsCount200>(
      {url: `/admin/realms/${realm}/groups/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsCountQueryKey = (realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams,) => {
    return [`/admin/realms/${realm}/groups/count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmGroupsCountInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, GetAdminRealmsRealmGroupsCountParams['first']>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey, GetAdminRealmsRealmGroupsCountParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsCountQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey, GetAdminRealmsRealmGroupsCountParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmGroupsCount(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey, GetAdminRealmsRealmGroupsCountParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsCountInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>>
export type GetAdminRealmsRealmGroupsCountInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, GetAdminRealmsRealmGroupsCountParams['first']>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmGroupsCountParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey, GetAdminRealmsRealmGroupsCountParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, GetAdminRealmsRealmGroupsCountParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey, GetAdminRealmsRealmGroupsCountParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, GetAdminRealmsRealmGroupsCountParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey, GetAdminRealmsRealmGroupsCountParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the groups counts.
 */

export function useGetAdminRealmsRealmGroupsCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, GetAdminRealmsRealmGroupsCountParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, QueryKey, GetAdminRealmsRealmGroupsCountParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsCountInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsCountQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsCountQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>> = ({ signal }) => getAdminRealmsRealmGroupsCount(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsCountQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>>
export type GetAdminRealmsRealmGroupsCountQueryError = unknown


export function useGetAdminRealmsRealmGroupsCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmGroupsCountParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the groups counts.
 */

export function useGetAdminRealmsRealmGroupsCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmGroupsCountParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsCountQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GroupRepresentation>(
      {url: `/admin/realms/${realm}/groups/${groupId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsGroupIdQueryKey = (realm: string,
    groupId: string,) => {
    return [`/admin/realms/${realm}/groups/${groupId}`] as const;
    }

    
export const getGetAdminRealmsRealmGroupsGroupIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>, TError = unknown>(realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdQueryKey(realm,groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupId(realm,groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>
export type GetAdminRealmsRealmGroupsGroupIdInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>, TError = unknown>(
 realm: string,
    groupId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmGroupsGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdInfiniteQueryOptions(realm,groupId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError = unknown>(realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdQueryKey(realm,groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupId(realm,groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>>
export type GetAdminRealmsRealmGroupsGroupIdQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError = unknown>(
 realm: string,
    groupId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmGroupsGroupId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdQueryOptions(realm,groupId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update group, ignores subgroups.
 */
export const putAdminRealmsRealmGroupsGroupId = (
    realm: string,
    groupId: string,
    groupRepresentation: GroupRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: groupRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmGroupsGroupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupId>>, TError,{realm: string;groupId: string;data: GroupRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupId>>, TError,{realm: string;groupId: string;data: GroupRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmGroupsGroupId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupId>>, {realm: string;groupId: string;data: GroupRepresentation}> = (props) => {
          const {realm,groupId,data} = props ?? {};

          return  putAdminRealmsRealmGroupsGroupId(realm,groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmGroupsGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupId>>>
    export type PutAdminRealmsRealmGroupsGroupIdMutationBody = GroupRepresentation
    export type PutAdminRealmsRealmGroupsGroupIdMutationError = unknown

    /**
 * @summary Update group, ignores subgroups.
 */
export const usePutAdminRealmsRealmGroupsGroupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupId>>, TError,{realm: string;groupId: string;data: GroupRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupId>>,
        TError,
        {realm: string;groupId: string;data: GroupRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmGroupsGroupIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmGroupsGroupIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmGroupsGroupId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupId>>, {realm: string;groupId: string}> = (props) => {
          const {realm,groupId} = props ?? {};

          return  deleteAdminRealmsRealmGroupsGroupId(realm,groupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmGroupsGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupId>>>
    
    export type DeleteAdminRealmsRealmGroupsGroupIdMutationError = unknown

    export const useDeleteAdminRealmsRealmGroupsGroupId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupId>>,
        TError,
        {realm: string;groupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmGroupsGroupIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
 */
export const getAdminRealmsRealmGroupsGroupIdChildren = (
    realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GroupRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/children`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsGroupIdChildrenQueryKey = (realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams,) => {
    return [`/admin/realms/${realm}/groups/${groupId}/children`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmGroupsGroupIdChildrenInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>, TError = unknown>(realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdChildrenQueryKey(realm,groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmGroupsGroupIdChildren(realm,groupId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdChildrenInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>>
export type GetAdminRealmsRealmGroupsGroupIdChildrenInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdChildrenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params: undefined |  GetAdminRealmsRealmGroupsGroupIdChildrenParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdChildrenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdChildrenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
 */

export function useGetAdminRealmsRealmGroupsGroupIdChildrenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdChildrenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdChildrenInfiniteQueryOptions(realm,groupId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsGroupIdChildrenQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError = unknown>(realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdChildrenQueryKey(realm,groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdChildren(realm,groupId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdChildrenQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>>
export type GetAdminRealmsRealmGroupsGroupIdChildrenQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdChildren<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError = unknown>(
 realm: string,
    groupId: string,
    params: undefined |  GetAdminRealmsRealmGroupsGroupIdChildrenParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdChildren<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdChildren<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
 */

export function useGetAdminRealmsRealmGroupsGroupIdChildren<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdChildrenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdChildren>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdChildrenQueryOptions(realm,groupId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This will just set the parent if it exists. Create it and set the parent if the group doesn‚Äôt exist.
 * @summary Set or create child.
 */
export const postAdminRealmsRealmGroupsGroupIdChildren = (
    realm: string,
    groupId: string,
    groupRepresentation: GroupRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/children`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: groupRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmGroupsGroupIdChildrenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdChildren>>, TError,{realm: string;groupId: string;data: GroupRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdChildren>>, TError,{realm: string;groupId: string;data: GroupRepresentation}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmGroupsGroupIdChildren'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdChildren>>, {realm: string;groupId: string;data: GroupRepresentation}> = (props) => {
          const {realm,groupId,data} = props ?? {};

          return  postAdminRealmsRealmGroupsGroupIdChildren(realm,groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmGroupsGroupIdChildrenMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdChildren>>>
    export type PostAdminRealmsRealmGroupsGroupIdChildrenMutationBody = GroupRepresentation
    export type PostAdminRealmsRealmGroupsGroupIdChildrenMutationError = unknown

    /**
 * @summary Set or create child.
 */
export const usePostAdminRealmsRealmGroupsGroupIdChildren = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdChildren>>, TError,{realm: string;groupId: string;data: GroupRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdChildren>>,
        TError,
        {realm: string;groupId: string;data: GroupRepresentation},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmGroupsGroupIdChildrenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmGroupsGroupIdManagementPermissions = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/groups/${groupId}/management/permissions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsGroupIdManagementPermissionsQueryKey = (realm: string,
    groupId: string,) => {
    return [`/admin/realms/${realm}/groups/${groupId}/management/permissions`] as const;
    }

    
export const getGetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>, TError = unknown>(realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdManagementPermissionsQueryKey(realm,groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdManagementPermissions(realm,groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>
export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>, TError = unknown>(
 realm: string,
    groupId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */

export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdManagementPermissionsInfiniteQueryOptions(realm,groupId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsGroupIdManagementPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError = unknown>(realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdManagementPermissionsQueryKey(realm,groupId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdManagementPermissions(realm,groupId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>>
export type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError = unknown>(
 realm: string,
    groupId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */

export function useGetAdminRealmsRealmGroupsGroupIdManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError = unknown>(
 realm: string,
    groupId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdManagementPermissionsQueryOptions(realm,groupId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmGroupsGroupIdManagementPermissions = (
    realm: string,
    groupId: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/groups/${groupId}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  


export const getPutAdminRealmsRealmGroupsGroupIdManagementPermissionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError,{realm: string;groupId: string;data: ManagementPermissionReference}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError,{realm: string;groupId: string;data: ManagementPermissionReference}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmGroupsGroupIdManagementPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupIdManagementPermissions>>, {realm: string;groupId: string;data: ManagementPermissionReference}> = (props) => {
          const {realm,groupId,data} = props ?? {};

          return  putAdminRealmsRealmGroupsGroupIdManagementPermissions(realm,groupId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupIdManagementPermissions>>>
    export type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsMutationBody = ManagementPermissionReference
    export type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsMutationError = unknown

    /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const usePutAdminRealmsRealmGroupsGroupIdManagementPermissions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupIdManagementPermissions>>, TError,{realm: string;groupId: string;data: ManagementPermissionReference}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmGroupsGroupIdManagementPermissions>>,
        TError,
        {realm: string;groupId: string;data: ManagementPermissionReference},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmGroupsGroupIdManagementPermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get users Returns a stream of users, filtered according to query parameters
 */
export const getAdminRealmsRealmGroupsGroupIdMembers = (
    realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<UserRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/members`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupsGroupIdMembersQueryKey = (realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams,) => {
    return [`/admin/realms/${realm}/groups/${groupId}/members`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmGroupsGroupIdMembersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>, TError = unknown>(realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdMembersQueryKey(realm,groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmGroupsGroupIdMembers(realm,groupId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdMembersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>>
export type GetAdminRealmsRealmGroupsGroupIdMembersInfiniteQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params: undefined |  GetAdminRealmsRealmGroupsGroupIdMembersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get users Returns a stream of users, filtered according to query parameters
 */

export function useGetAdminRealmsRealmGroupsGroupIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, QueryKey, GetAdminRealmsRealmGroupsGroupIdMembersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdMembersInfiniteQueryOptions(realm,groupId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupsGroupIdMembersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError = unknown>(realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupsGroupIdMembersQueryKey(realm,groupId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>> = ({ signal }) => getAdminRealmsRealmGroupsGroupIdMembers(realm,groupId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && groupId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupsGroupIdMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>>
export type GetAdminRealmsRealmGroupsGroupIdMembersQueryError = unknown


export function useGetAdminRealmsRealmGroupsGroupIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError = unknown>(
 realm: string,
    groupId: string,
    params: undefined |  GetAdminRealmsRealmGroupsGroupIdMembersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupsGroupIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get users Returns a stream of users, filtered according to query parameters
 */

export function useGetAdminRealmsRealmGroupsGroupIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError = unknown>(
 realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdMembers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupsGroupIdMembersQueryOptions(realm,groupId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



