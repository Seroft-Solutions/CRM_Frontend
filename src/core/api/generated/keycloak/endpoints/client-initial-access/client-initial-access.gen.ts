/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ClientInitialAccessCreatePresentation,
  ClientInitialAccessPresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getAdminRealmsRealmClientsInitialAccess = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientInitialAccessPresentation[]>(
      {url: `/admin/realms/${realm}/clients-initial-access`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsInitialAccessQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/clients-initial-access`] as const;
    }

    
export const getGetAdminRealmsRealmClientsInitialAccessInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>>, TError = unknown>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsInitialAccessQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>> = ({ signal }) => getAdminRealmsRealmClientsInitialAccess(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsInitialAccessInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>>
export type GetAdminRealmsRealmClientsInitialAccessInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsInitialAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>>, TError = unknown>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsInitialAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsInitialAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsInitialAccessInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsInitialAccessInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsInitialAccessQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError = unknown>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsInitialAccessQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>> = ({ signal }) => getAdminRealmsRealmClientsInitialAccess(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsInitialAccessQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>>
export type GetAdminRealmsRealmClientsInitialAccessQueryError = unknown


export function useGetAdminRealmsRealmClientsInitialAccess<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError = unknown>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsInitialAccess<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsInitialAccess<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsInitialAccess<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsInitialAccess>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsInitialAccessQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new initial access token.
 */
export const postAdminRealmsRealmClientsInitialAccess = (
    realm: string,
    clientInitialAccessCreatePresentation: ClientInitialAccessCreatePresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientInitialAccessCreatePresentation>(
      {url: `/admin/realms/${realm}/clients-initial-access`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clientInitialAccessCreatePresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsInitialAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsInitialAccess>>, TError,{realm: string;data: ClientInitialAccessCreatePresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsInitialAccess>>, TError,{realm: string;data: ClientInitialAccessCreatePresentation}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsInitialAccess'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsInitialAccess>>, {realm: string;data: ClientInitialAccessCreatePresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  postAdminRealmsRealmClientsInitialAccess(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsInitialAccessMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsInitialAccess>>>
    export type PostAdminRealmsRealmClientsInitialAccessMutationBody = ClientInitialAccessCreatePresentation
    export type PostAdminRealmsRealmClientsInitialAccessMutationError = unknown

    /**
 * @summary Create a new initial access token.
 */
export const usePostAdminRealmsRealmClientsInitialAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsInitialAccess>>, TError,{realm: string;data: ClientInitialAccessCreatePresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsInitialAccess>>,
        TError,
        {realm: string;data: ClientInitialAccessCreatePresentation},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsInitialAccessMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmClientsInitialAccessId = (
    realm: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients-initial-access/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsInitialAccessIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsInitialAccessId>>, TError,{realm: string;id: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsInitialAccessId>>, TError,{realm: string;id: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsInitialAccessId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsInitialAccessId>>, {realm: string;id: string}> = (props) => {
          const {realm,id} = props ?? {};

          return  deleteAdminRealmsRealmClientsInitialAccessId(realm,id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsInitialAccessIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsInitialAccessId>>>
    
    export type DeleteAdminRealmsRealmClientsInitialAccessIdMutationError = unknown

    export const useDeleteAdminRealmsRealmClientsInitialAccessId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsInitialAccessId>>, TError,{realm: string;id: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsInitialAccessId>>,
        TError,
        {realm: string;id: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsInitialAccessIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    