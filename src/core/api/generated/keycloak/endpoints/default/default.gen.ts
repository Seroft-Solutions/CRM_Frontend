/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  AbstractPolicyRepresentation,
  DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams,
  PolicyEvaluationRequest,
  PolicyEvaluationResponse,
  PolicyProviderRepresentation,
  PolicyRepresentation,
  PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
  PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
  ResourceRepresentation,
  ResourceServerRepresentation,
  ScopeRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServer = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ResourceServerRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmClientsClientUuidAuthzResourceServer = (
    realm: string,
    clientUuid: string,
    resourceServerRepresentation: ResourceServerRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: resourceServerRepresentation
    },
      options);
    }
  export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport = (
    realm: string,
    clientUuid: string,
    resourceServerRepresentation: ResourceServerRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/import`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resourceServerRepresentation
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AbstractPolicyRepresentation[] | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission`, method: 'GET',
        params
    },
      options);
    }
  export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission = (
    realm: string,
    clientUuid: string,
    postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionBody
    },
      options);
    }
  export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate = (
    realm: string,
    clientUuid: string,
    policyEvaluationRequest: PolicyEvaluationRequest,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PolicyEvaluationResponse>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/evaluate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: policyEvaluationRequest
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PolicyProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/providers`, method: 'GET'
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AbstractPolicyRepresentation | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/search`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AbstractPolicyRepresentation[] | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy`, method: 'GET',
        params
    },
      options);
    }
  export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy = (
    realm: string,
    clientUuid: string,
    postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyBody
    },
      options);
    }
  export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate = (
    realm: string,
    clientUuid: string,
    policyEvaluationRequest: PolicyEvaluationRequest,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PolicyEvaluationResponse>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/evaluate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: policyEvaluationRequest
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PolicyProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/providers`, method: 'GET'
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AbstractPolicyRepresentation | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/search`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ResourceRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource`, method: 'GET',
        params
    },
      options);
    }
  export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource = (
    realm: string,
    clientUuid: string,
    resourceRepresentation: NonReadonly<ResourceRepresentation>,
    params?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ResourceRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resourceRepresentation,
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ResourceRepresentation | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/search`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ResourceRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}`, method: 'GET',
        params
    },
      options);
    }
  export const putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    resourceRepresentation: NonReadonly<ResourceRepresentation>,
    params?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: resourceRepresentation,
        params
    },
      options);
    }
  export const deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}`, method: 'DELETE',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/attributes`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PolicyRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/permissions`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/scopes`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope`, method: 'GET',
        params
    },
      options);
    }
  export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope = (
    realm: string,
    clientUuid: string,
    scopeRepresentation: ScopeRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: scopeRepresentation
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ScopeRepresentation[] | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/search`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ScopeRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
    realm: string,
    clientUuid: string,
    scopeId: string,
    scopeRepresentation: ScopeRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: scopeRepresentation
    },
      options);
    }
  export const deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}`, method: 'DELETE'
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PolicyRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}/permissions`, method: 'GET'
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ResourceRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}/resources`, method: 'GET'
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ResourceServerRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/settings`, method: 'GET'
    },
      options);
    }
  