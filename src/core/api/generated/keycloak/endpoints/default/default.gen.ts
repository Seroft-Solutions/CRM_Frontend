/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AbstractPolicyRepresentation,
  DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams,
  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams,
  PolicyEvaluationRequest,
  PolicyEvaluationResponse,
  PolicyProviderRepresentation,
  PolicyRepresentation,
  PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
  PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
  ResourceRepresentation,
  ResourceServerRepresentation,
  ScopeRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServer = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ResourceServerRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServer(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServer(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServer<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServer<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServer<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServer<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmClientsClientUuidAuthzResourceServer = (
    realm: string,
    clientUuid: string,
    resourceServerRepresentation: ResourceServerRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: resourceServerRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientsClientUuidAuthzResourceServerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError,{realm: string;clientUuid: string;data: ResourceServerRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError,{realm: string;clientUuid: string;data: ResourceServerRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientsClientUuidAuthzResourceServer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, {realm: string;clientUuid: string;data: ResourceServerRepresentation}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  putAdminRealmsRealmClientsClientUuidAuthzResourceServer(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServer>>>
    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerMutationBody = ResourceServerRepresentation
    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerMutationError = unknown

    export const usePutAdminRealmsRealmClientsClientUuidAuthzResourceServer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServer>>, TError,{realm: string;clientUuid: string;data: ResourceServerRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServer>>,
        TError,
        {realm: string;clientUuid: string;data: ResourceServerRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientsClientUuidAuthzResourceServerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport = (
    realm: string,
    clientUuid: string,
    resourceServerRepresentation: ResourceServerRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/import`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resourceServerRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport>>, TError,{realm: string;clientUuid: string;data: ResourceServerRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport>>, TError,{realm: string;clientUuid: string;data: ResourceServerRepresentation}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport>>, {realm: string;clientUuid: string;data: ResourceServerRepresentation}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport>>>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportMutationBody = ResourceServerRepresentation
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportMutationError = unknown

    export const usePostAdminRealmsRealmClientsClientUuidAuthzResourceServerImport = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport>>, TError,{realm: string;clientUuid: string;data: ResourceServerRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerImport>>,
        TError,
        {realm: string;clientUuid: string;data: ResourceServerRepresentation},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<AbstractPolicyRepresentation[] | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission = (
    realm: string,
    clientUuid: string,
    postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError,{realm: string;clientUuid: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError,{realm: string;clientUuid: string;data: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, {realm: string;clientUuid: string;data: string}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionMutationBody = string
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionMutationError = unknown

    export const usePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>, TError,{realm: string;clientUuid: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission>>,
        TError,
        {realm: string;clientUuid: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate = (
    realm: string,
    clientUuid: string,
    policyEvaluationRequest: PolicyEvaluationRequest,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<PolicyEvaluationResponse>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/evaluate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: policyEvaluationRequest, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate>>, TError,{realm: string;clientUuid: string;data: PolicyEvaluationRequest}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate>>, TError,{realm: string;clientUuid: string;data: PolicyEvaluationRequest}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate>>, {realm: string;clientUuid: string;data: PolicyEvaluationRequest}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate>>>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateMutationBody = PolicyEvaluationRequest
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateMutationError = void

    export const usePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate>>, TError,{realm: string;clientUuid: string;data: PolicyEvaluationRequest}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate>>,
        TError,
        {realm: string;clientUuid: string;data: PolicyEvaluationRequest},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<PolicyProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/providers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/providers`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<AbstractPolicyRepresentation | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/permission/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<AbstractPolicyRepresentation[] | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy = (
    realm: string,
    clientUuid: string,
    postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError,{realm: string;clientUuid: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError,{realm: string;clientUuid: string;data: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, {realm: string;clientUuid: string;data: string}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyMutationBody = string
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyMutationError = unknown

    export const usePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>, TError,{realm: string;clientUuid: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy>>,
        TError,
        {realm: string;clientUuid: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate = (
    realm: string,
    clientUuid: string,
    policyEvaluationRequest: PolicyEvaluationRequest,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<PolicyEvaluationResponse>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/evaluate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: policyEvaluationRequest, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate>>, TError,{realm: string;clientUuid: string;data: PolicyEvaluationRequest}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate>>, TError,{realm: string;clientUuid: string;data: PolicyEvaluationRequest}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate>>, {realm: string;clientUuid: string;data: PolicyEvaluationRequest}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate>>>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateMutationBody = PolicyEvaluationRequest
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateMutationError = void

    export const usePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate>>, TError,{realm: string;clientUuid: string;data: PolicyEvaluationRequest}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate>>,
        TError,
        {realm: string;clientUuid: string;data: PolicyEvaluationRequest},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<PolicyProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/providers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/providers`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<AbstractPolicyRepresentation | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/policy/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ResourceRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource = (
    realm: string,
    clientUuid: string,
    resourceRepresentation: NonReadonly<ResourceRepresentation>,
    params?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ResourceRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resourceRepresentation,
        params, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError,{realm: string;clientUuid: string;data: NonReadonly<ResourceRepresentation>;params?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError,{realm: string;clientUuid: string;data: NonReadonly<ResourceRepresentation>;params?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, {realm: string;clientUuid: string;data: NonReadonly<ResourceRepresentation>;params?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams}> = (props) => {
          const {realm,clientUuid,data,params} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(realm,clientUuid,data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceMutationBody = NonReadonly<ResourceRepresentation>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceMutationError = void

    export const usePostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>, TError,{realm: string;clientUuid: string;data: NonReadonly<ResourceRepresentation>;params?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerResource>>,
        TError,
        {realm: string;clientUuid: string;data: NonReadonly<ResourceRepresentation>;params?: PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ResourceRepresentation | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ResourceRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryKey = (realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(realm,clientUuid,resourceId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdInfiniteQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError = void>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(realm,clientUuid,resourceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    resourceRepresentation: NonReadonly<ResourceRepresentation>,
    params?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: resourceRepresentation,
        params
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError,{realm: string;clientUuid: string;resourceId: string;data: NonReadonly<ResourceRepresentation>;params?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError,{realm: string;clientUuid: string;resourceId: string;data: NonReadonly<ResourceRepresentation>;params?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, {realm: string;clientUuid: string;resourceId: string;data: NonReadonly<ResourceRepresentation>;params?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}> = (props) => {
          const {realm,clientUuid,resourceId,data,params} = props ?? {};

          return  putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(realm,clientUuid,resourceId,data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>>
    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationBody = NonReadonly<ResourceRepresentation>
    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationError = void

    export const usePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError,{realm: string;clientUuid: string;resourceId: string;data: NonReadonly<ResourceRepresentation>;params?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>,
        TError,
        {realm: string;clientUuid: string;resourceId: string;data: NonReadonly<ResourceRepresentation>;params?: PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError,{realm: string;clientUuid: string;resourceId: string;params?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError,{realm: string;clientUuid: string;resourceId: string;params?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, {realm: string;clientUuid: string;resourceId: string;params?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}> = (props) => {
          const {realm,clientUuid,resourceId,params} = props ?? {};

          return  deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(realm,clientUuid,resourceId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>>
    
    export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationError = void

    export const useDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>, TError,{realm: string;clientUuid: string;resourceId: string;params?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId>>,
        TError,
        {realm: string;clientUuid: string;resourceId: string;params?: DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/attributes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryKey = (realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/attributes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>, TError = unknown>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes(realm,clientUuid,resourceId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesInfiniteQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError = unknown>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes(realm,clientUuid,resourceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<PolicyRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/permissions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryKey = (realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/permissions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions(realm,clientUuid,resourceId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsInfiniteQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError = void>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions(realm,clientUuid,resourceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes = (
    realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/scopes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryKey = (realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/resource/${resourceId}/scopes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes(realm,clientUuid,resourceId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesInfiniteQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError = void>(realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryKey(realm,clientUuid,resourceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes(realm,clientUuid,resourceId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && resourceId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError = void>(
 realm: string,
    clientUuid: string,
    resourceId: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesQueryOptions(realm,clientUuid,resourceId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope = (
    realm: string,
    clientUuid: string,
    scopeRepresentation: ScopeRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: scopeRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError,{realm: string;clientUuid: string;data: ScopeRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError,{realm: string;clientUuid: string;data: ScopeRepresentation}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, {realm: string;clientUuid: string;data: ScopeRepresentation}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>>
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeMutationBody = ScopeRepresentation
    export type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeMutationError = unknown

    export const usePostAdminRealmsRealmClientsClientUuidAuthzResourceServerScope = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>, TError,{realm: string;clientUuid: string;data: ScopeRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidAuthzResourceServerScope>>,
        TError,
        {realm: string;clientUuid: string;data: ScopeRepresentation},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ScopeRepresentation[] | void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/search`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, QueryKey, GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ScopeRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdQueryKey = (realm: string,
    clientUuid: string,
    scopeId: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>, TError = void>(realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdQueryKey(realm,clientUuid,scopeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(realm,clientUuid,scopeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && scopeId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdInfiniteQueryOptions(realm,clientUuid,scopeId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError = void>(realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdQueryKey(realm,clientUuid,scopeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(realm,clientUuid,scopeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && scopeId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdQueryOptions(realm,clientUuid,scopeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
    realm: string,
    clientUuid: string,
    scopeId: string,
    scopeRepresentation: ScopeRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: scopeRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError,{realm: string;clientUuid: string;scopeId: string;data: ScopeRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError,{realm: string;clientUuid: string;scopeId: string;data: ScopeRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, {realm: string;clientUuid: string;scopeId: string;data: ScopeRepresentation}> = (props) => {
          const {realm,clientUuid,scopeId,data} = props ?? {};

          return  putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(realm,clientUuid,scopeId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>
    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationBody = ScopeRepresentation
    export type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationError = unknown

    export const usePutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError,{realm: string;clientUuid: string;scopeId: string;data: ScopeRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>,
        TError,
        {realm: string;clientUuid: string;scopeId: string;data: ScopeRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError,{realm: string;clientUuid: string;scopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError,{realm: string;clientUuid: string;scopeId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, {realm: string;clientUuid: string;scopeId: string}> = (props) => {
          const {realm,clientUuid,scopeId} = props ?? {};

          return  deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(realm,clientUuid,scopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>>
    
    export type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationError = unknown

    export const useDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>, TError,{realm: string;clientUuid: string;scopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId>>,
        TError,
        {realm: string;clientUuid: string;scopeId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<PolicyRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}/permissions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsQueryKey = (realm: string,
    clientUuid: string,
    scopeId: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}/permissions`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>>, TError = void>(realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsQueryKey(realm,clientUuid,scopeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions(realm,clientUuid,scopeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && scopeId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsInfiniteQueryOptions(realm,clientUuid,scopeId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError = void>(realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsQueryKey(realm,clientUuid,scopeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions(realm,clientUuid,scopeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && scopeId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsQueryOptions(realm,clientUuid,scopeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources = (
    realm: string,
    clientUuid: string,
    scopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ResourceRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}/resources`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesQueryKey = (realm: string,
    clientUuid: string,
    scopeId: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/scope/${scopeId}/resources`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>>, TError = void>(realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesQueryKey(realm,clientUuid,scopeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources(realm,clientUuid,scopeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && scopeId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesInfiniteQueryOptions(realm,clientUuid,scopeId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError = void>(realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesQueryKey(realm,clientUuid,scopeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources(realm,clientUuid,scopeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && scopeId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError = void>(
 realm: string,
    clientUuid: string,
    scopeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesQueryOptions(realm,clientUuid,scopeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ResourceServerRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/authz/resource-server/settings`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>>
export type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



