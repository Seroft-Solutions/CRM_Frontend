/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams,
  GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams,
  MappingsRepresentation,
  RoleRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from "@/core/api/services/keycloak-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get role mappings
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappings = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<MappingsRepresentation>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get realm-level role mappings
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsRealm = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add realm-level role mappings to the user
 */
export const postAdminRealmsRealmGroupsGroupIdRoleMappingsRealm = (
    realm: string,
    groupId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/realm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Delete realm-level role mappings
 */
export const deleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm = (
    realm: string,
    groupId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/realm`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get realm-level roles that can be mapped
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/realm/available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get effective realm-level role mappings This will recurse all composite roles to get the result.
 */
export const getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite = (
    realm: string,
    groupId: string,
    params?: GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/groups/${groupId}/role-mappings/realm/composite`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Get role mappings
 */
export const getAdminRealmsRealmUsersUserIdRoleMappings = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<MappingsRepresentation>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get realm-level role mappings
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsRealm = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add realm-level role mappings to the user
 */
export const postAdminRealmsRealmUsersUserIdRoleMappingsRealm = (
    realm: string,
    userId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/realm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Delete realm-level role mappings
 */
export const deleteAdminRealmsRealmUsersUserIdRoleMappingsRealm = (
    realm: string,
    userId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/realm`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get realm-level roles that can be mapped
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/realm/available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get effective realm-level role mappings This will recurse all composite roles to get the result.
 */
export const getAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite = (
    realm: string,
    userId: string,
    params?: GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/role-mappings/realm/composite`, method: 'GET',
        params
    },
      options);
    }
  export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappings>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsRealm>>>
export type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmGroupsGroupIdRoleMappingsRealm>>>
export type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable>>>
export type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappings>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsRealm>>>
export type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdRoleMappingsRealm>>>
export type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdRoleMappingsRealm>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable>>>
export type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite>>>
