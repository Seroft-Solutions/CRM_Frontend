/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  ProtocolMapperRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Create multiple mappers
 */
export const postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels = (
    realm: string,
    clientScopeId: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/protocol-mappers/add-models`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Get mappers
 */
export const getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/protocol-mappers/models`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create a mapper
 */
export const postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels = (
    realm: string,
    clientScopeId: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/protocol-mappers/models`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Get mapper by id
 */
export const getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId = (
    realm: string,
    clientScopeId: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/protocol-mappers/models/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update the mapper
 */
export const putAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId = (
    realm: string,
    clientScopeId: string,
    id: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/protocol-mappers/models/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Delete the mapper
 */
export const deleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId = (
    realm: string,
    clientScopeId: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/protocol-mappers/models/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get mappers by name for a specific protocol
 */
export const getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol = (
    realm: string,
    clientScopeId: string,
    protocol: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/protocol-mappers/protocol/${protocol}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create multiple mappers
 */
export const postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels = (
    realm: string,
    clientScopeId: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/protocol-mappers/add-models`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Get mappers
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/protocol-mappers/models`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create a mapper
 */
export const postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels = (
    realm: string,
    clientScopeId: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/protocol-mappers/models`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Get mapper by id
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId = (
    realm: string,
    clientScopeId: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/protocol-mappers/models/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update the mapper
 */
export const putAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId = (
    realm: string,
    clientScopeId: string,
    id: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/protocol-mappers/models/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Delete the mapper
 */
export const deleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId = (
    realm: string,
    clientScopeId: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/protocol-mappers/models/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get mappers by name for a specific protocol
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol = (
    realm: string,
    clientScopeId: string,
    protocol: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/protocol-mappers/protocol/${protocol}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create multiple mappers
 */
export const postAdminRealmsRealmClientsClientUuidProtocolMappersAddModels = (
    realm: string,
    clientUuid: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/protocol-mappers/add-models`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Get mappers
 */
export const getAdminRealmsRealmClientsClientUuidProtocolMappersModels = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/protocol-mappers/models`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create a mapper
 */
export const postAdminRealmsRealmClientsClientUuidProtocolMappersModels = (
    realm: string,
    clientUuid: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/protocol-mappers/models`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Get mapper by id
 */
export const getAdminRealmsRealmClientsClientUuidProtocolMappersModelsId = (
    realm: string,
    clientUuid: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/protocol-mappers/models/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update the mapper
 */
export const putAdminRealmsRealmClientsClientUuidProtocolMappersModelsId = (
    realm: string,
    clientUuid: string,
    id: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/protocol-mappers/models/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: protocolMapperRepresentation
    },
      options);
    }
  /**
 * @summary Delete the mapper
 */
export const deleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId = (
    realm: string,
    clientUuid: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/protocol-mappers/models/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get mappers by name for a specific protocol
 */
export const getAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol = (
    realm: string,
    clientUuid: string,
    protocol: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/protocol-mappers/protocol/${protocol}`, method: 'GET'
    },
      options);
    }
  export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels>>>
export type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId>>>
export type PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId>>>
export type DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol>>>
export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels>>>
export type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId>>>
export type PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId>>>
export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol>>>
export type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidProtocolMappersAddModels>>>
export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidProtocolMappersModels>>>
export type PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidProtocolMappersModels>>>
export type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidProtocolMappersModelsId>>>
export type PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidProtocolMappersModelsId>>>
export type DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId>>>
export type GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol>>>
