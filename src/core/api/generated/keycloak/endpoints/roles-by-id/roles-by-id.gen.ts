/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmRolesByIdRoleIdCompositesParams,
  ManagementPermissionReference,
  RoleRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get a specific role's representation
 */
export const getAdminRealmsRealmRolesByIdRoleId = (
    realm: string,
    roleId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update the role
 */
export const putAdminRealmsRealmRolesByIdRoleId = (
    realm: string,
    roleId: string,
    roleRepresentation: RoleRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Delete the role
 */
export const deleteAdminRealmsRealmRolesByIdRoleId = (
    realm: string,
    roleId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get role's children Returns a set of role's children provided the role is a composite.
 */
export const getAdminRealmsRealmRolesByIdRoleIdComposites = (
    realm: string,
    roleId: string,
    params?: GetAdminRealmsRealmRolesByIdRoleIdCompositesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}/composites`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Make the role a composite role by associating some child roles
 */
export const postAdminRealmsRealmRolesByIdRoleIdComposites = (
    realm: string,
    roleId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}/composites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove a set of roles from the role's composite
 */
export const deleteAdminRealmsRealmRolesByIdRoleIdComposites = (
    realm: string,
    roleId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}/composites`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get client-level roles for the client that are in the role's composite
 */
export const getAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid = (
    realm: string,
    roleId: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}/composites/clients/${clientUuid}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get realm-level roles that are in the role's composite
 */
export const getAdminRealmsRealmRolesByIdRoleIdCompositesRealm = (
    realm: string,
    roleId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}/composites/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmRolesByIdRoleIdManagementPermissions = (
    realm: string,
    roleId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}/management/permissions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmRolesByIdRoleIdManagementPermissions = (
    realm: string,
    roleId: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/roles-by-id/${roleId}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  export type GetAdminRealmsRealmRolesByIdRoleIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesByIdRoleId>>>
export type PutAdminRealmsRealmRolesByIdRoleIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmRolesByIdRoleId>>>
export type DeleteAdminRealmsRealmRolesByIdRoleIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmRolesByIdRoleId>>>
export type GetAdminRealmsRealmRolesByIdRoleIdCompositesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesByIdRoleIdComposites>>>
export type PostAdminRealmsRealmRolesByIdRoleIdCompositesResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmRolesByIdRoleIdComposites>>>
export type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmRolesByIdRoleIdComposites>>>
export type GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid>>>
export type GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesByIdRoleIdCompositesRealm>>>
export type GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesByIdRoleIdManagementPermissions>>>
export type PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmRolesByIdRoleIdManagementPermissions>>>
