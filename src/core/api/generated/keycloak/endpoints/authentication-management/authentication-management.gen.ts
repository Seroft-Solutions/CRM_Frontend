/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  AuthenticationExecutionInfoRepresentation,
  AuthenticationExecutionRepresentation,
  AuthenticationFlowRepresentation,
  AuthenticatorConfigInfoRepresentation,
  AuthenticatorConfigRepresentation,
  GetAdminRealmsRealmAuthenticationAuthenticatorProviders200Item,
  GetAdminRealmsRealmAuthenticationClientAuthenticatorProviders200Item,
  GetAdminRealmsRealmAuthenticationFormActionProviders200Item,
  GetAdminRealmsRealmAuthenticationFormProviders200Item,
  GetAdminRealmsRealmAuthenticationPerClientConfigDescription200,
  GetAdminRealmsRealmAuthenticationUnregisteredRequiredActions200Item,
  PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyBody,
  PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionBody,
  PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowBody,
  PostAdminRealmsRealmAuthenticationRegisterRequiredActionBody,
  RequiredActionConfigInfoRepresentation,
  RequiredActionConfigRepresentation,
  RequiredActionProviderRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get authenticator providers Returns a stream of authenticator providers.
 */
export const getAdminRealmsRealmAuthenticationAuthenticatorProviders = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmAuthenticationAuthenticatorProviders200Item[]>(
      {url: `/admin/realms/${realm}/authentication/authenticator-providers`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get client authenticator providers Returns a stream of client authenticator providers.
 */
export const getAdminRealmsRealmAuthenticationClientAuthenticatorProviders = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmAuthenticationClientAuthenticatorProviders200Item[]>(
      {url: `/admin/realms/${realm}/authentication/client-authenticator-providers`, method: 'GET'
    },
      options);
    }
  /**
 * @deprecated
 * @summary Create new authenticator configuration
 */
export const postAdminRealmsRealmAuthenticationConfig = (
    realm: string,
    authenticatorConfigRepresentation: AuthenticatorConfigRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/config`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authenticatorConfigRepresentation
    },
      options);
    }
  /**
 * @summary Get authenticator provider's configuration description
 */
export const getAdminRealmsRealmAuthenticationConfigDescriptionProviderId = (
    realm: string,
    providerId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AuthenticatorConfigInfoRepresentation>(
      {url: `/admin/realms/${realm}/authentication/config-description/${providerId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get authenticator configuration
 */
export const getAdminRealmsRealmAuthenticationConfigId = (
    realm: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AuthenticatorConfigRepresentation>(
      {url: `/admin/realms/${realm}/authentication/config/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update authenticator configuration
 */
export const putAdminRealmsRealmAuthenticationConfigId = (
    realm: string,
    id: string,
    authenticatorConfigRepresentation: AuthenticatorConfigRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/config/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: authenticatorConfigRepresentation
    },
      options);
    }
  /**
 * @summary Delete authenticator configuration
 */
export const deleteAdminRealmsRealmAuthenticationConfigId = (
    realm: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/config/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Add new authentication execution
 */
export const postAdminRealmsRealmAuthenticationExecutions = (
    realm: string,
    authenticationExecutionRepresentation: AuthenticationExecutionRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/executions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authenticationExecutionRepresentation
    },
      options);
    }
  /**
 * @summary Get Single Execution
 */
export const getAdminRealmsRealmAuthenticationExecutionsExecutionId = (
    realm: string,
    executionId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AuthenticationExecutionRepresentation>(
      {url: `/admin/realms/${realm}/authentication/executions/${executionId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Delete execution
 */
export const deleteAdminRealmsRealmAuthenticationExecutionsExecutionId = (
    realm: string,
    executionId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/executions/${executionId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Update execution with new configuration
 */
export const postAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig = (
    realm: string,
    executionId: string,
    authenticatorConfigRepresentation: AuthenticatorConfigRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/executions/${executionId}/config`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authenticatorConfigRepresentation
    },
      options);
    }
  /**
 * @deprecated
 * @summary Get execution's configuration
 */
export const getAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId = (
    realm: string,
    executionId: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AuthenticatorConfigRepresentation>(
      {url: `/admin/realms/${realm}/authentication/executions/${executionId}/config/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Lower execution's priority
 */
export const postAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority = (
    realm: string,
    executionId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/executions/${executionId}/lower-priority`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Raise execution's priority
 */
export const postAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority = (
    realm: string,
    executionId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/executions/${executionId}/raise-priority`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Get authentication flows Returns a stream of authentication flows.
 */
export const getAdminRealmsRealmAuthenticationFlows = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AuthenticationFlowRepresentation[]>(
      {url: `/admin/realms/${realm}/authentication/flows`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create a new authentication flow
 */
export const postAdminRealmsRealmAuthenticationFlows = (
    realm: string,
    authenticationFlowRepresentation: AuthenticationFlowRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/flows`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authenticationFlowRepresentation
    },
      options);
    }
  /**
 * @summary Copy existing authentication flow under a new name The new name is given as 'newName' attribute of the passed JSON object
 */
export const postAdminRealmsRealmAuthenticationFlowsFlowAliasCopy = (
    realm: string,
    flowAlias: string,
    postAdminRealmsRealmAuthenticationFlowsFlowAliasCopyBody: PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/flows/${flowAlias}/copy`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmAuthenticationFlowsFlowAliasCopyBody
    },
      options);
    }
  /**
 * @summary Get authentication executions for a flow
 */
export const getAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions = (
    realm: string,
    flowAlias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AuthenticationExecutionInfoRepresentation[]>(
      {url: `/admin/realms/${realm}/authentication/flows/${flowAlias}/executions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update authentication executions of a Flow
 */
export const putAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions = (
    realm: string,
    flowAlias: string,
    authenticationExecutionInfoRepresentation: AuthenticationExecutionInfoRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/flows/${flowAlias}/executions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: authenticationExecutionInfoRepresentation
    },
      options);
    }
  /**
 * @summary Add new authentication execution to a flow
 */
export const postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution = (
    realm: string,
    flowAlias: string,
    postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionBody: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/flows/${flowAlias}/executions/execution`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionBody
    },
      options);
    }
  /**
 * @summary Add new flow with new execution to existing flow
 */
export const postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow = (
    realm: string,
    flowAlias: string,
    postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowBody: PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/flows/${flowAlias}/executions/flow`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowBody
    },
      options);
    }
  /**
 * @summary Get authentication flow for id
 */
export const getAdminRealmsRealmAuthenticationFlowsId = (
    realm: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AuthenticationFlowRepresentation>(
      {url: `/admin/realms/${realm}/authentication/flows/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update an authentication flow
 */
export const putAdminRealmsRealmAuthenticationFlowsId = (
    realm: string,
    id: string,
    authenticationFlowRepresentation: AuthenticationFlowRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/flows/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: authenticationFlowRepresentation
    },
      options);
    }
  /**
 * @summary Delete an authentication flow
 */
export const deleteAdminRealmsRealmAuthenticationFlowsId = (
    realm: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/flows/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get form action providers Returns a stream of form action providers.
 */
export const getAdminRealmsRealmAuthenticationFormActionProviders = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmAuthenticationFormActionProviders200Item[]>(
      {url: `/admin/realms/${realm}/authentication/form-action-providers`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get form providers Returns a stream of form providers.
 */
export const getAdminRealmsRealmAuthenticationFormProviders = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmAuthenticationFormProviders200Item[]>(
      {url: `/admin/realms/${realm}/authentication/form-providers`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get configuration descriptions for all clients
 */
export const getAdminRealmsRealmAuthenticationPerClientConfigDescription = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmAuthenticationPerClientConfigDescription200>(
      {url: `/admin/realms/${realm}/authentication/per-client-config-description`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Register a new required actions
 */
export const postAdminRealmsRealmAuthenticationRegisterRequiredAction = (
    realm: string,
    postAdminRealmsRealmAuthenticationRegisterRequiredActionBody: PostAdminRealmsRealmAuthenticationRegisterRequiredActionBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/register-required-action`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmAuthenticationRegisterRequiredActionBody
    },
      options);
    }
  /**
 * @summary Get required actions Returns a stream of required actions.
 */
export const getAdminRealmsRealmAuthenticationRequiredActions = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RequiredActionProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/authentication/required-actions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get required action for alias
 */
export const getAdminRealmsRealmAuthenticationRequiredActionsAlias = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RequiredActionProviderRepresentation>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update required action
 */
export const putAdminRealmsRealmAuthenticationRequiredActionsAlias = (
    realm: string,
    alias: string,
    requiredActionProviderRepresentation: RequiredActionProviderRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: requiredActionProviderRepresentation
    },
      options);
    }
  /**
 * @summary Delete required action
 */
export const deleteAdminRealmsRealmAuthenticationRequiredActionsAlias = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get RequiredAction configuration
 */
export const getAdminRealmsRealmAuthenticationRequiredActionsAliasConfig = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RequiredActionConfigRepresentation>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}/config`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update RequiredAction configuration
 */
export const putAdminRealmsRealmAuthenticationRequiredActionsAliasConfig = (
    realm: string,
    alias: string,
    requiredActionConfigRepresentation: RequiredActionConfigRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}/config`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: requiredActionConfigRepresentation
    },
      options);
    }
  /**
 * @summary Delete RequiredAction configuration
 */
export const deleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}/config`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get RequiredAction provider configuration description
 */
export const getAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RequiredActionConfigInfoRepresentation>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}/config-description`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Lower required action's priority
 */
export const postAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}/lower-priority`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Raise required action's priority
 */
export const postAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/authentication/required-actions/${alias}/raise-priority`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Get unregistered required actions Returns a stream of unregistered required actions.
 */
export const getAdminRealmsRealmAuthenticationUnregisteredRequiredActions = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmAuthenticationUnregisteredRequiredActions200Item[]>(
      {url: `/admin/realms/${realm}/authentication/unregistered-required-actions`, method: 'GET'
    },
      options);
    }
  export type GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationAuthenticatorProviders>>>
export type GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationClientAuthenticatorProviders>>>
export type PostAdminRealmsRealmAuthenticationConfigResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationConfig>>>
export type GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationConfigDescriptionProviderId>>>
export type GetAdminRealmsRealmAuthenticationConfigIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationConfigId>>>
export type PutAdminRealmsRealmAuthenticationConfigIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmAuthenticationConfigId>>>
export type DeleteAdminRealmsRealmAuthenticationConfigIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmAuthenticationConfigId>>>
export type PostAdminRealmsRealmAuthenticationExecutionsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationExecutions>>>
export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationExecutionsExecutionId>>>
export type DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmAuthenticationExecutionsExecutionId>>>
export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig>>>
export type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId>>>
export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority>>>
export type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority>>>
export type GetAdminRealmsRealmAuthenticationFlowsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationFlows>>>
export type PostAdminRealmsRealmAuthenticationFlowsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationFlows>>>
export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationFlowsFlowAliasCopy>>>
export type GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions>>>
export type PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions>>>
export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution>>>
export type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow>>>
export type GetAdminRealmsRealmAuthenticationFlowsIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationFlowsId>>>
export type PutAdminRealmsRealmAuthenticationFlowsIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmAuthenticationFlowsId>>>
export type DeleteAdminRealmsRealmAuthenticationFlowsIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmAuthenticationFlowsId>>>
export type GetAdminRealmsRealmAuthenticationFormActionProvidersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationFormActionProviders>>>
export type GetAdminRealmsRealmAuthenticationFormProvidersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationFormProviders>>>
export type GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationPerClientConfigDescription>>>
export type PostAdminRealmsRealmAuthenticationRegisterRequiredActionResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationRegisterRequiredAction>>>
export type GetAdminRealmsRealmAuthenticationRequiredActionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationRequiredActions>>>
export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationRequiredActionsAlias>>>
export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmAuthenticationRequiredActionsAlias>>>
export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmAuthenticationRequiredActionsAlias>>>
export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationRequiredActionsAliasConfig>>>
export type PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmAuthenticationRequiredActionsAliasConfig>>>
export type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig>>>
export type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription>>>
export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority>>>
export type PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority>>>
export type GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAuthenticationUnregisteredRequiredActions>>>
