/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams,
  GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams,
  GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams,
  GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams,
  GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams,
  GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams,
  MappingsRepresentation,
  RoleRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from "@/core/api/services/keycloak-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @deprecated
 * @summary Get all scope mappings for the client
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappings = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<MappingsRepresentation>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get the roles associated with a client's scope Returns roles for the client.
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient = (
    realm: string,
    clientScopeId: string,
    client: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/clients/${client}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add client-level roles to the client's scope
 */
export const postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient = (
    realm: string,
    clientScopeId: string,
    client: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/clients/${client}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove client-level roles from the client's scope.
 */
export const deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient = (
    realm: string,
    clientScopeId: string,
    client: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/clients/${client}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary The available client-level roles Returns the roles for the client that can be associated with the client's scope
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable = (
    realm: string,
    clientScopeId: string,
    client: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/clients/${client}/available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get effective client roles Returns the roles for the client that are associated with the client's scope.
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite = (
    realm: string,
    clientScopeId: string,
    client: string,
    params?: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/clients/${client}/composite`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Get realm-level roles associated with the client's scope
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add a set of realm-level roles to the client's scope
 */
export const postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm = (
    realm: string,
    clientScopeId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/realm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove a set of realm-level roles from the client's scope
 */
export const deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm = (
    realm: string,
    clientScopeId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/realm`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get realm-level roles that are available to attach to this client's scope
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/realm/available`, method: 'GET'
    },
      options);
    }
  /**
 * The method is really to show a comprehensive total view of realm-level roles associated with the client.
 * @summary Get effective realm-level roles associated with the client‚Äôs scope What this does is recurse any composite roles associated with the client‚Äôs scope and adds the roles to this lists.
 */
export const getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite = (
    realm: string,
    clientScopeId: string,
    params?: GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-scopes/${clientScopeId}/scope-mappings/realm/composite`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @deprecated
 * @summary Get all scope mappings for the client
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<MappingsRepresentation>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get the roles associated with a client's scope Returns roles for the client.
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient = (
    realm: string,
    clientScopeId: string,
    client: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/clients/${client}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add client-level roles to the client's scope
 */
export const postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient = (
    realm: string,
    clientScopeId: string,
    client: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/clients/${client}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove client-level roles from the client's scope.
 */
export const deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient = (
    realm: string,
    clientScopeId: string,
    client: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/clients/${client}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary The available client-level roles Returns the roles for the client that can be associated with the client's scope
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable = (
    realm: string,
    clientScopeId: string,
    client: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/clients/${client}/available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get effective client roles Returns the roles for the client that are associated with the client's scope.
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite = (
    realm: string,
    clientScopeId: string,
    client: string,
    params?: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/clients/${client}/composite`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Get realm-level roles associated with the client's scope
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add a set of realm-level roles to the client's scope
 */
export const postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm = (
    realm: string,
    clientScopeId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/realm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove a set of realm-level roles from the client's scope
 */
export const deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm = (
    realm: string,
    clientScopeId: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/realm`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get realm-level roles that are available to attach to this client's scope
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/realm/available`, method: 'GET'
    },
      options);
    }
  /**
 * The method is really to show a comprehensive total view of realm-level roles associated with the client.
 * @summary Get effective realm-level roles associated with the client‚Äôs scope What this does is recurse any composite roles associated with the client‚Äôs scope and adds the roles to this lists.
 */
export const getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite = (
    realm: string,
    clientScopeId: string,
    params?: GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/client-templates/${clientScopeId}/scope-mappings/realm/composite`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @deprecated
 * @summary Get all scope mappings for the client
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappings = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<MappingsRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get the roles associated with a client's scope Returns roles for the client.
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient = (
    realm: string,
    clientUuid: string,
    client: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/clients/${client}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add client-level roles to the client's scope
 */
export const postAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient = (
    realm: string,
    clientUuid: string,
    client: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/clients/${client}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove client-level roles from the client's scope.
 */
export const deleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient = (
    realm: string,
    clientUuid: string,
    client: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/clients/${client}`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary The available client-level roles Returns the roles for the client that can be associated with the client's scope
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable = (
    realm: string,
    clientUuid: string,
    client: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/clients/${client}/available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get effective client roles Returns the roles for the client that are associated with the client's scope.
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite = (
    realm: string,
    clientUuid: string,
    client: string,
    params?: GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/clients/${client}/composite`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Get realm-level roles associated with the client's scope
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappingsRealm = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add a set of realm-level roles to the client's scope
 */
export const postAdminRealmsRealmClientsClientUuidScopeMappingsRealm = (
    realm: string,
    clientUuid: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/realm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove a set of realm-level roles from the client's scope
 */
export const deleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm = (
    realm: string,
    clientUuid: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/realm`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get realm-level roles that are available to attach to this client's scope
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/realm/available`, method: 'GET'
    },
      options);
    }
  /**
 * The method is really to show a comprehensive total view of realm-level roles associated with the client.
 * @summary Get effective realm-level roles associated with the client‚Äôs scope What this does is recurse any composite roles associated with the client‚Äôs scope and adds the roles to this lists.
 */
export const getAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/scope-mappings/realm/composite`, method: 'GET',
        params
    },
      options);
    }
  export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdScopeMappings>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient>>>
export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient>>>
export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm>>>
export type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm>>>
export type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable>>>
export type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient>>>
export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient>>>
export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm>>>
export type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm>>>
export type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable>>>
export type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite>>>
export type GetAdminRealmsRealmClientsClientUuidScopeMappingsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidScopeMappings>>>
export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient>>>
export type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient>>>
export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient>>>
export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable>>>
export type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite>>>
export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidScopeMappingsRealm>>>
export type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidScopeMappingsRealm>>>
export type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm>>>
export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable>>>
export type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite>>>
