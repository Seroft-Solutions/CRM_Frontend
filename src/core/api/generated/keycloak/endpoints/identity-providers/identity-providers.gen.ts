/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams,
  GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes200,
  GetAdminRealmsRealmIdentityProviderInstancesParams,
  GetAdminRealmsRealmIdentityProviderProvidersProviderId200,
  IdentityProviderMapperRepresentation,
  IdentityProviderRepresentation,
  ManagementPermissionReference,
  PostAdminRealmsRealmIdentityProviderImportConfig200,
  PostAdminRealmsRealmIdentityProviderImportConfigBody
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * Import identity provider from uploaded JSON file
 * @summary Import identity provider from JSON body
 */
export const postAdminRealmsRealmIdentityProviderImportConfig = (
    realm: string,
    postAdminRealmsRealmIdentityProviderImportConfigBody: PostAdminRealmsRealmIdentityProviderImportConfigBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PostAdminRealmsRealmIdentityProviderImportConfig200>(
      {url: `/admin/realms/${realm}/identity-provider/import-config`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmIdentityProviderImportConfigBody
    },
      options);
    }
  /**
 * @summary List identity providers
 */
export const getAdminRealmsRealmIdentityProviderInstances = (
    realm: string,
    params?: GetAdminRealmsRealmIdentityProviderInstancesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<IdentityProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/identity-provider/instances`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Create a new identity provider
 */
export const postAdminRealmsRealmIdentityProviderInstances = (
    realm: string,
    identityProviderRepresentation: IdentityProviderRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/identity-provider/instances`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: identityProviderRepresentation
    },
      options);
    }
  /**
 * @summary Get the identity provider
 */
export const getAdminRealmsRealmIdentityProviderInstancesAlias = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<IdentityProviderRepresentation>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update the identity provider
 */
export const putAdminRealmsRealmIdentityProviderInstancesAlias = (
    realm: string,
    alias: string,
    identityProviderRepresentation: IdentityProviderRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: identityProviderRepresentation
    },
      options);
    }
  /**
 * @summary Delete the identity provider
 */
export const deleteAdminRealmsRealmIdentityProviderInstancesAlias = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Export public broker configuration for identity provider
 */
export const getAdminRealmsRealmIdentityProviderInstancesAliasExport = (
    realm: string,
    alias: string,
    params?: GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/export`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/management/permissions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions = (
    realm: string,
    alias: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  /**
 * @summary Get mapper types for identity provider
 */
export const getAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes200>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/mapper-types`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get mappers for identity provider
 */
export const getAdminRealmsRealmIdentityProviderInstancesAliasMappers = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<IdentityProviderMapperRepresentation[]>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/mappers`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add a mapper to identity provider
 */
export const postAdminRealmsRealmIdentityProviderInstancesAliasMappers = (
    realm: string,
    alias: string,
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/mappers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: identityProviderMapperRepresentation
    },
      options);
    }
  /**
 * @summary Get mapper by id for the identity provider
 */
export const getAdminRealmsRealmIdentityProviderInstancesAliasMappersId = (
    realm: string,
    alias: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<IdentityProviderMapperRepresentation>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/mappers/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update a mapper for the identity provider
 */
export const putAdminRealmsRealmIdentityProviderInstancesAliasMappersId = (
    realm: string,
    alias: string,
    id: string,
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/mappers/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: identityProviderMapperRepresentation
    },
      options);
    }
  /**
 * @summary Delete a mapper for the identity provider
 */
export const deleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId = (
    realm: string,
    alias: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/mappers/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Reaload keys for the identity provider if the provider supports it, "true" is returned if reload was performed, "false" if not.
 */
export const getAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys = (
    realm: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<boolean>(
      {url: `/admin/realms/${realm}/identity-provider/instances/${alias}/reload-keys`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get the identity provider factory for that provider id
 */
export const getAdminRealmsRealmIdentityProviderProvidersProviderId = (
    realm: string,
    providerId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmIdentityProviderProvidersProviderId200>(
      {url: `/admin/realms/${realm}/identity-provider/providers/${providerId}`, method: 'GET'
    },
      options);
    }
  export type PostAdminRealmsRealmIdentityProviderImportConfigResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmIdentityProviderImportConfig>>>
export type GetAdminRealmsRealmIdentityProviderInstancesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstances>>>
export type PostAdminRealmsRealmIdentityProviderInstancesResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmIdentityProviderInstances>>>
export type GetAdminRealmsRealmIdentityProviderInstancesAliasResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstancesAlias>>>
export type PutAdminRealmsRealmIdentityProviderInstancesAliasResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmIdentityProviderInstancesAlias>>>
export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmIdentityProviderInstancesAlias>>>
export type GetAdminRealmsRealmIdentityProviderInstancesAliasExportResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstancesAliasExport>>>
export type GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions>>>
export type PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions>>>
export type GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes>>>
export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstancesAliasMappers>>>
export type PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmIdentityProviderInstancesAliasMappers>>>
export type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstancesAliasMappersId>>>
export type PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmIdentityProviderInstancesAliasMappersId>>>
export type DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId>>>
export type GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys>>>
export type GetAdminRealmsRealmIdentityProviderProvidersProviderIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmIdentityProviderProvidersProviderId>>>
