/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmOrganizationsOrgIdMembersParams,
  GetAdminRealmsRealmOrganizationsParams,
  IdentityProviderRepresentation,
  MemberRepresentation,
  OrganizationRepresentation,
  PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody,
  PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody
} from '../../schemas';

import { keycloakServiceMutator } from "@/core/api/services/keycloak-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Returns a paginated list of organizations filtered according to the specified parameters
 */
export const getAdminRealmsRealmOrganizations = (
    realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<OrganizationRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Creates a new organization
 */
export const postAdminRealmsRealmOrganizations = (
    realm: string,
    organizationRepresentation: OrganizationRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationRepresentation
    },
      options);
    }
  /**
 * @summary Returns the organizations associated with the user that has the specified id
 */
export const getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations = (
    realm: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<OrganizationRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/members/${memberId}/organizations`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Returns the organization representation
 */
export const getAdminRealmsRealmOrganizationsOrgId = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<OrganizationRepresentation>(
      {url: `/admin/realms/${realm}/organizations/${orgId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Updates the organization
 */
export const putAdminRealmsRealmOrganizationsOrgId = (
    realm: string,
    orgId: string,
    organizationRepresentation: OrganizationRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: organizationRepresentation
    },
      options);
    }
  /**
 * @summary Deletes the organization
 */
export const deleteAdminRealmsRealmOrganizationsOrgId = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Returns all identity providers associated with the organization
 */
export const getAdminRealmsRealmOrganizationsOrgIdIdentityProviders = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<IdentityProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers`, method: 'GET'
    },
      options);
    }
  /**
 * Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
 * @summary Adds the identity provider with the specified id to the organization
 */
export const postAdminRealmsRealmOrganizationsOrgIdIdentityProviders = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdIdentityProvidersBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmOrganizationsOrgIdIdentityProvidersBody
    },
      options);
    }
  /**
 * Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
 * @summary Returns the identity provider associated with the organization that has the specified alias
 */
export const getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias = (
    realm: string,
    orgId: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<IdentityProviderRepresentation>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers/${alias}`, method: 'GET'
    },
      options);
    }
  /**
 * Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
 * @summary Removes the identity provider with the specified alias from the organization
 */
export const deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias = (
    realm: string,
    orgId: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers/${alias}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Returns a paginated list of organization members filtered according to the specified parameters
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembers = (
    realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<MemberRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members`, method: 'GET',
        params
    },
      options);
    }
  /**
 * Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
 * @summary Adds the user with the specified id as a member of the organization
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembers = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdMembersBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmOrganizationsOrgIdMembersBody
    },
      options);
    }
  /**
 * @summary Returns number of members in the organization.
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembersCount = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<number>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/count`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Invites an existing user to the organization, using the specified user id
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {const formUrlEncoded = new URLSearchParams();
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody.id !== undefined) {
 formUrlEncoded.append('id', postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody.id)
 }

      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/invite-existing-user`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      options);
    }
  /**
 * If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
 * @summary Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {const formUrlEncoded = new URLSearchParams();
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.email !== undefined) {
 formUrlEncoded.append('email', postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.email)
 }
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.firstName !== undefined) {
 formUrlEncoded.append('firstName', postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.firstName)
 }
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.lastName !== undefined) {
 formUrlEncoded.append('lastName', postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.lastName)
 }

      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/invite-user`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      options);
    }
  /**
 * Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
 * @summary Returns the member of the organization with the specified id
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembersMemberId = (
    realm: string,
    orgId: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<MemberRepresentation>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/${memberId}`, method: 'GET'
    },
      options);
    }
  /**
 * Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
 * @summary Removes the user with the specified id from the organization
 */
export const deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId = (
    realm: string,
    orgId: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/${memberId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Returns the organizations associated with the user that has the specified id
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations = (
    realm: string,
    orgId: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<OrganizationRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/${memberId}/organizations`, method: 'GET'
    },
      options);
    }
  export type GetAdminRealmsRealmOrganizationsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>>
export type PostAdminRealmsRealmOrganizationsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizations>>>
export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>
export type GetAdminRealmsRealmOrganizationsOrgIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>
export type PutAdminRealmsRealmOrganizationsOrgIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmOrganizationsOrgId>>>
export type DeleteAdminRealmsRealmOrganizationsOrgIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgId>>>
export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>
export type PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>
export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>
export type DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>>
export type PostAdminRealmsRealmOrganizationsOrgIdMembersResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembers>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>
export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser>>>
export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>
export type DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>
