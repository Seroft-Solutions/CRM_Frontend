/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAdminRealmsRealmOrganizationsOrgIdMembersParams,
  GetAdminRealmsRealmOrganizationsParams,
  IdentityProviderRepresentation,
  MemberRepresentation,
  OrganizationRepresentation,
  PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody,
  PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Returns a paginated list of organizations filtered according to the specified parameters
 */
export const getAdminRealmsRealmOrganizations = (
    realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<OrganizationRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsQueryKey = (realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams,) => {
    return [`/admin/realms/${realm}/organizations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, GetAdminRealmsRealmOrganizationsParams['first']>, TError = void>(realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey, GetAdminRealmsRealmOrganizationsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey, GetAdminRealmsRealmOrganizationsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmOrganizations(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey, GetAdminRealmsRealmOrganizationsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>>
export type GetAdminRealmsRealmOrganizationsInfiniteQueryError = void


export function useGetAdminRealmsRealmOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, GetAdminRealmsRealmOrganizationsParams['first']>, TError = void>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmOrganizationsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey, GetAdminRealmsRealmOrganizationsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, GetAdminRealmsRealmOrganizationsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey, GetAdminRealmsRealmOrganizationsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, GetAdminRealmsRealmOrganizationsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey, GetAdminRealmsRealmOrganizationsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns a paginated list of organizations filtered according to the specified parameters
 */

export function useGetAdminRealmsRealmOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, GetAdminRealmsRealmOrganizationsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, QueryKey, GetAdminRealmsRealmOrganizationsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError = void>(realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>> = ({ signal }) => getAdminRealmsRealmOrganizations(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>>
export type GetAdminRealmsRealmOrganizationsQueryError = void


export function useGetAdminRealmsRealmOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError = void>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmOrganizationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns a paginated list of organizations filtered according to the specified parameters
 */

export function useGetAdminRealmsRealmOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Creates a new organization
 */
export const postAdminRealmsRealmOrganizations = (
    realm: string,
    organizationRepresentation: OrganizationRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmOrganizationsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizations>>, TError,{realm: string;data: OrganizationRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizations>>, TError,{realm: string;data: OrganizationRepresentation}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmOrganizations'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizations>>, {realm: string;data: OrganizationRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  postAdminRealmsRealmOrganizations(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmOrganizationsMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizations>>>
    export type PostAdminRealmsRealmOrganizationsMutationBody = OrganizationRepresentation
    export type PostAdminRealmsRealmOrganizationsMutationError = void

    /**
 * @summary Creates a new organization
 */
export const usePostAdminRealmsRealmOrganizations = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizations>>, TError,{realm: string;data: OrganizationRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmOrganizations>>,
        TError,
        {realm: string;data: OrganizationRepresentation},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmOrganizationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Returns the organizations associated with the user that has the specified id
 */
export const getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations = (
    realm: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<OrganizationRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/members/${memberId}/organizations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryKey = (realm: string,
    memberId: string,) => {
    return [`/admin/realms/${realm}/organizations/members/${memberId}/organizations`] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>, TError = void>(realm: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryKey(realm,memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>> = ({ signal }) => getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations(realm,memberId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && memberId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>
export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfiniteQueryError = void


export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    memberId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the organizations associated with the user that has the specified id
 */

export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsInfiniteQueryOptions(realm,memberId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError = void>(realm: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryKey(realm,memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>> = ({ signal }) => getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations(realm,memberId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && memberId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>>
export type GetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryError = void


export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    memberId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the organizations associated with the user that has the specified id
 */

export function useGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsMembersMemberIdOrganizationsQueryOptions(realm,memberId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Returns the organization representation
 */
export const getAdminRealmsRealmOrganizationsOrgId = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<OrganizationRepresentation>(
      {url: `/admin/realms/${realm}/organizations/${orgId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsOrgIdQueryKey = (realm: string,
    orgId: string,) => {
    return [`/admin/realms/${realm}/organizations/${orgId}`] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsOrgIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>, TError = unknown>(realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdQueryKey(realm,orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgId(realm,orgId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>
export type GetAdminRealmsRealmOrganizationsOrgIdInfiniteQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>, TError = unknown>(
 realm: string,
    orgId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the organization representation
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdInfiniteQueryOptions(realm,orgId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsOrgIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError = unknown>(realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdQueryKey(realm,orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgId(realm,orgId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>>
export type GetAdminRealmsRealmOrganizationsOrgIdQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError = unknown>(
 realm: string,
    orgId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the organization representation
 */

export function useGetAdminRealmsRealmOrganizationsOrgId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdQueryOptions(realm,orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Updates the organization
 */
export const putAdminRealmsRealmOrganizationsOrgId = (
    realm: string,
    orgId: string,
    organizationRepresentation: OrganizationRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: organizationRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmOrganizationsOrgIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmOrganizationsOrgId>>, TError,{realm: string;orgId: string;data: OrganizationRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmOrganizationsOrgId>>, TError,{realm: string;orgId: string;data: OrganizationRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmOrganizationsOrgId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmOrganizationsOrgId>>, {realm: string;orgId: string;data: OrganizationRepresentation}> = (props) => {
          const {realm,orgId,data} = props ?? {};

          return  putAdminRealmsRealmOrganizationsOrgId(realm,orgId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmOrganizationsOrgIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmOrganizationsOrgId>>>
    export type PutAdminRealmsRealmOrganizationsOrgIdMutationBody = OrganizationRepresentation
    export type PutAdminRealmsRealmOrganizationsOrgIdMutationError = void

    /**
 * @summary Updates the organization
 */
export const usePutAdminRealmsRealmOrganizationsOrgId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmOrganizationsOrgId>>, TError,{realm: string;orgId: string;data: OrganizationRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmOrganizationsOrgId>>,
        TError,
        {realm: string;orgId: string;data: OrganizationRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmOrganizationsOrgIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deletes the organization
 */
export const deleteAdminRealmsRealmOrganizationsOrgId = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmOrganizationsOrgIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgId>>, TError,{realm: string;orgId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgId>>, TError,{realm: string;orgId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmOrganizationsOrgId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgId>>, {realm: string;orgId: string}> = (props) => {
          const {realm,orgId} = props ?? {};

          return  deleteAdminRealmsRealmOrganizationsOrgId(realm,orgId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmOrganizationsOrgIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgId>>>
    
    export type DeleteAdminRealmsRealmOrganizationsOrgIdMutationError = void

    /**
 * @summary Deletes the organization
 */
export const useDeleteAdminRealmsRealmOrganizationsOrgId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgId>>, TError,{realm: string;orgId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgId>>,
        TError,
        {realm: string;orgId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmOrganizationsOrgIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Returns all identity providers associated with the organization
 */
export const getAdminRealmsRealmOrganizationsOrgIdIdentityProviders = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<IdentityProviderRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersQueryKey = (realm: string,
    orgId: string,) => {
    return [`/admin/realms/${realm}/organizations/${orgId}/identity-providers`] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>, TError = unknown>(realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersQueryKey(realm,orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdIdentityProviders(realm,orgId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>
export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfiniteQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>, TError = unknown>(
 realm: string,
    orgId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns all identity providers associated with the organization
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersInfiniteQueryOptions(realm,orgId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError = unknown>(realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersQueryKey(realm,orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdIdentityProviders(realm,orgId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>
export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError = unknown>(
 realm: string,
    orgId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns all identity providers associated with the organization
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersQueryOptions(realm,orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
 * @summary Adds the identity provider with the specified id to the organization
 */
export const postAdminRealmsRealmOrganizationsOrgIdIdentityProviders = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdIdentityProvidersBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmOrganizationsOrgIdIdentityProvidersBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError,{realm: string;orgId: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError,{realm: string;orgId: string;data: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmOrganizationsOrgIdIdentityProviders'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, {realm: string;orgId: string;data: string}> = (props) => {
          const {realm,orgId,data} = props ?? {};

          return  postAdminRealmsRealmOrganizationsOrgIdIdentityProviders(realm,orgId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>>
    export type PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersMutationBody = string
    export type PostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersMutationError = void

    /**
 * @summary Adds the identity provider with the specified id to the organization
 */
export const usePostAdminRealmsRealmOrganizationsOrgIdIdentityProviders = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>, TError,{realm: string;orgId: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdIdentityProviders>>,
        TError,
        {realm: string;orgId: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmOrganizationsOrgIdIdentityProvidersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
 * @summary Returns the identity provider associated with the organization that has the specified alias
 */
export const getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias = (
    realm: string,
    orgId: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<IdentityProviderRepresentation>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers/${alias}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasQueryKey = (realm: string,
    orgId: string,
    alias: string,) => {
    return [`/admin/realms/${realm}/organizations/${orgId}/identity-providers/${alias}`] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>, TError = void>(realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasQueryKey(realm,orgId,alias);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias(realm,orgId,alias, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId && alias),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>
export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfiniteQueryError = void


export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the identity provider associated with the organization that has the specified alias
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasInfiniteQueryOptions(realm,orgId,alias,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError = void>(realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasQueryKey(realm,orgId,alias);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias(realm,orgId,alias, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId && alias),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>
export type GetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasQueryError = void


export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the identity provider associated with the organization that has the specified alias
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError = void>(
 realm: string,
    orgId: string,
    alias: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasQueryOptions(realm,orgId,alias,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
 * @summary Removes the identity provider with the specified alias from the organization
 */
export const deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias = (
    realm: string,
    orgId: string,
    alias: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/identity-providers/${alias}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError,{realm: string;orgId: string;alias: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError,{realm: string;orgId: string;alias: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, {realm: string;orgId: string;alias: string}> = (props) => {
          const {realm,orgId,alias} = props ?? {};

          return  deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias(realm,orgId,alias,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>>
    
    export type DeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasMutationError = void

    /**
 * @summary Removes the identity provider with the specified alias from the organization
 */
export const useDeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>, TError,{realm: string;orgId: string;alias: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAlias>>,
        TError,
        {realm: string;orgId: string;alias: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Returns a paginated list of organization members filtered according to the specified parameters
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembers = (
    realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<MemberRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsOrgIdMembersQueryKey = (realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams,) => {
    return [`/admin/realms/${realm}/organizations/${orgId}/members`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsOrgIdMembersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>, TError = unknown>(realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersQueryKey(realm,orgId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmOrganizationsOrgIdMembers(realm,orgId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersInfiniteQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>, TError = unknown>(
 realm: string,
    orgId: string,
    params: undefined |  GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>, TError = unknown>(
 realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>, TError = unknown>(
 realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns a paginated list of organization members filtered according to the specified parameters
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>, TError = unknown>(
 realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, QueryKey, GetAdminRealmsRealmOrganizationsOrgIdMembersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersInfiniteQueryOptions(realm,orgId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsOrgIdMembersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError = unknown>(realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersQueryKey(realm,orgId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdMembers(realm,orgId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError = unknown>(
 realm: string,
    orgId: string,
    params: undefined |  GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError = unknown>(
 realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError = unknown>(
 realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns a paginated list of organization members filtered according to the specified parameters
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError = unknown>(
 realm: string,
    orgId: string,
    params?: GetAdminRealmsRealmOrganizationsOrgIdMembersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersQueryOptions(realm,orgId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
 * @summary Adds the user with the specified id as a member of the organization
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembers = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdMembersBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmOrganizationsOrgIdMembersBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmOrganizationsOrgIdMembersMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembers>>, TError,{realm: string;orgId: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembers>>, TError,{realm: string;orgId: string;data: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmOrganizationsOrgIdMembers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembers>>, {realm: string;orgId: string;data: string}> = (props) => {
          const {realm,orgId,data} = props ?? {};

          return  postAdminRealmsRealmOrganizationsOrgIdMembers(realm,orgId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmOrganizationsOrgIdMembersMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembers>>>
    export type PostAdminRealmsRealmOrganizationsOrgIdMembersMutationBody = string
    export type PostAdminRealmsRealmOrganizationsOrgIdMembersMutationError = void

    /**
 * @summary Adds the user with the specified id as a member of the organization
 */
export const usePostAdminRealmsRealmOrganizationsOrgIdMembers = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembers>>, TError,{realm: string;orgId: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembers>>,
        TError,
        {realm: string;orgId: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmOrganizationsOrgIdMembersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Returns number of members in the organization.
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembersCount = (
    realm: string,
    orgId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<number>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/count`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsOrgIdMembersCountQueryKey = (realm: string,
    orgId: string,) => {
    return [`/admin/realms/${realm}/organizations/${orgId}/members/count`] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsOrgIdMembersCountInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>, TError = unknown>(realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersCountQueryKey(realm,orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdMembersCount(realm,orgId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountInfiniteQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>, TError = unknown>(
 realm: string,
    orgId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns number of members in the organization.
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersCountInfiniteQueryOptions(realm,orgId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsOrgIdMembersCountQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError = unknown>(realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersCountQueryKey(realm,orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdMembersCount(realm,orgId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersCountQueryError = unknown


export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError = unknown>(
 realm: string,
    orgId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns number of members in the organization.
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembersCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError = unknown>(
 realm: string,
    orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersCountQueryOptions(realm,orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Invites an existing user to the organization, using the specified user id
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody.id !== undefined) {
 formUrlEncoded.append('id', postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody.id)
 }

      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/invite-existing-user`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser>>, TError,{realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser>>, TError,{realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser>>, {realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody}> = (props) => {
          const {realm,orgId,data} = props ?? {};

          return  postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser(realm,orgId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser>>>
    export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserMutationBody = PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody
    export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserMutationError = void

    /**
 * @summary Invites an existing user to the organization, using the specified user id
 */
export const usePostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser>>, TError,{realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUser>>,
        TError,
        {realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserBody},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
 * @summary Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
 */
export const postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser = (
    realm: string,
    orgId: string,
    postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.email !== undefined) {
 formUrlEncoded.append('email', postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.email)
 }
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.firstName !== undefined) {
 formUrlEncoded.append('firstName', postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.firstName)
 }
if(postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.lastName !== undefined) {
 formUrlEncoded.append('lastName', postAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody.lastName)
 }

      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/invite-user`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser>>, TError,{realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser>>, TError,{realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser>>, {realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody}> = (props) => {
          const {realm,orgId,data} = props ?? {};

          return  postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser(realm,orgId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser>>>
    export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserMutationBody = PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody
    export type PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserMutationError = void

    /**
 * @summary Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
 */
export const usePostAdminRealmsRealmOrganizationsOrgIdMembersInviteUser = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser>>, TError,{realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmOrganizationsOrgIdMembersInviteUser>>,
        TError,
        {realm: string;orgId: string;data: PostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserBody},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmOrganizationsOrgIdMembersInviteUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
 * @summary Returns the member of the organization with the specified id
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembersMemberId = (
    realm: string,
    orgId: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<MemberRepresentation>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/${memberId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdQueryKey = (realm: string,
    orgId: string,
    memberId: string,) => {
    return [`/admin/realms/${realm}/organizations/${orgId}/members/${memberId}`] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>, TError = void>(realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdQueryKey(realm,orgId,memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdMembersMemberId(realm,orgId,memberId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId && memberId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfiniteQueryError = void


export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the member of the organization with the specified id
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdInfiniteQueryOptions(realm,orgId,memberId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError = void>(realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdQueryKey(realm,orgId,memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdMembersMemberId(realm,orgId,memberId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId && memberId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdQueryError = void


export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the member of the organization with the specified id
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdQueryOptions(realm,orgId,memberId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
 * @summary Removes the user with the specified id from the organization
 */
export const deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId = (
    realm: string,
    orgId: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/${memberId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError,{realm: string;orgId: string;memberId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError,{realm: string;orgId: string;memberId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, {realm: string;orgId: string;memberId: string}> = (props) => {
          const {realm,orgId,memberId} = props ?? {};

          return  deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId(realm,orgId,memberId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>>
    
    export type DeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdMutationError = void

    /**
 * @summary Removes the user with the specified id from the organization
 */
export const useDeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>, TError,{realm: string;orgId: string;memberId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmOrganizationsOrgIdMembersMemberId>>,
        TError,
        {realm: string;orgId: string;memberId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmOrganizationsOrgIdMembersMemberIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Returns the organizations associated with the user that has the specified id
 */
export const getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations = (
    realm: string,
    orgId: string,
    memberId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<OrganizationRepresentation[]>(
      {url: `/admin/realms/${realm}/organizations/${orgId}/members/${memberId}/organizations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryKey = (realm: string,
    orgId: string,
    memberId: string,) => {
    return [`/admin/realms/${realm}/organizations/${orgId}/members/${memberId}/organizations`] as const;
    }

    
export const getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>, TError = void>(realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryKey(realm,orgId,memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations(realm,orgId,memberId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId && memberId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfiniteQueryError = void


export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the organizations associated with the user that has the specified id
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsInfiniteQueryOptions(realm,orgId,memberId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError = void>(realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryKey(realm,orgId,memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>> = ({ signal }) => getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations(realm,orgId,memberId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && orgId && memberId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>>
export type GetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryError = void


export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns the organizations associated with the user that has the specified id
 */

export function useGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations<TData = Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError = void>(
 realm: string,
    orgId: string,
    memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizations>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsQueryOptions(realm,orgId,memberId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



