/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  CredentialRepresentation,
  FederatedIdentityRepresentation,
  GetAdminRealmsRealmUsersCountParams,
  GetAdminRealmsRealmUsersParams,
  GetAdminRealmsRealmUsersUserIdConsents200Item,
  GetAdminRealmsRealmUsersUserIdGroupsCount200,
  GetAdminRealmsRealmUsersUserIdGroupsCountParams,
  GetAdminRealmsRealmUsersUserIdGroupsParams,
  GetAdminRealmsRealmUsersUserIdParams,
  GetAdminRealmsRealmUsersUserIdUnmanagedAttributes200,
  GroupRepresentation,
  PostAdminRealmsRealmUsersUserIdImpersonation200,
  PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams,
  PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams,
  PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams,
  UPConfig,
  UserProfileMetadata,
  UserRepresentation,
  UserSessionRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from "@/core/api/services/keycloak-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get users Returns a stream of users, filtered according to query parameters.
 */
export const getAdminRealmsRealmUsers = (
    realm: string,
    params?: GetAdminRealmsRealmUsersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation[]>(
      {url: `/admin/realms/${realm}/users`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Create a new user Username must be unique.
 */
export const postAdminRealmsRealmUsers = (
    realm: string,
    userRepresentation: UserRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userRepresentation
    },
      options);
    }
  /**
 * It can be called in three different ways. 1. Don‚Äôt specify any criteria and pass {@code null}. The number of all users within that realm will be returned. <p> 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. <p> 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
 * @summary Returns the number of users that match the given criteria.
 */
export const getAdminRealmsRealmUsersCount = (
    realm: string,
    params?: GetAdminRealmsRealmUsersCountParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<number>(
      {url: `/admin/realms/${realm}/users/count`, method: 'GET',
        params
    },
      options);
    }
  /**
 * Get the configuration for the user profile
 */
export const getAdminRealmsRealmUsersProfile = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UPConfig>(
      {url: `/admin/realms/${realm}/users/profile`, method: 'GET'
    },
      options);
    }
  /**
 * Set the configuration for the user profile
 */
export const putAdminRealmsRealmUsersProfile = (
    realm: string,
    uPConfig: UPConfig,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UPConfig>(
      {url: `/admin/realms/${realm}/users/profile`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: uPConfig
    },
      options);
    }
  /**
 * Get the UserProfileMetadata from the configuration
 */
export const getAdminRealmsRealmUsersProfileMetadata = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserProfileMetadata>(
      {url: `/admin/realms/${realm}/users/profile/metadata`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get representation of the user
 */
export const getAdminRealmsRealmUsersUserId = (
    realm: string,
    userId: string,
    params?: GetAdminRealmsRealmUsersUserIdParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation>(
      {url: `/admin/realms/${realm}/users/${userId}`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Update the user
 */
export const putAdminRealmsRealmUsersUserId = (
    realm: string,
    userId: string,
    userRepresentation: UserRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userRepresentation
    },
      options);
    }
  /**
 * @summary Delete the user
 */
export const deleteAdminRealmsRealmUsersUserId = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * Returned values can contain for example "password", "otp" etc. This will always return empty list for "local" users, which are not backed by any user storage
 * @summary Return credential types, which are provided by the user storage where user is stored.
 */
export const getAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<string[]>(
      {url: `/admin/realms/${realm}/users/${userId}/configured-user-storage-credential-types`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get consents granted by the user
 */
export const getAdminRealmsRealmUsersUserIdConsents = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmUsersUserIdConsents200Item[]>(
      {url: `/admin/realms/${realm}/users/${userId}/consents`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Revoke consent and offline tokens for particular client from user
 */
export const deleteAdminRealmsRealmUsersUserIdConsentsClient = (
    realm: string,
    userId: string,
    client: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/consents/${client}`, method: 'DELETE'
    },
      options);
    }
  export const getAdminRealmsRealmUsersUserIdCredentials = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<CredentialRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/credentials`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Remove a credential for a user
 */
export const deleteAdminRealmsRealmUsersUserIdCredentialsCredentialId = (
    realm: string,
    userId: string,
    credentialId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/credentials/${credentialId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Move a credential to a position behind another credential
 */
export const postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId = (
    realm: string,
    userId: string,
    credentialId: string,
    newPreviousCredentialId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/credentials/${credentialId}/moveAfter/${newPreviousCredentialId}`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Move a credential to a first position in the credentials list of the user
 */
export const postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst = (
    realm: string,
    userId: string,
    credentialId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/credentials/${credentialId}/moveToFirst`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Update a credential label for a user
 */
export const putAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel = (
    realm: string,
    userId: string,
    credentialId: string,
    putAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/credentials/${credentialId}/userLabel`, method: 'PUT',
      headers: {'Content-Type': 'text/plain', },
      data: putAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelBody
    },
      options);
    }
  /**
 * @summary Disable all credentials for a user of a specific type
 */
export const putAdminRealmsRealmUsersUserIdDisableCredentialTypes = (
    realm: string,
    userId: string,
    putAdminRealmsRealmUsersUserIdDisableCredentialTypesBody: string[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/disable-credential-types`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putAdminRealmsRealmUsersUserIdDisableCredentialTypesBody
    },
      options);
    }
  /**
 * An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
 * @summary Send an email to the user with a link they can click to execute particular actions.
 */
export const putAdminRealmsRealmUsersUserIdExecuteActionsEmail = (
    realm: string,
    userId: string,
    putAdminRealmsRealmUsersUserIdExecuteActionsEmailBody: string[],
    params?: PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/execute-actions-email`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putAdminRealmsRealmUsersUserIdExecuteActionsEmailBody,
        params
    },
      options);
    }
  /**
 * @summary Get social logins associated with the user
 */
export const getAdminRealmsRealmUsersUserIdFederatedIdentity = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<FederatedIdentityRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/federated-identity`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add a social login provider to the user
 */
export const postAdminRealmsRealmUsersUserIdFederatedIdentityProvider = (
    realm: string,
    userId: string,
    provider: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/federated-identity/${provider}`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Remove a social login provider from user
 */
export const deleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider = (
    realm: string,
    userId: string,
    provider: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/federated-identity/${provider}`, method: 'DELETE'
    },
      options);
    }
  export const getAdminRealmsRealmUsersUserIdGroups = (
    realm: string,
    userId: string,
    params?: GetAdminRealmsRealmUsersUserIdGroupsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GroupRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/groups`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmUsersUserIdGroupsCount = (
    realm: string,
    userId: string,
    params?: GetAdminRealmsRealmUsersUserIdGroupsCountParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmUsersUserIdGroupsCount200>(
      {url: `/admin/realms/${realm}/users/${userId}/groups/count`, method: 'GET',
        params
    },
      options);
    }
  export const putAdminRealmsRealmUsersUserIdGroupsGroupId = (
    realm: string,
    userId: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/groups/${groupId}`, method: 'PUT'
    },
      options);
    }
  export const deleteAdminRealmsRealmUsersUserIdGroupsGroupId = (
    realm: string,
    userId: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Impersonate the user
 */
export const postAdminRealmsRealmUsersUserIdImpersonation = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PostAdminRealmsRealmUsersUserIdImpersonation200>(
      {url: `/admin/realms/${realm}/users/${userId}/impersonation`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
 */
export const postAdminRealmsRealmUsersUserIdLogout = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/logout`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Get offline sessions associated with the user and client
 */
export const getAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid = (
    realm: string,
    userId: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserSessionRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/offline-sessions/${clientUuid}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Set up a new password for the user.
 */
export const putAdminRealmsRealmUsersUserIdResetPassword = (
    realm: string,
    userId: string,
    credentialRepresentation: CredentialRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/reset-password`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: credentialRepresentation
    },
      options);
    }
  /**
 * The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
 * @deprecated
 * @summary Send an email to the user with a link they can click to reset their password.
 */
export const putAdminRealmsRealmUsersUserIdResetPasswordEmail = (
    realm: string,
    userId: string,
    params?: PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/reset-password-email`, method: 'PUT',
        params
    },
      options);
    }
  /**
 * The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
 * @summary Send an email-verification email to the user An email contains a link the user can click to verify their email address.
 */
export const putAdminRealmsRealmUsersUserIdSendVerifyEmail = (
    realm: string,
    userId: string,
    params?: PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/users/${userId}/send-verify-email`, method: 'PUT',
        params
    },
      options);
    }
  /**
 * @summary Get sessions associated with the user
 */
export const getAdminRealmsRealmUsersUserIdSessions = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserSessionRepresentation[]>(
      {url: `/admin/realms/${realm}/users/${userId}/sessions`, method: 'GET'
    },
      options);
    }
  export const getAdminRealmsRealmUsersUserIdUnmanagedAttributes = (
    realm: string,
    userId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmUsersUserIdUnmanagedAttributes200>(
      {url: `/admin/realms/${realm}/users/${userId}/unmanagedAttributes`, method: 'GET'
    },
      options);
    }
  export type GetAdminRealmsRealmUsersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsers>>>
export type PostAdminRealmsRealmUsersResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsers>>>
export type GetAdminRealmsRealmUsersCountResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersCount>>>
export type GetAdminRealmsRealmUsersProfileResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersProfile>>>
export type PutAdminRealmsRealmUsersProfileResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersProfile>>>
export type GetAdminRealmsRealmUsersProfileMetadataResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersProfileMetadata>>>
export type GetAdminRealmsRealmUsersUserIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserId>>>
export type PutAdminRealmsRealmUsersUserIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserId>>>
export type DeleteAdminRealmsRealmUsersUserIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserId>>>
export type GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes>>>
export type GetAdminRealmsRealmUsersUserIdConsentsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdConsents>>>
export type DeleteAdminRealmsRealmUsersUserIdConsentsClientResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdConsentsClient>>>
export type GetAdminRealmsRealmUsersUserIdCredentialsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdCredentials>>>
export type DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdCredentialsCredentialId>>>
export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId>>>
export type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst>>>
export type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel>>>
export type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserIdDisableCredentialTypes>>>
export type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserIdExecuteActionsEmail>>>
export type GetAdminRealmsRealmUsersUserIdFederatedIdentityResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdFederatedIdentity>>>
export type PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdFederatedIdentityProvider>>>
export type DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider>>>
export type GetAdminRealmsRealmUsersUserIdGroupsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdGroups>>>
export type GetAdminRealmsRealmUsersUserIdGroupsCountResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdGroupsCount>>>
export type PutAdminRealmsRealmUsersUserIdGroupsGroupIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserIdGroupsGroupId>>>
export type DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmUsersUserIdGroupsGroupId>>>
export type PostAdminRealmsRealmUsersUserIdImpersonationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdImpersonation>>>
export type PostAdminRealmsRealmUsersUserIdLogoutResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmUsersUserIdLogout>>>
export type GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid>>>
export type PutAdminRealmsRealmUsersUserIdResetPasswordResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserIdResetPassword>>>
export type PutAdminRealmsRealmUsersUserIdResetPasswordEmailResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserIdResetPasswordEmail>>>
export type PutAdminRealmsRealmUsersUserIdSendVerifyEmailResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersUserIdSendVerifyEmail>>>
export type GetAdminRealmsRealmUsersUserIdSessionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdSessions>>>
export type GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersUserIdUnmanagedAttributes>>>
