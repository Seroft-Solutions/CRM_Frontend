/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ComponentTypeRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Base path for retrieve providers with the configProperties properly filled
 */
export const getAdminRealmsRealmClientRegistrationPolicyProviders = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ComponentTypeRepresentation[]>(
      {url: `/admin/realms/${realm}/client-registration-policy/providers`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientRegistrationPolicyProvidersQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/client-registration-policy/providers`] as const;
    }

    
export const getGetAdminRealmsRealmClientRegistrationPolicyProvidersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>>, TError = unknown>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientRegistrationPolicyProvidersQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>> = ({ signal }) => getAdminRealmsRealmClientRegistrationPolicyProviders(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientRegistrationPolicyProvidersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>>
export type GetAdminRealmsRealmClientRegistrationPolicyProvidersInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientRegistrationPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>>, TError = unknown>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientRegistrationPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientRegistrationPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Base path for retrieve providers with the configProperties properly filled
 */

export function useGetAdminRealmsRealmClientRegistrationPolicyProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientRegistrationPolicyProvidersInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientRegistrationPolicyProvidersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError = unknown>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientRegistrationPolicyProvidersQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>> = ({ signal }) => getAdminRealmsRealmClientRegistrationPolicyProviders(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientRegistrationPolicyProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>>
export type GetAdminRealmsRealmClientRegistrationPolicyProvidersQueryError = unknown


export function useGetAdminRealmsRealmClientRegistrationPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError = unknown>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientRegistrationPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientRegistrationPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Base path for retrieve providers with the configProperties properly filled
 */

export function useGetAdminRealmsRealmClientRegistrationPolicyProviders<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientRegistrationPolicyProviders>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientRegistrationPolicyProvidersQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



