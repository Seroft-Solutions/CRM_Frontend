/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  GetAdminRealmsRealmClientsClientUuidRolesParams,
  GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams,
  GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams,
  GetAdminRealmsRealmRolesParams,
  GetAdminRealmsRealmRolesRoleNameGroupsParams,
  GetAdminRealmsRealmRolesRoleNameUsersParams,
  ManagementPermissionReference,
  RoleRepresentation,
  UserRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get all roles for the realm or client
 */
export const getAdminRealmsRealmClientsClientUuidRoles = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidRolesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Create a new role for the realm or client
 */
export const postAdminRealmsRealmClientsClientUuidRoles = (
    realm: string,
    clientUuid: string,
    roleRepresentation: RoleRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get a role by name
 */
export const getAdminRealmsRealmClientsClientUuidRolesRoleName = (
    realm: string,
    clientUuid: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update a role by name
 */
export const putAdminRealmsRealmClientsClientUuidRolesRoleName = (
    realm: string,
    clientUuid: string,
    roleName: string,
    roleRepresentation: RoleRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Delete a role by name
 */
export const deleteAdminRealmsRealmClientsClientUuidRolesRoleName = (
    realm: string,
    clientUuid: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get composites of the role
 */
export const getAdminRealmsRealmClientsClientUuidRolesRoleNameComposites = (
    realm: string,
    clientUuid: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/composites`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add a composite to the role
 */
export const postAdminRealmsRealmClientsClientUuidRolesRoleNameComposites = (
    realm: string,
    clientUuid: string,
    roleName: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/composites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove roles from the role's composite
 */
export const deleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites = (
    realm: string,
    clientUuid: string,
    roleName: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/composites`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get client-level roles for the client that are in the role's composite
 */
export const getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuid = (
    realm: string,
    clientUuid: string,
    roleName: string,
    clientUuidT: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/composites/clients/${clientUuidT}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get realm-level roles of the role's composite
 */
export const getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm = (
    realm: string,
    clientUuid: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/composites/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Returns a stream of groups that have the specified role name
 */
export const getAdminRealmsRealmClientsClientUuidRolesRoleNameGroups = (
    realm: string,
    clientUuid: string,
    roleName: string,
    params?: GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/groups`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions = (
    realm: string,
    clientUuid: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/management/permissions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions = (
    realm: string,
    clientUuid: string,
    roleName: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  /**
 * @summary Returns a stream of users that have the specified role name.
 */
export const getAdminRealmsRealmClientsClientUuidRolesRoleNameUsers = (
    realm: string,
    clientUuid: string,
    roleName: string,
    params?: GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/roles/${roleName}/users`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Get all roles for the realm or client
 */
export const getAdminRealmsRealmRoles = (
    realm: string,
    params?: GetAdminRealmsRealmRolesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/roles`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Create a new role for the realm or client
 */
export const postAdminRealmsRealmRoles = (
    realm: string,
    roleRepresentation: RoleRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get a role by name
 */
export const getAdminRealmsRealmRolesRoleName = (
    realm: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation>(
      {url: `/admin/realms/${realm}/roles/${roleName}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update a role by name
 */
export const putAdminRealmsRealmRolesRoleName = (
    realm: string,
    roleName: string,
    roleRepresentation: RoleRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles/${roleName}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Delete a role by name
 */
export const deleteAdminRealmsRealmRolesRoleName = (
    realm: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles/${roleName}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get composites of the role
 */
export const getAdminRealmsRealmRolesRoleNameComposites = (
    realm: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/roles/${roleName}/composites`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Add a composite to the role
 */
export const postAdminRealmsRealmRolesRoleNameComposites = (
    realm: string,
    roleName: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles/${roleName}/composites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Remove roles from the role's composite
 */
export const deleteAdminRealmsRealmRolesRoleNameComposites = (
    realm: string,
    roleName: string,
    roleRepresentation: RoleRepresentation[],
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/roles/${roleName}/composites`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: roleRepresentation
    },
      options);
    }
  /**
 * @summary Get client-level roles for the client that are in the role's composite
 */
export const getAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid = (
    realm: string,
    roleName: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/roles/${roleName}/composites/clients/${clientUuid}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get realm-level roles of the role's composite
 */
export const getAdminRealmsRealmRolesRoleNameCompositesRealm = (
    realm: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/roles/${roleName}/composites/realm`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Returns a stream of groups that have the specified role name
 */
export const getAdminRealmsRealmRolesRoleNameGroups = (
    realm: string,
    roleName: string,
    params?: GetAdminRealmsRealmRolesRoleNameGroupsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation[]>(
      {url: `/admin/realms/${realm}/roles/${roleName}/groups`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmRolesRoleNameManagementPermissions = (
    realm: string,
    roleName: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/roles/${roleName}/management/permissions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmRolesRoleNameManagementPermissions = (
    realm: string,
    roleName: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/roles/${roleName}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  /**
 * @summary Returns a stream of users that have the specified role name.
 */
export const getAdminRealmsRealmRolesRoleNameUsers = (
    realm: string,
    roleName: string,
    params?: GetAdminRealmsRealmRolesRoleNameUsersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation[]>(
      {url: `/admin/realms/${realm}/roles/${roleName}/users`, method: 'GET',
        params
    },
      options);
    }
  export type GetAdminRealmsRealmClientsClientUuidRolesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRoles>>>
export type PostAdminRealmsRealmClientsClientUuidRolesResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRoles>>>
export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRolesRoleName>>>
export type PutAdminRealmsRealmClientsClientUuidRolesRoleNameResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidRolesRoleName>>>
export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidRolesRoleName>>>
export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRolesRoleNameComposites>>>
export type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRolesRoleNameComposites>>>
export type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites>>>
export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuid>>>
export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm>>>
export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRolesRoleNameGroups>>>
export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions>>>
export type PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions>>>
export type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidRolesRoleNameUsers>>>
export type GetAdminRealmsRealmRolesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRoles>>>
export type PostAdminRealmsRealmRolesResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmRoles>>>
export type GetAdminRealmsRealmRolesRoleNameResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesRoleName>>>
export type PutAdminRealmsRealmRolesRoleNameResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmRolesRoleName>>>
export type DeleteAdminRealmsRealmRolesRoleNameResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmRolesRoleName>>>
export type GetAdminRealmsRealmRolesRoleNameCompositesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesRoleNameComposites>>>
export type PostAdminRealmsRealmRolesRoleNameCompositesResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmRolesRoleNameComposites>>>
export type DeleteAdminRealmsRealmRolesRoleNameCompositesResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmRolesRoleNameComposites>>>
export type GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid>>>
export type GetAdminRealmsRealmRolesRoleNameCompositesRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesRoleNameCompositesRealm>>>
export type GetAdminRealmsRealmRolesRoleNameGroupsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesRoleNameGroups>>>
export type GetAdminRealmsRealmRolesRoleNameManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesRoleNameManagementPermissions>>>
export type PutAdminRealmsRealmRolesRoleNameManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmRolesRoleNameManagementPermissions>>>
export type GetAdminRealmsRealmRolesRoleNameUsersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmRolesRoleNameUsers>>>
