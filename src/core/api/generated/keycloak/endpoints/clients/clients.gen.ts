/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  AccessToken,
  ClientRepresentation,
  ClientScopeRepresentation,
  CredentialRepresentation,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo200,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams,
  GetAdminRealmsRealmClientsClientUuidOfflineSessionCount200,
  GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams,
  GetAdminRealmsRealmClientsClientUuidSessionCount200,
  GetAdminRealmsRealmClientsClientUuidUserSessionsParams,
  GetAdminRealmsRealmClientsParams,
  GlobalRequestResult,
  IDToken,
  ManagementPermissionReference,
  PostAdminRealmsRealmClientsClientUuidNodesBody,
  ProtocolMapperEvaluationRepresentation,
  RoleRepresentation,
  UserRepresentation,
  UserSessionRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from "@/core/api/services/keycloak-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * If a client can‚Äôt be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don‚Äôt prevent callers from retrieving this list.
 * @summary Get clients belonging to the realm.
 */
export const getAdminRealmsRealmClients = (
    realm: string,
    params?: GetAdminRealmsRealmClientsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientRepresentation[]>(
      {url: `/admin/realms/${realm}/clients`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Create a new client Client‚Äôs client_id must be unique!
 */
export const postAdminRealmsRealmClients = (
    realm: string,
    clientRepresentation: ClientRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clientRepresentation
    },
      options);
    }
  /**
 * @summary Get representation of the client
 */
export const getAdminRealmsRealmClientsClientUuid = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update the client
 */
export const putAdminRealmsRealmClientsClientUuid = (
    realm: string,
    clientUuid: string,
    clientRepresentation: ClientRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientRepresentation
    },
      options);
    }
  /**
 * @summary Delete the client
 */
export const deleteAdminRealmsRealmClientsClientUuid = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get the client secret
 */
export const getAdminRealmsRealmClientsClientUuidClientSecret = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<CredentialRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Generate a new secret for the client
 */
export const postAdminRealmsRealmClientsClientUuidClientSecret = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<CredentialRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Get the rotated client secret
 */
export const getAdminRealmsRealmClientsClientUuidClientSecretRotated = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<CredentialRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret/rotated`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Invalidate the rotated secret for the client
 */
export const deleteAdminRealmsRealmClientsClientUuidClientSecretRotated = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret/rotated`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get default client scopes.  Only name and ids are returned.
 */
export const getAdminRealmsRealmClientsClientUuidDefaultClientScopes = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/default-client-scopes`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/default-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  export const deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/default-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Create JSON with payload of example access token
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AccessToken>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-access-token`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Create JSON with payload of example id token
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<IDToken>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-id-token`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Create JSON with payload of example user info
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo200>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-userinfo`, method: 'GET',
        params
    },
      options);
    }
  /**
 * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
 * @summary Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ProtocolMapperEvaluationRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/protocol-mappers`, method: 'GET',
        params
    },
      options);
    }
  /**
 * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
 * @summary Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted = (
    realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/scope-mappings/${roleContainerId}/granted`, method: 'GET',
        params
    },
      options);
    }
  /**
 * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
 * @summary Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted = (
    realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/scope-mappings/${roleContainerId}/not-granted`, method: 'GET',
        params
    },
      options);
    }
  export const getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId = (
    realm: string,
    clientUuid: string,
    providerId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/installation/providers/${providerId}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmClientsClientUuidManagementPermissions = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/management/permissions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmClientsClientUuidManagementPermissions = (
    realm: string,
    clientUuid: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  /**
 * @summary Register a cluster node with the client Manually register cluster node to this client - usually it‚Äôs not needed to call this directly as adapter should handle by sending registration request to Keycloak
 */
export const postAdminRealmsRealmClientsClientUuidNodes = (
    realm: string,
    clientUuid: string,
    postAdminRealmsRealmClientsClientUuidNodesBody: PostAdminRealmsRealmClientsClientUuidNodesBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/nodes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientsClientUuidNodesBody
    },
      options);
    }
  /**
 * @summary Unregister a cluster node from the client
 */
export const deleteAdminRealmsRealmClientsClientUuidNodesNode = (
    realm: string,
    clientUuid: string,
    node: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/nodes/${node}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get application offline session count Returns a number of offline user sessions associated with this client { "count": number }
 */
export const getAdminRealmsRealmClientsClientUuidOfflineSessionCount = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmClientsClientUuidOfflineSessionCount200>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/offline-session-count`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get offline sessions for client Returns a list of offline user sessions associated with this client
 */
export const getAdminRealmsRealmClientsClientUuidOfflineSessions = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserSessionRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/offline-sessions`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Get optional client scopes.  Only name and ids are returned.
 */
export const getAdminRealmsRealmClientsClientUuidOptionalClientScopes = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/optional-client-scopes`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/optional-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  export const deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/optional-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
 */
export const postAdminRealmsRealmClientsClientUuidPushRevocation = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/push-revocation`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Generate a new registration access token for the client
 */
export const postAdminRealmsRealmClientsClientUuidRegistrationAccessToken = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/registration-access-token`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Get a user dedicated to the service account
 */
export const getAdminRealmsRealmClientsClientUuidServiceAccountUser = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/service-account-user`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get application session count Returns a number of user sessions associated with this client { "count": number }
 */
export const getAdminRealmsRealmClientsClientUuidSessionCount = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmClientsClientUuidSessionCount200>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/session-count`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
 */
export const getAdminRealmsRealmClientsClientUuidTestNodesAvailable = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/test-nodes-available`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get user sessions for client Returns a list of user sessions associated with this client

 */
export const getAdminRealmsRealmClientsClientUuidUserSessions = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<UserSessionRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/user-sessions`, method: 'GET',
        params
    },
      options);
    }
  export type GetAdminRealmsRealmClientsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>>
export type PostAdminRealmsRealmClientsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClients>>>
export type GetAdminRealmsRealmClientsClientUuidResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>
export type PutAdminRealmsRealmClientsClientUuidResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuid>>>
export type DeleteAdminRealmsRealmClientsClientUuidResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuid>>>
export type GetAdminRealmsRealmClientsClientUuidClientSecretResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>
export type PostAdminRealmsRealmClientsClientUuidClientSecretResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidClientSecret>>>
export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>
export type DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidClientSecretRotated>>>
export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>
export type PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>>
export type DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>>
export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>
export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>
export type PutAdminRealmsRealmClientsClientUuidManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidManagementPermissions>>>
export type PostAdminRealmsRealmClientsClientUuidNodesResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidNodes>>>
export type DeleteAdminRealmsRealmClientsClientUuidNodesNodeResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidNodesNode>>>
export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>
export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>>
export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>
export type PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>>
export type DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>>
export type PostAdminRealmsRealmClientsClientUuidPushRevocationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidPushRevocation>>>
export type PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRegistrationAccessToken>>>
export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>
export type GetAdminRealmsRealmClientsClientUuidSessionCountResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>
export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>
export type GetAdminRealmsRealmClientsClientUuidUserSessionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>>
