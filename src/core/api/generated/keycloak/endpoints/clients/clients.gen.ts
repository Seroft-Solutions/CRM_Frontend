/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AccessToken,
  ClientRepresentation,
  ClientScopeRepresentation,
  CredentialRepresentation,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo200,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams,
  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams,
  GetAdminRealmsRealmClientsClientUuidOfflineSessionCount200,
  GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams,
  GetAdminRealmsRealmClientsClientUuidSessionCount200,
  GetAdminRealmsRealmClientsClientUuidUserSessionsParams,
  GetAdminRealmsRealmClientsParams,
  GlobalRequestResult,
  IDToken,
  ManagementPermissionReference,
  PostAdminRealmsRealmClientsClientUuidNodesBody,
  ProtocolMapperEvaluationRepresentation,
  RoleRepresentation,
  UserRepresentation,
  UserSessionRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * If a client can‚Äôt be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don‚Äôt prevent callers from retrieving this list.
 * @summary Get clients belonging to the realm.
 */
export const getAdminRealmsRealmClients = (
    realm: string,
    params?: GetAdminRealmsRealmClientsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientRepresentation[]>(
      {url: `/admin/realms/${realm}/clients`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsQueryKey = (realm: string,
    params?: GetAdminRealmsRealmClientsParams,) => {
    return [`/admin/realms/${realm}/clients`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, GetAdminRealmsRealmClientsParams['first']>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey, GetAdminRealmsRealmClientsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey, GetAdminRealmsRealmClientsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClients(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey, GetAdminRealmsRealmClientsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>>
export type GetAdminRealmsRealmClientsInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, GetAdminRealmsRealmClientsParams['first']>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmClientsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey, GetAdminRealmsRealmClientsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, GetAdminRealmsRealmClientsParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey, GetAdminRealmsRealmClientsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, GetAdminRealmsRealmClientsParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey, GetAdminRealmsRealmClientsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get clients belonging to the realm.
 */

export function useGetAdminRealmsRealmClientsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, GetAdminRealmsRealmClientsParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, QueryKey, GetAdminRealmsRealmClientsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>> = ({ signal }) => getAdminRealmsRealmClients(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>>
export type GetAdminRealmsRealmClientsQueryError = unknown


export function useGetAdminRealmsRealmClients<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmClientsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClients<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClients>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClients<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get clients belonging to the realm.
 */

export function useGetAdminRealmsRealmClients<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClients>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new client Client‚Äôs client_id must be unique!
 */
export const postAdminRealmsRealmClients = (
    realm: string,
    clientRepresentation: ClientRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: clientRepresentation, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClients>>, TError,{realm: string;data: ClientRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClients>>, TError,{realm: string;data: ClientRepresentation}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClients'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClients>>, {realm: string;data: ClientRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  postAdminRealmsRealmClients(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClients>>>
    export type PostAdminRealmsRealmClientsMutationBody = ClientRepresentation
    export type PostAdminRealmsRealmClientsMutationError = unknown

    /**
 * @summary Create a new client Client‚Äôs client_id must be unique!
 */
export const usePostAdminRealmsRealmClients = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClients>>, TError,{realm: string;data: ClientRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClients>>,
        TError,
        {realm: string;data: ClientRepresentation},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get representation of the client
 */
export const getAdminRealmsRealmClientsClientUuid = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuid(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>
export type GetAdminRealmsRealmClientsClientUuidInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get representation of the client
 */

export function useGetAdminRealmsRealmClientsClientUuidInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuid(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>>
export type GetAdminRealmsRealmClientsClientUuidQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuid<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuid<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuid<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get representation of the client
 */

export function useGetAdminRealmsRealmClientsClientUuid<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuid>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update the client
 */
export const putAdminRealmsRealmClientsClientUuid = (
    realm: string,
    clientUuid: string,
    clientRepresentation: ClientRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientsClientUuidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuid>>, TError,{realm: string;clientUuid: string;data: ClientRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuid>>, TError,{realm: string;clientUuid: string;data: ClientRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientsClientUuid'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuid>>, {realm: string;clientUuid: string;data: ClientRepresentation}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  putAdminRealmsRealmClientsClientUuid(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientsClientUuidMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuid>>>
    export type PutAdminRealmsRealmClientsClientUuidMutationBody = ClientRepresentation
    export type PutAdminRealmsRealmClientsClientUuidMutationError = unknown

    /**
 * @summary Update the client
 */
export const usePutAdminRealmsRealmClientsClientUuid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuid>>, TError,{realm: string;clientUuid: string;data: ClientRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuid>>,
        TError,
        {realm: string;clientUuid: string;data: ClientRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientsClientUuidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete the client
 */
export const deleteAdminRealmsRealmClientsClientUuid = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsClientUuidMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuid>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuid>>, TError,{realm: string;clientUuid: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsClientUuid'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuid>>, {realm: string;clientUuid: string}> = (props) => {
          const {realm,clientUuid} = props ?? {};

          return  deleteAdminRealmsRealmClientsClientUuid(realm,clientUuid,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsClientUuidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuid>>>
    
    export type DeleteAdminRealmsRealmClientsClientUuidMutationError = unknown

    /**
 * @summary Delete the client
 */
export const useDeleteAdminRealmsRealmClientsClientUuid = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuid>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuid>>,
        TError,
        {realm: string;clientUuid: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsClientUuidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get the client secret
 */
export const getAdminRealmsRealmClientsClientUuidClientSecret = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<CredentialRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidClientSecretQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/client-secret`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidClientSecretInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidClientSecretQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidClientSecret(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidClientSecretInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>
export type GetAdminRealmsRealmClientsClientUuidClientSecretInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidClientSecretInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecretInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecretInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the client secret
 */

export function useGetAdminRealmsRealmClientsClientUuidClientSecretInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidClientSecretInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidClientSecretQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidClientSecretQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidClientSecret(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidClientSecretQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>>
export type GetAdminRealmsRealmClientsClientUuidClientSecretQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidClientSecret<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecret<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecret<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the client secret
 */

export function useGetAdminRealmsRealmClientsClientUuidClientSecret<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecret>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidClientSecretQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Generate a new secret for the client
 */
export const postAdminRealmsRealmClientsClientUuidClientSecret = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<CredentialRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidClientSecretMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidClientSecret>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidClientSecret>>, TError,{realm: string;clientUuid: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidClientSecret'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidClientSecret>>, {realm: string;clientUuid: string}> = (props) => {
          const {realm,clientUuid} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidClientSecret(realm,clientUuid,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidClientSecretMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidClientSecret>>>
    
    export type PostAdminRealmsRealmClientsClientUuidClientSecretMutationError = unknown

    /**
 * @summary Generate a new secret for the client
 */
export const usePostAdminRealmsRealmClientsClientUuidClientSecret = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidClientSecret>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidClientSecret>>,
        TError,
        {realm: string;clientUuid: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidClientSecretMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get the rotated client secret
 */
export const getAdminRealmsRealmClientsClientUuidClientSecretRotated = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<CredentialRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret/rotated`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidClientSecretRotatedQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/client-secret/rotated`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidClientSecretRotatedQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidClientSecretRotated(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>
export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the rotated client secret
 */

export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidClientSecretRotatedInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidClientSecretRotatedQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidClientSecretRotatedQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidClientSecretRotated(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>>
export type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotated<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotated<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotated<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the rotated client secret
 */

export function useGetAdminRealmsRealmClientsClientUuidClientSecretRotated<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidClientSecretRotatedQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Invalidate the rotated secret for the client
 */
export const deleteAdminRealmsRealmClientsClientUuidClientSecretRotated = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/client-secret/rotated`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError,{realm: string;clientUuid: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsClientUuidClientSecretRotated'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidClientSecretRotated>>, {realm: string;clientUuid: string}> = (props) => {
          const {realm,clientUuid} = props ?? {};

          return  deleteAdminRealmsRealmClientsClientUuidClientSecretRotated(realm,clientUuid,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidClientSecretRotated>>>
    
    export type DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedMutationError = unknown

    /**
 * @summary Invalidate the rotated secret for the client
 */
export const useDeleteAdminRealmsRealmClientsClientUuidClientSecretRotated = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidClientSecretRotated>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidClientSecretRotated>>,
        TError,
        {realm: string;clientUuid: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get default client scopes.  Only name and ids are returned.
 */
export const getAdminRealmsRealmClientsClientUuidDefaultClientScopes = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/default-client-scopes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidDefaultClientScopesQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/default-client-scopes`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidDefaultClientScopesQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidDefaultClientScopes(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>
export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get default client scopes.  Only name and ids are returned.
 */

export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidDefaultClientScopesInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidDefaultClientScopesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidDefaultClientScopesQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidDefaultClientScopes(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>>
export type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get default client scopes.  Only name and ids are returned.
 */

export function useGetAdminRealmsRealmClientsClientUuidDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidDefaultClientScopesQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/default-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, {realm: string;clientUuid: string;clientScopeId: string}> = (props) => {
          const {realm,clientUuid,clientScopeId} = props ?? {};

          return  putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(realm,clientUuid,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>>
    
    export type PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationError = unknown

    export const usePutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>,
        TError,
        {realm: string;clientUuid: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/default-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, {realm: string;clientUuid: string;clientScopeId: string}> = (props) => {
          const {realm,clientUuid,clientScopeId} = props ?? {};

          return  deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(realm,clientUuid,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>>
    
    export type DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationError = unknown

    export const useDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId>>,
        TError,
        {realm: string;clientUuid: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create JSON with payload of example access token
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<AccessToken>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-access-token`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-access-token`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Create JSON with payload of example access token
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Create JSON with payload of example access token
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create JSON with payload of example id token
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<IDToken>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-id-token`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-id-token`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Create JSON with payload of example id token
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Create JSON with payload of example id token
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create JSON with payload of example user info
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo200>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-userinfo`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/generate-example-userinfo`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Create JSON with payload of example user info
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Create JSON with payload of example user info
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
 * @summary Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ProtocolMapperEvaluationRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/protocol-mappers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/protocol-mappers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError = void>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError = void>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError = void>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
 * @summary Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted = (
    realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/scope-mappings/${roleContainerId}/granted`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryKey = (realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/scope-mappings/${roleContainerId}/granted`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryKey(realm,clientUuid,roleContainerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted(realm,clientUuid,roleContainerId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && roleContainerId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedInfiniteQueryOptions(realm,clientUuid,roleContainerId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError = void>(realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryKey(realm,clientUuid,roleContainerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted(realm,clientUuid,roleContainerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && roleContainerId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedQueryOptions(realm,clientUuid,roleContainerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
 * @summary Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
 */
export const getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted = (
    realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RoleRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/scope-mappings/${roleContainerId}/not-granted`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryKey = (realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/evaluate-scopes/scope-mappings/${roleContainerId}/not-granted`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>, TError = void>(realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryKey(realm,clientUuid,roleContainerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted(realm,clientUuid,roleContainerId,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && roleContainerId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfiniteQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, QueryKey, GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedInfiniteQueryOptions(realm,clientUuid,roleContainerId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError = void>(realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryKey(realm,clientUuid,roleContainerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted(realm,clientUuid,roleContainerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && roleContainerId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>>
export type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryError = void


export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
 */

export function useGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError = void>(
 realm: string,
    clientUuid: string,
    roleContainerId: string,
    params?: GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedQueryOptions(realm,clientUuid,roleContainerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId = (
    realm: string,
    clientUuid: string,
    providerId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/installation/providers/${providerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdQueryKey = (realm: string,
    clientUuid: string,
    providerId: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/installation/providers/${providerId}`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>, TError = unknown>(realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdQueryKey(realm,clientUuid,providerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId(realm,clientUuid,providerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && providerId),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>
export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdInfiniteQueryOptions(realm,clientUuid,providerId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError = unknown>(realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdQueryKey(realm,clientUuid,providerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId(realm,clientUuid,providerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid && providerId),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>>
export type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    providerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdQueryOptions(realm,clientUuid,providerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const getAdminRealmsRealmClientsClientUuidManagementPermissions = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/management/permissions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidManagementPermissionsQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/management/permissions`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidManagementPermissionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidManagementPermissionsQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidManagementPermissions(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>
export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */

export function useGetAdminRealmsRealmClientsClientUuidManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidManagementPermissionsInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidManagementPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidManagementPermissionsQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidManagementPermissions(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>>
export type GetAdminRealmsRealmClientsClientUuidManagementPermissionsQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */

export function useGetAdminRealmsRealmClientsClientUuidManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidManagementPermissionsQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const putAdminRealmsRealmClientsClientUuidManagementPermissions = (
    realm: string,
    clientUuid: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/management/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientsClientUuidManagementPermissionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError,{realm: string;clientUuid: string;data: ManagementPermissionReference}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError,{realm: string;clientUuid: string;data: ManagementPermissionReference}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientsClientUuidManagementPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidManagementPermissions>>, {realm: string;clientUuid: string;data: ManagementPermissionReference}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  putAdminRealmsRealmClientsClientUuidManagementPermissions(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientsClientUuidManagementPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidManagementPermissions>>>
    export type PutAdminRealmsRealmClientsClientUuidManagementPermissionsMutationBody = ManagementPermissionReference
    export type PutAdminRealmsRealmClientsClientUuidManagementPermissionsMutationError = unknown

    /**
 * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
 */
export const usePutAdminRealmsRealmClientsClientUuidManagementPermissions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidManagementPermissions>>, TError,{realm: string;clientUuid: string;data: ManagementPermissionReference}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidManagementPermissions>>,
        TError,
        {realm: string;clientUuid: string;data: ManagementPermissionReference},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientsClientUuidManagementPermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Register a cluster node with the client Manually register cluster node to this client - usually it‚Äôs not needed to call this directly as adapter should handle by sending registration request to Keycloak
 */
export const postAdminRealmsRealmClientsClientUuidNodes = (
    realm: string,
    clientUuid: string,
    postAdminRealmsRealmClientsClientUuidNodesBody: PostAdminRealmsRealmClientsClientUuidNodesBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/nodes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientsClientUuidNodesBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidNodesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidNodes>>, TError,{realm: string;clientUuid: string;data: PostAdminRealmsRealmClientsClientUuidNodesBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidNodes>>, TError,{realm: string;clientUuid: string;data: PostAdminRealmsRealmClientsClientUuidNodesBody}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidNodes'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidNodes>>, {realm: string;clientUuid: string;data: PostAdminRealmsRealmClientsClientUuidNodesBody}> = (props) => {
          const {realm,clientUuid,data} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidNodes(realm,clientUuid,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidNodesMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidNodes>>>
    export type PostAdminRealmsRealmClientsClientUuidNodesMutationBody = PostAdminRealmsRealmClientsClientUuidNodesBody
    export type PostAdminRealmsRealmClientsClientUuidNodesMutationError = unknown

    /**
 * @summary Register a cluster node with the client Manually register cluster node to this client - usually it‚Äôs not needed to call this directly as adapter should handle by sending registration request to Keycloak
 */
export const usePostAdminRealmsRealmClientsClientUuidNodes = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidNodes>>, TError,{realm: string;clientUuid: string;data: PostAdminRealmsRealmClientsClientUuidNodesBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidNodes>>,
        TError,
        {realm: string;clientUuid: string;data: PostAdminRealmsRealmClientsClientUuidNodesBody},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidNodesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Unregister a cluster node from the client
 */
export const deleteAdminRealmsRealmClientsClientUuidNodesNode = (
    realm: string,
    clientUuid: string,
    node: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/nodes/${node}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsClientUuidNodesNodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidNodesNode>>, TError,{realm: string;clientUuid: string;node: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidNodesNode>>, TError,{realm: string;clientUuid: string;node: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsClientUuidNodesNode'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidNodesNode>>, {realm: string;clientUuid: string;node: string}> = (props) => {
          const {realm,clientUuid,node} = props ?? {};

          return  deleteAdminRealmsRealmClientsClientUuidNodesNode(realm,clientUuid,node,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsClientUuidNodesNodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidNodesNode>>>
    
    export type DeleteAdminRealmsRealmClientsClientUuidNodesNodeMutationError = unknown

    /**
 * @summary Unregister a cluster node from the client
 */
export const useDeleteAdminRealmsRealmClientsClientUuidNodesNode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidNodesNode>>, TError,{realm: string;clientUuid: string;node: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidNodesNode>>,
        TError,
        {realm: string;clientUuid: string;node: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsClientUuidNodesNodeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get application offline session count Returns a number of offline user sessions associated with this client { "count": number }
 */
export const getAdminRealmsRealmClientsClientUuidOfflineSessionCount = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GetAdminRealmsRealmClientsClientUuidOfflineSessionCount200>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/offline-session-count`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidOfflineSessionCountQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/offline-session-count`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidOfflineSessionCountQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidOfflineSessionCount(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>
export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get application offline session count Returns a number of offline user sessions associated with this client { "count": number }
 */

export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidOfflineSessionCountInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidOfflineSessionCountQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidOfflineSessionCountQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidOfflineSessionCount(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>>
export type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get application offline session count Returns a number of offline user sessions associated with this client { "count": number }
 */

export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidOfflineSessionCountQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get offline sessions for client Returns a list of offline user sessions associated with this client
 */
export const getAdminRealmsRealmClientsClientUuidOfflineSessions = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<UserSessionRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/offline-sessions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/offline-sessions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidOfflineSessionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidOfflineSessions(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>>
export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get offline sessions for client Returns a list of offline user sessions associated with this client
 */

export function useGetAdminRealmsRealmClientsClientUuidOfflineSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidOfflineSessionsInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidOfflineSessions(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>>
export type GetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidOfflineSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOfflineSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get offline sessions for client Returns a list of offline user sessions associated with this client
 */

export function useGetAdminRealmsRealmClientsClientUuidOfflineSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOfflineSessions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidOfflineSessionsQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get optional client scopes.  Only name and ids are returned.
 */
export const getAdminRealmsRealmClientsClientUuidOptionalClientScopes = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/optional-client-scopes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidOptionalClientScopesQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/optional-client-scopes`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidOptionalClientScopesQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidOptionalClientScopes(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>
export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get optional client scopes.  Only name and ids are returned.
 */

export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidOptionalClientScopesInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidOptionalClientScopesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidOptionalClientScopesQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidOptionalClientScopes(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>>
export type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get optional client scopes.  Only name and ids are returned.
 */

export function useGetAdminRealmsRealmClientsClientUuidOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidOptionalClientScopesQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/optional-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, {realm: string;clientUuid: string;clientScopeId: string}> = (props) => {
          const {realm,clientUuid,clientScopeId} = props ?? {};

          return  putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(realm,clientUuid,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>>
    
    export type PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationError = unknown

    export const usePutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>,
        TError,
        {realm: string;clientUuid: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = (
    realm: string,
    clientUuid: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/optional-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, {realm: string;clientUuid: string;clientScopeId: string}> = (props) => {
          const {realm,clientUuid,clientScopeId} = props ?? {};

          return  deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(realm,clientUuid,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>>
    
    export type DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationError = unknown

    export const useDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>, TError,{realm: string;clientUuid: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId>>,
        TError,
        {realm: string;clientUuid: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
 */
export const postAdminRealmsRealmClientsClientUuidPushRevocation = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/push-revocation`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidPushRevocationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidPushRevocation>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidPushRevocation>>, TError,{realm: string;clientUuid: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidPushRevocation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidPushRevocation>>, {realm: string;clientUuid: string}> = (props) => {
          const {realm,clientUuid} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidPushRevocation(realm,clientUuid,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidPushRevocationMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidPushRevocation>>>
    
    export type PostAdminRealmsRealmClientsClientUuidPushRevocationMutationError = unknown

    /**
 * @summary Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
 */
export const usePostAdminRealmsRealmClientsClientUuidPushRevocation = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidPushRevocation>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidPushRevocation>>,
        TError,
        {realm: string;clientUuid: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidPushRevocationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Generate a new registration access token for the client
 */
export const postAdminRealmsRealmClientsClientUuidRegistrationAccessToken = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/registration-access-token`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRegistrationAccessToken>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRegistrationAccessToken>>, TError,{realm: string;clientUuid: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientsClientUuidRegistrationAccessToken'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRegistrationAccessToken>>, {realm: string;clientUuid: string}> = (props) => {
          const {realm,clientUuid} = props ?? {};

          return  postAdminRealmsRealmClientsClientUuidRegistrationAccessToken(realm,clientUuid,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRegistrationAccessToken>>>
    
    export type PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenMutationError = unknown

    /**
 * @summary Generate a new registration access token for the client
 */
export const usePostAdminRealmsRealmClientsClientUuidRegistrationAccessToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRegistrationAccessToken>>, TError,{realm: string;clientUuid: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientsClientUuidRegistrationAccessToken>>,
        TError,
        {realm: string;clientUuid: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get a user dedicated to the service account
 */
export const getAdminRealmsRealmClientsClientUuidServiceAccountUser = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<UserRepresentation>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/service-account-user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidServiceAccountUserQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/service-account-user`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidServiceAccountUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidServiceAccountUserQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidServiceAccountUser(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>
export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a user dedicated to the service account
 */

export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidServiceAccountUserInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidServiceAccountUserQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidServiceAccountUserQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidServiceAccountUser(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>>
export type GetAdminRealmsRealmClientsClientUuidServiceAccountUserQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUser<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUser<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUser<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a user dedicated to the service account
 */

export function useGetAdminRealmsRealmClientsClientUuidServiceAccountUser<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidServiceAccountUser>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidServiceAccountUserQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get application session count Returns a number of user sessions associated with this client { "count": number }
 */
export const getAdminRealmsRealmClientsClientUuidSessionCount = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GetAdminRealmsRealmClientsClientUuidSessionCount200>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/session-count`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidSessionCountQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/session-count`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidSessionCountInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidSessionCountQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidSessionCount(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidSessionCountInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>
export type GetAdminRealmsRealmClientsClientUuidSessionCountInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get application session count Returns a number of user sessions associated with this client { "count": number }
 */

export function useGetAdminRealmsRealmClientsClientUuidSessionCountInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidSessionCountInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidSessionCountQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidSessionCountQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidSessionCount(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidSessionCountQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>>
export type GetAdminRealmsRealmClientsClientUuidSessionCountQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get application session count Returns a number of user sessions associated with this client { "count": number }
 */

export function useGetAdminRealmsRealmClientsClientUuidSessionCount<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidSessionCount>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidSessionCountQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
 */
export const getAdminRealmsRealmClientsClientUuidTestNodesAvailable = (
    realm: string,
    clientUuid: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/test-nodes-available`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidTestNodesAvailableQueryKey = (realm: string,
    clientUuid: string,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/test-nodes-available`] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidTestNodesAvailableQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidTestNodesAvailable(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>
export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
 */

export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidTestNodesAvailableInfiniteQueryOptions(realm,clientUuid,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidTestNodesAvailableQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError = unknown>(realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidTestNodesAvailableQueryKey(realm,clientUuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidTestNodesAvailable(realm,clientUuid, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>>
export type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError = unknown>(
 realm: string,
    clientUuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
 */

export function useGetAdminRealmsRealmClientsClientUuidTestNodesAvailable<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError = unknown>(
 realm: string,
    clientUuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidTestNodesAvailable>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidTestNodesAvailableQueryOptions(realm,clientUuid,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get user sessions for client Returns a list of user sessions associated with this client

 */
export const getAdminRealmsRealmClientsClientUuidUserSessions = (
    realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<UserSessionRepresentation[]>(
      {url: `/admin/realms/${realm}/clients/${clientUuid}/user-sessions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientsClientUuidUserSessionsQueryKey = (realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams,) => {
    return [`/admin/realms/${realm}/clients/${clientUuid}/user-sessions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientsClientUuidUserSessionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidUserSessionsQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientsClientUuidUserSessions(realm,clientUuid,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidUserSessionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>>
export type GetAdminRealmsRealmClientsClientUuidUserSessionsInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidUserSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidUserSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidUserSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user sessions for client Returns a list of user sessions associated with this client

 */

export function useGetAdminRealmsRealmClientsClientUuidUserSessionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, QueryKey, GetAdminRealmsRealmClientsClientUuidUserSessionsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidUserSessionsInfiniteQueryOptions(realm,clientUuid,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientsClientUuidUserSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError = unknown>(realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientsClientUuidUserSessionsQueryKey(realm,clientUuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>> = ({ signal }) => getAdminRealmsRealmClientsClientUuidUserSessions(realm,clientUuid,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && clientUuid),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientsClientUuidUserSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>>
export type GetAdminRealmsRealmClientsClientUuidUserSessionsQueryError = unknown


export function useGetAdminRealmsRealmClientsClientUuidUserSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params: undefined |  GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidUserSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientsClientUuidUserSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user sessions for client Returns a list of user sessions associated with this client

 */

export function useGetAdminRealmsRealmClientsClientUuidUserSessions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError = unknown>(
 realm: string,
    clientUuid: string,
    params?: GetAdminRealmsRealmClientsClientUuidUserSessionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientsClientUuidUserSessions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientsClientUuidUserSessionsQueryOptions(realm,clientUuid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



