/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  ComponentRepresentation,
  ComponentTypeRepresentation,
  GetAdminRealmsRealmComponentsIdSubComponentTypesParams,
  GetAdminRealmsRealmComponentsParams
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  export const getAdminRealmsRealmComponents = (
    realm: string,
    params?: GetAdminRealmsRealmComponentsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ComponentRepresentation[]>(
      {url: `/admin/realms/${realm}/components`, method: 'GET',
        params
    },
      options);
    }
  export const postAdminRealmsRealmComponents = (
    realm: string,
    componentRepresentation: ComponentRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/components`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: componentRepresentation
    },
      options);
    }
  export const getAdminRealmsRealmComponentsId = (
    realm: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ComponentRepresentation>(
      {url: `/admin/realms/${realm}/components/${id}`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmComponentsId = (
    realm: string,
    id: string,
    componentRepresentation: ComponentRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/components/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: componentRepresentation
    },
      options);
    }
  export const deleteAdminRealmsRealmComponentsId = (
    realm: string,
    id: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/components/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary List of subcomponent types that are available to configure for a particular parent component.
 */
export const getAdminRealmsRealmComponentsIdSubComponentTypes = (
    realm: string,
    id: string,
    params?: GetAdminRealmsRealmComponentsIdSubComponentTypesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ComponentTypeRepresentation[]>(
      {url: `/admin/realms/${realm}/components/${id}/sub-component-types`, method: 'GET',
        params
    },
      options);
    }
  export type GetAdminRealmsRealmComponentsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmComponents>>>
export type PostAdminRealmsRealmComponentsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmComponents>>>
export type GetAdminRealmsRealmComponentsIdResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmComponentsId>>>
export type PutAdminRealmsRealmComponentsIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmComponentsId>>>
export type DeleteAdminRealmsRealmComponentsIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmComponentsId>>>
export type GetAdminRealmsRealmComponentsIdSubComponentTypesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmComponentsIdSubComponentTypes>>>
