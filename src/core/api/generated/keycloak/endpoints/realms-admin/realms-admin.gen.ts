/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import type {
  AdminEventRepresentation,
  ClientPoliciesRepresentation,
  ClientProfilesRepresentation,
  ClientRepresentation,
  ClientScopeRepresentation,
  ClientTypesRepresentation,
  DeleteAdminRealmsRealmSessionsSessionParams,
  EventRepresentation,
  GetAdminRealmsParams,
  GetAdminRealmsRealmAdminEventsParams,
  GetAdminRealmsRealmClientPoliciesPoliciesParams,
  GetAdminRealmsRealmClientPoliciesProfilesParams,
  GetAdminRealmsRealmClientSessionStats200Item,
  GetAdminRealmsRealmEventsParams,
  GetAdminRealmsRealmLocalizationLocale200,
  GetAdminRealmsRealmLocalizationLocaleParams,
  GlobalRequestResult,
  GroupRepresentation,
  ManagementPermissionReference,
  PostAdminRealmsRealmLocalizationLocaleBody,
  PostAdminRealmsRealmPartialExportParams,
  PostAdminRealmsRealmPartialImport200,
  PostAdminRealmsRealmTestSMTPConnectionBodyOne,
  PostAdminRealmsRealmTestSMTPConnectionBodyTwo,
  RealmEventsConfigRepresentation,
  RealmRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from "@/core/api/services/keycloak-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
 */
export const getAdminRealms = (
    params?: GetAdminRealmsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RealmRepresentation[]>(
      {url: `/admin/realms`, method: 'GET',
        params
    },
      options);
    }
  /**
 * Realm name must be unique.
 * @summary Import a realm. Imports a realm from a full representation of that realm.
 */
export const postAdminRealms = (
    postAdminRealmsBody: Blob,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsBody
    },
      options);
    }
  /**
 * @summary Get the top-level representation of the realm It will not include nested information like User and Client representations.
 */
export const getAdminRealmsRealm = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RealmRepresentation>(
      {url: `/admin/realms/${realm}`, method: 'GET'
    },
      options);
    }
  /**
 * This will only update top-level attributes of the realm.
 * @summary Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
 */
export const putAdminRealmsRealm = (
    realm: string,
    realmRepresentation: RealmRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: realmRepresentation
    },
      options);
    }
  /**
 * @summary Delete the realm
 */
export const deleteAdminRealmsRealm = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get admin events Returns all admin events, or filters events based on URL query parameters listed here
 */
export const getAdminRealmsRealmAdminEvents = (
    realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<AdminEventRepresentation[]>(
      {url: `/admin/realms/${realm}/admin-events`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Delete all admin events
 */
export const deleteAdminRealmsRealmAdminEvents = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/admin-events`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Base path for importing clients under this realm.
 */
export const postAdminRealmsRealmClientDescriptionConverter = (
    realm: string,
    postAdminRealmsRealmClientDescriptionConverterBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientRepresentation>(
      {url: `/admin/realms/${realm}/client-description-converter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientDescriptionConverterBody
    },
      options);
    }
  export const getAdminRealmsRealmClientPoliciesPolicies = (
    realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientPoliciesRepresentation>(
      {url: `/admin/realms/${realm}/client-policies/policies`, method: 'GET',
        params
    },
      options);
    }
  export const putAdminRealmsRealmClientPoliciesPolicies = (
    realm: string,
    clientPoliciesRepresentation: ClientPoliciesRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-policies/policies`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientPoliciesRepresentation
    },
      options);
    }
  export const getAdminRealmsRealmClientPoliciesProfiles = (
    realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientProfilesRepresentation>(
      {url: `/admin/realms/${realm}/client-policies/profiles`, method: 'GET',
        params
    },
      options);
    }
  export const putAdminRealmsRealmClientPoliciesProfiles = (
    realm: string,
    clientProfilesRepresentation: ClientProfilesRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-policies/profiles`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientProfilesRepresentation
    },
      options);
    }
  /**
 * The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
 * @summary Get client session stats Returns a JSON map.
 */
export const getAdminRealmsRealmClientSessionStats = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmClientSessionStats200Item[]>(
      {url: `/admin/realms/${realm}/client-session-stats`, method: 'GET'
    },
      options);
    }
  /**
 * This endpoint returns a list of both global and realm level client types and the attributes they set
 * @summary List all client types available in the current realm
 */
export const getAdminRealmsRealmClientTypes = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientTypesRepresentation>(
      {url: `/admin/realms/${realm}/client-types`, method: 'GET'
    },
      options);
    }
  /**
 * This endpoint allows you to update a realm level client type
 * @summary Update a client type
 */
export const putAdminRealmsRealmClientTypes = (
    realm: string,
    clientTypesRepresentation: ClientTypesRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-types`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientTypesRepresentation
    },
      options);
    }
  export const getAdminRealmsRealmCredentialRegistrators = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<string[]>(
      {url: `/admin/realms/${realm}/credential-registrators`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get realm default client scopes. Only name and ids are returned.
 */
export const getAdminRealmsRealmDefaultDefaultClientScopes = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/default-default-client-scopes`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-default-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  export const deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-default-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get group hierarchy.  Only name and ids are returned.
 */
export const getAdminRealmsRealmDefaultGroups = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GroupRepresentation[]>(
      {url: `/admin/realms/${realm}/default-groups`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmDefaultGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-groups/${groupId}`, method: 'PUT'
    },
      options);
    }
  export const deleteAdminRealmsRealmDefaultGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get realm optional client scopes. Only name and ids are returned.
 */
export const getAdminRealmsRealmDefaultOptionalClientScopes = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/default-optional-client-scopes`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-optional-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  export const deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-optional-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get events Returns all events, or filters them based on URL query parameters listed here
 */
export const getAdminRealmsRealmEvents = (
    realm: string,
    params?: GetAdminRealmsRealmEventsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<EventRepresentation[]>(
      {url: `/admin/realms/${realm}/events`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Delete all events
 */
export const deleteAdminRealmsRealmEvents = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/events`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get the events provider configuration Returns JSON object with events provider configuration
 */
export const getAdminRealmsRealmEventsConfig = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RealmEventsConfigRepresentation>(
      {url: `/admin/realms/${realm}/events/config`, method: 'GET'
    },
      options);
    }
  /**
 * Update the events provider Change the events provider and/or its configuration
 */
export const putAdminRealmsRealmEventsConfig = (
    realm: string,
    realmEventsConfigRepresentation: RealmEventsConfigRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/events/config`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: realmEventsConfigRepresentation
    },
      options);
    }
  export const getAdminRealmsRealmGroupByPathPath = (
    realm: string,
    path: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GroupRepresentation>(
      {url: `/admin/realms/${realm}/group-by-path/${path}`, method: 'GET'
    },
      options);
    }
  export const getAdminRealmsRealmLocalization = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<string[]>(
      {url: `/admin/realms/${realm}/localization`, method: 'GET'
    },
      options);
    }
  export const getAdminRealmsRealmLocalizationLocale = (
    realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GetAdminRealmsRealmLocalizationLocale200>(
      {url: `/admin/realms/${realm}/localization/${locale}`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Import localization from uploaded JSON file
 */
export const postAdminRealmsRealmLocalizationLocale = (
    realm: string,
    locale: string,
    postAdminRealmsRealmLocalizationLocaleBody: PostAdminRealmsRealmLocalizationLocaleBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmLocalizationLocaleBody
    },
      options);
    }
  export const deleteAdminRealmsRealmLocalizationLocale = (
    realm: string,
    locale: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}`, method: 'DELETE'
    },
      options);
    }
  export const getAdminRealmsRealmLocalizationLocaleKey = (
    realm: string,
    locale: string,
    key: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<string>(
      {url: `/admin/realms/${realm}/localization/${locale}/${key}`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmLocalizationLocaleKey = (
    realm: string,
    locale: string,
    key: string,
    putAdminRealmsRealmLocalizationLocaleKeyBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}/${key}`, method: 'PUT',
      headers: {'Content-Type': 'text/plain', },
      data: putAdminRealmsRealmLocalizationLocaleKeyBody
    },
      options);
    }
  export const deleteAdminRealmsRealmLocalizationLocaleKey = (
    realm: string,
    locale: string,
    key: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}/${key}`, method: 'DELETE'
    },
      options);
    }
  /**
 * Any client that has an admin url will also be told to invalidate any sessions they have.
 * @summary Removes all user sessions.
 */
export const postAdminRealmsRealmLogoutAll = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/logout-all`, method: 'POST'
    },
      options);
    }
  /**
 * @summary Partial export of existing realm into a JSON file.
 */
export const postAdminRealmsRealmPartialExport = (
    realm: string,
    params?: PostAdminRealmsRealmPartialExportParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<RealmRepresentation>(
      {url: `/admin/realms/${realm}/partial-export`, method: 'POST',
        params
    },
      options);
    }
  /**
 * @summary Partial import from a JSON file to an existing realm.
 */
export const postAdminRealmsRealmPartialImport = (
    realm: string,
    postAdminRealmsRealmPartialImportBody: Blob,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<PostAdminRealmsRealmPartialImport200>(
      {url: `/admin/realms/${realm}/partialImport`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmPartialImportBody
    },
      options);
    }
  /**
 * @summary Push the realm's revocation policy to any client that has an admin url associated with it.
 */
export const postAdminRealmsRealmPushRevocation = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/push-revocation`, method: 'POST'
    },
      options);
    }
  /**
 * Any client that has an admin url will also be told to invalidate this particular session.
 * @summary Remove a specific user session.
 */
export const deleteAdminRealmsRealmSessionsSession = (
    realm: string,
    session: string,
    params?: DeleteAdminRealmsRealmSessionsSessionParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/sessions/${session}`, method: 'DELETE',
        params
    },
      options);
    }
  /**
 * @deprecated
 * @summary Test SMTP connection with current logged in user
 */
export const postAdminRealmsRealmTestSMTPConnection = (
    realm: string,
    postAdminRealmsRealmTestSMTPConnectionBody: PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/testSMTPConnection`, method: 'POST',
      data: postAdminRealmsRealmTestSMTPConnectionBody
    },
      options);
    }
  export const getAdminRealmsRealmUsersManagementPermissions = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/users-management-permissions`, method: 'GET'
    },
      options);
    }
  export const putAdminRealmsRealmUsersManagementPermissions = (
    realm: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/users-management-permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  export type GetAdminRealmsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealms>>>
export type PostAdminRealmsResult = NonNullable<Awaited<ReturnType<typeof postAdminRealms>>>
export type GetAdminRealmsRealmResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealm>>>
export type PutAdminRealmsRealmResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealm>>>
export type DeleteAdminRealmsRealmResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealm>>>
export type GetAdminRealmsRealmAdminEventsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>>
export type DeleteAdminRealmsRealmAdminEventsResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmAdminEvents>>>
export type PostAdminRealmsRealmClientDescriptionConverterResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientDescriptionConverter>>>
export type GetAdminRealmsRealmClientPoliciesPoliciesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>>
export type PutAdminRealmsRealmClientPoliciesPoliciesResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesPolicies>>>
export type GetAdminRealmsRealmClientPoliciesProfilesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>>
export type PutAdminRealmsRealmClientPoliciesProfilesResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesProfiles>>>
export type GetAdminRealmsRealmClientSessionStatsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>
export type GetAdminRealmsRealmClientTypesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>
export type PutAdminRealmsRealmClientTypesResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientTypes>>>
export type GetAdminRealmsRealmCredentialRegistratorsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>
export type GetAdminRealmsRealmDefaultDefaultClientScopesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>
export type PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>>
export type DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>>
export type GetAdminRealmsRealmDefaultGroupsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>
export type PutAdminRealmsRealmDefaultGroupsGroupIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultGroupsGroupId>>>
export type DeleteAdminRealmsRealmDefaultGroupsGroupIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultGroupsGroupId>>>
export type GetAdminRealmsRealmDefaultOptionalClientScopesResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>
export type PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>>
export type DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>>
export type GetAdminRealmsRealmEventsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>>
export type DeleteAdminRealmsRealmEventsResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmEvents>>>
export type GetAdminRealmsRealmEventsConfigResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>
export type PutAdminRealmsRealmEventsConfigResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmEventsConfig>>>
export type GetAdminRealmsRealmGroupByPathPathResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>
export type GetAdminRealmsRealmLocalizationResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>
export type GetAdminRealmsRealmLocalizationLocaleResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>>
export type PostAdminRealmsRealmLocalizationLocaleResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmLocalizationLocale>>>
export type DeleteAdminRealmsRealmLocalizationLocaleResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocale>>>
export type GetAdminRealmsRealmLocalizationLocaleKeyResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>
export type PutAdminRealmsRealmLocalizationLocaleKeyResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmLocalizationLocaleKey>>>
export type DeleteAdminRealmsRealmLocalizationLocaleKeyResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocaleKey>>>
export type PostAdminRealmsRealmLogoutAllResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmLogoutAll>>>
export type PostAdminRealmsRealmPartialExportResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmPartialExport>>>
export type PostAdminRealmsRealmPartialImportResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmPartialImport>>>
export type PostAdminRealmsRealmPushRevocationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmPushRevocation>>>
export type DeleteAdminRealmsRealmSessionsSessionResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmSessionsSession>>>
export type PostAdminRealmsRealmTestSMTPConnectionResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmTestSMTPConnection>>>
export type GetAdminRealmsRealmUsersManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>
export type PutAdminRealmsRealmUsersManagementPermissionsResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersManagementPermissions>>>
