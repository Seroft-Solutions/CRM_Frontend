/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AdminEventRepresentation,
  ClientPoliciesRepresentation,
  ClientProfilesRepresentation,
  ClientRepresentation,
  ClientScopeRepresentation,
  ClientTypesRepresentation,
  DeleteAdminRealmsRealmSessionsSessionParams,
  EventRepresentation,
  GetAdminRealmsParams,
  GetAdminRealmsRealmAdminEventsParams,
  GetAdminRealmsRealmClientPoliciesPoliciesParams,
  GetAdminRealmsRealmClientPoliciesProfilesParams,
  GetAdminRealmsRealmClientSessionStats200Item,
  GetAdminRealmsRealmEventsParams,
  GetAdminRealmsRealmLocalizationLocale200,
  GetAdminRealmsRealmLocalizationLocaleParams,
  GlobalRequestResult,
  GroupRepresentation,
  ManagementPermissionReference,
  PostAdminRealmsRealmLocalizationLocaleBody,
  PostAdminRealmsRealmPartialExportParams,
  PostAdminRealmsRealmPartialImport200,
  PostAdminRealmsRealmTestSMTPConnectionBodyOne,
  PostAdminRealmsRealmTestSMTPConnectionBodyTwo,
  RealmEventsConfigRepresentation,
  RealmRepresentation
} from '../../schemas';

import { keycloakServiceMutator } from '../../../../services/keycloak-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
 */
export const getAdminRealms = (
    params?: GetAdminRealmsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RealmRepresentation[]>(
      {url: `/admin/realms`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsQueryKey = (params?: GetAdminRealmsParams,) => {
    return [`/admin/realms`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealms>>, GetAdminRealmsParams['first']>, TError = void>(params?: GetAdminRealmsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData, Awaited<ReturnType<typeof getAdminRealms>>, QueryKey, GetAdminRealmsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealms>>, QueryKey, GetAdminRealmsParams['first']> = ({ signal, pageParam }) => getAdminRealms({...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData, Awaited<ReturnType<typeof getAdminRealms>>, QueryKey, GetAdminRealmsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealms>>>
export type GetAdminRealmsInfiniteQueryError = void


export function useGetAdminRealmsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealms>>, GetAdminRealmsParams['first']>, TError = void>(
 params: undefined |  GetAdminRealmsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData, Awaited<ReturnType<typeof getAdminRealms>>, QueryKey, GetAdminRealmsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealms>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealms>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealms>>, GetAdminRealmsParams['first']>, TError = void>(
 params?: GetAdminRealmsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData, Awaited<ReturnType<typeof getAdminRealms>>, QueryKey, GetAdminRealmsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealms>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealms>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealms>>, GetAdminRealmsParams['first']>, TError = void>(
 params?: GetAdminRealmsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData, Awaited<ReturnType<typeof getAdminRealms>>, QueryKey, GetAdminRealmsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
 */

export function useGetAdminRealmsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealms>>, GetAdminRealmsParams['first']>, TError = void>(
 params?: GetAdminRealmsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData, Awaited<ReturnType<typeof getAdminRealms>>, QueryKey, GetAdminRealmsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealms>>, TError = void>(params?: GetAdminRealmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealms>>> = ({ signal }) => getAdminRealms(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealms>>>
export type GetAdminRealmsQueryError = void


export function useGetAdminRealms<TData = Awaited<ReturnType<typeof getAdminRealms>>, TError = void>(
 params: undefined |  GetAdminRealmsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealms>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealms>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealms<TData = Awaited<ReturnType<typeof getAdminRealms>>, TError = void>(
 params?: GetAdminRealmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealms>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealms>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealms<TData = Awaited<ReturnType<typeof getAdminRealms>>, TError = void>(
 params?: GetAdminRealmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
 */

export function useGetAdminRealms<TData = Awaited<ReturnType<typeof getAdminRealms>>, TError = void>(
 params?: GetAdminRealmsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealms>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Realm name must be unique.
 * @summary Import a realm. Imports a realm from a full representation of that realm.
 */
export const postAdminRealms = (
    postAdminRealmsBody: Blob,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealms>>, TError,{data: Blob}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealms>>, TError,{data: Blob}, TContext> => {
    
const mutationKey = ['postAdminRealms'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealms>>, {data: Blob}> = (props) => {
          const {data} = props ?? {};

          return  postAdminRealms(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealms>>>
    export type PostAdminRealmsMutationBody = Blob
    export type PostAdminRealmsMutationError = void

    /**
 * @summary Import a realm. Imports a realm from a full representation of that realm.
 */
export const usePostAdminRealms = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealms>>, TError,{data: Blob}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealms>>,
        TError,
        {data: Blob},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get the top-level representation of the realm It will not include nested information like User and Client representations.
 */
export const getAdminRealmsRealm = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RealmRepresentation>(
      {url: `/admin/realms/${realm}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}`] as const;
    }

    
export const getGetAdminRealmsRealmInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealm>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealm>>> = ({ signal }) => getAdminRealmsRealm(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealm>>>
export type GetAdminRealmsRealmInfiniteQueryError = void


export function useGetAdminRealmsRealmInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealm>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealm>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealm>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealm>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealm>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealm>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealm>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the top-level representation of the realm It will not include nested information like User and Client representations.
 */

export function useGetAdminRealmsRealmInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealm>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealm>>> = ({ signal }) => getAdminRealmsRealm(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealm>>>
export type GetAdminRealmsRealmQueryError = void


export function useGetAdminRealmsRealm<TData = Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealm>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealm>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealm<TData = Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealm>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealm>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealm<TData = Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the top-level representation of the realm It will not include nested information like User and Client representations.
 */

export function useGetAdminRealmsRealm<TData = Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealm>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This will only update top-level attributes of the realm.
 * @summary Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
 */
export const putAdminRealmsRealm = (
    realm: string,
    realmRepresentation: RealmRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: realmRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealm>>, TError,{realm: string;data: RealmRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealm>>, TError,{realm: string;data: RealmRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealm'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealm>>, {realm: string;data: RealmRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  putAdminRealmsRealm(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealm>>>
    export type PutAdminRealmsRealmMutationBody = RealmRepresentation
    export type PutAdminRealmsRealmMutationError = void

    /**
 * @summary Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
 */
export const usePutAdminRealmsRealm = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealm>>, TError,{realm: string;data: RealmRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealm>>,
        TError,
        {realm: string;data: RealmRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete the realm
 */
export const deleteAdminRealmsRealm = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealm>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealm>>, TError,{realm: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealm'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealm>>, {realm: string}> = (props) => {
          const {realm} = props ?? {};

          return  deleteAdminRealmsRealm(realm,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealm>>>
    
    export type DeleteAdminRealmsRealmMutationError = void

    /**
 * @summary Delete the realm
 */
export const useDeleteAdminRealmsRealm = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealm>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealm>>,
        TError,
        {realm: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get admin events Returns all admin events, or filters events based on URL query parameters listed here
 */
export const getAdminRealmsRealmAdminEvents = (
    realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<AdminEventRepresentation[]>(
      {url: `/admin/realms/${realm}/admin-events`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmAdminEventsQueryKey = (realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams,) => {
    return [`/admin/realms/${realm}/admin-events`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmAdminEventsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, GetAdminRealmsRealmAdminEventsParams['first']>, TError = void>(realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey, GetAdminRealmsRealmAdminEventsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmAdminEventsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey, GetAdminRealmsRealmAdminEventsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmAdminEvents(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey, GetAdminRealmsRealmAdminEventsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmAdminEventsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>>
export type GetAdminRealmsRealmAdminEventsInfiniteQueryError = void


export function useGetAdminRealmsRealmAdminEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, GetAdminRealmsRealmAdminEventsParams['first']>, TError = void>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmAdminEventsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey, GetAdminRealmsRealmAdminEventsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmAdminEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, GetAdminRealmsRealmAdminEventsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey, GetAdminRealmsRealmAdminEventsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmAdminEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, GetAdminRealmsRealmAdminEventsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey, GetAdminRealmsRealmAdminEventsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get admin events Returns all admin events, or filters events based on URL query parameters listed here
 */

export function useGetAdminRealmsRealmAdminEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, GetAdminRealmsRealmAdminEventsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, QueryKey, GetAdminRealmsRealmAdminEventsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmAdminEventsInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmAdminEventsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError = void>(realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmAdminEventsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>> = ({ signal }) => getAdminRealmsRealmAdminEvents(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmAdminEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>>
export type GetAdminRealmsRealmAdminEventsQueryError = void


export function useGetAdminRealmsRealmAdminEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError = void>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmAdminEventsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmAdminEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmAdminEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get admin events Returns all admin events, or filters events based on URL query parameters listed here
 */

export function useGetAdminRealmsRealmAdminEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmAdminEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmAdminEvents>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmAdminEventsQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete all admin events
 */
export const deleteAdminRealmsRealmAdminEvents = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/admin-events`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmAdminEventsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmAdminEvents>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmAdminEvents>>, TError,{realm: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmAdminEvents'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmAdminEvents>>, {realm: string}> = (props) => {
          const {realm} = props ?? {};

          return  deleteAdminRealmsRealmAdminEvents(realm,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmAdminEventsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmAdminEvents>>>
    
    export type DeleteAdminRealmsRealmAdminEventsMutationError = void

    /**
 * @summary Delete all admin events
 */
export const useDeleteAdminRealmsRealmAdminEvents = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmAdminEvents>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmAdminEvents>>,
        TError,
        {realm: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmAdminEventsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Base path for importing clients under this realm.
 */
export const postAdminRealmsRealmClientDescriptionConverter = (
    realm: string,
    postAdminRealmsRealmClientDescriptionConverterBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientRepresentation>(
      {url: `/admin/realms/${realm}/client-description-converter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmClientDescriptionConverterBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmClientDescriptionConverterMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientDescriptionConverter>>, TError,{realm: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientDescriptionConverter>>, TError,{realm: string;data: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmClientDescriptionConverter'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmClientDescriptionConverter>>, {realm: string;data: string}> = (props) => {
          const {realm,data} = props ?? {};

          return  postAdminRealmsRealmClientDescriptionConverter(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmClientDescriptionConverterMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmClientDescriptionConverter>>>
    export type PostAdminRealmsRealmClientDescriptionConverterMutationBody = string
    export type PostAdminRealmsRealmClientDescriptionConverterMutationError = void

    /**
 * @summary Base path for importing clients under this realm.
 */
export const usePostAdminRealmsRealmClientDescriptionConverter = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmClientDescriptionConverter>>, TError,{realm: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmClientDescriptionConverter>>,
        TError,
        {realm: string;data: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmClientDescriptionConverterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientPoliciesPolicies = (
    realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientPoliciesRepresentation>(
      {url: `/admin/realms/${realm}/client-policies/policies`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientPoliciesPoliciesQueryKey = (realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams,) => {
    return [`/admin/realms/${realm}/client-policies/policies`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientPoliciesPoliciesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientPoliciesPoliciesQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientPoliciesPolicies(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientPoliciesPoliciesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>>
export type GetAdminRealmsRealmClientPoliciesPoliciesInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientPoliciesPoliciesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmClientPoliciesPoliciesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesPoliciesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesPoliciesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientPoliciesPoliciesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, QueryKey, GetAdminRealmsRealmClientPoliciesPoliciesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientPoliciesPoliciesInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientPoliciesPoliciesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientPoliciesPoliciesQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>> = ({ signal }) => getAdminRealmsRealmClientPoliciesPolicies(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientPoliciesPoliciesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>>
export type GetAdminRealmsRealmClientPoliciesPoliciesQueryError = unknown


export function useGetAdminRealmsRealmClientPoliciesPolicies<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmClientPoliciesPoliciesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesPolicies<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesPolicies<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientPoliciesPolicies<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesPoliciesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesPolicies>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientPoliciesPoliciesQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmClientPoliciesPolicies = (
    realm: string,
    clientPoliciesRepresentation: ClientPoliciesRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-policies/policies`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientPoliciesRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientPoliciesPoliciesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesPolicies>>, TError,{realm: string;data: ClientPoliciesRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesPolicies>>, TError,{realm: string;data: ClientPoliciesRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientPoliciesPolicies'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesPolicies>>, {realm: string;data: ClientPoliciesRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  putAdminRealmsRealmClientPoliciesPolicies(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientPoliciesPoliciesMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesPolicies>>>
    export type PutAdminRealmsRealmClientPoliciesPoliciesMutationBody = ClientPoliciesRepresentation
    export type PutAdminRealmsRealmClientPoliciesPoliciesMutationError = unknown

    export const usePutAdminRealmsRealmClientPoliciesPolicies = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesPolicies>>, TError,{realm: string;data: ClientPoliciesRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesPolicies>>,
        TError,
        {realm: string;data: ClientPoliciesRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientPoliciesPoliciesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmClientPoliciesProfiles = (
    realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientProfilesRepresentation>(
      {url: `/admin/realms/${realm}/client-policies/profiles`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientPoliciesProfilesQueryKey = (realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams,) => {
    return [`/admin/realms/${realm}/client-policies/profiles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmClientPoliciesProfilesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientPoliciesProfilesQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey, GetAdminRealmsRealmClientPoliciesProfilesParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmClientPoliciesProfiles(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey, GetAdminRealmsRealmClientPoliciesProfilesParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientPoliciesProfilesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>>
export type GetAdminRealmsRealmClientPoliciesProfilesInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientPoliciesProfilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmClientPoliciesProfilesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesProfilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesProfilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientPoliciesProfilesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, QueryKey, GetAdminRealmsRealmClientPoliciesProfilesParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientPoliciesProfilesInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientPoliciesProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError = unknown>(realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientPoliciesProfilesQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>> = ({ signal }) => getAdminRealmsRealmClientPoliciesProfiles(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientPoliciesProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>>
export type GetAdminRealmsRealmClientPoliciesProfilesQueryError = unknown


export function useGetAdminRealmsRealmClientPoliciesProfiles<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError = unknown>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmClientPoliciesProfilesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesProfiles<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientPoliciesProfiles<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmClientPoliciesProfiles<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError = unknown>(
 realm: string,
    params?: GetAdminRealmsRealmClientPoliciesProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientPoliciesProfiles>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientPoliciesProfilesQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmClientPoliciesProfiles = (
    realm: string,
    clientProfilesRepresentation: ClientProfilesRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-policies/profiles`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientProfilesRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientPoliciesProfilesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesProfiles>>, TError,{realm: string;data: ClientProfilesRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesProfiles>>, TError,{realm: string;data: ClientProfilesRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientPoliciesProfiles'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesProfiles>>, {realm: string;data: ClientProfilesRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  putAdminRealmsRealmClientPoliciesProfiles(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientPoliciesProfilesMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesProfiles>>>
    export type PutAdminRealmsRealmClientPoliciesProfilesMutationBody = ClientProfilesRepresentation
    export type PutAdminRealmsRealmClientPoliciesProfilesMutationError = unknown

    export const usePutAdminRealmsRealmClientPoliciesProfiles = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesProfiles>>, TError,{realm: string;data: ClientProfilesRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientPoliciesProfiles>>,
        TError,
        {realm: string;data: ClientProfilesRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientPoliciesProfilesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
 * @summary Get client session stats Returns a JSON map.
 */
export const getAdminRealmsRealmClientSessionStats = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GetAdminRealmsRealmClientSessionStats200Item[]>(
      {url: `/admin/realms/${realm}/client-session-stats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientSessionStatsQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/client-session-stats`] as const;
    }

    
export const getGetAdminRealmsRealmClientSessionStatsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientSessionStatsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>> = ({ signal }) => getAdminRealmsRealmClientSessionStats(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientSessionStatsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>
export type GetAdminRealmsRealmClientSessionStatsInfiniteQueryError = void


export function useGetAdminRealmsRealmClientSessionStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientSessionStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientSessionStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get client session stats Returns a JSON map.
 */

export function useGetAdminRealmsRealmClientSessionStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientSessionStatsInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientSessionStatsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientSessionStatsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>> = ({ signal }) => getAdminRealmsRealmClientSessionStats(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientSessionStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>>
export type GetAdminRealmsRealmClientSessionStatsQueryError = void


export function useGetAdminRealmsRealmClientSessionStats<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientSessionStats<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientSessionStats<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get client session stats Returns a JSON map.
 */

export function useGetAdminRealmsRealmClientSessionStats<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientSessionStats>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientSessionStatsQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint returns a list of both global and realm level client types and the attributes they set
 * @summary List all client types available in the current realm
 */
export const getAdminRealmsRealmClientTypes = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientTypesRepresentation>(
      {url: `/admin/realms/${realm}/client-types`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmClientTypesQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/client-types`] as const;
    }

    
export const getGetAdminRealmsRealmClientTypesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>, TError = unknown>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientTypesQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>> = ({ signal }) => getAdminRealmsRealmClientTypes(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientTypesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>
export type GetAdminRealmsRealmClientTypesInfiniteQueryError = unknown


export function useGetAdminRealmsRealmClientTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>, TError = unknown>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all client types available in the current realm
 */

export function useGetAdminRealmsRealmClientTypesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientTypesInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmClientTypesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError = unknown>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmClientTypesQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>> = ({ signal }) => getAdminRealmsRealmClientTypes(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmClientTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>>
export type GetAdminRealmsRealmClientTypesQueryError = unknown


export function useGetAdminRealmsRealmClientTypes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError = unknown>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientTypes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmClientTypes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all client types available in the current realm
 */

export function useGetAdminRealmsRealmClientTypes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError = unknown>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmClientTypes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmClientTypesQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a realm level client type
 * @summary Update a client type
 */
export const putAdminRealmsRealmClientTypes = (
    realm: string,
    clientTypesRepresentation: ClientTypesRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/client-types`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: clientTypesRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmClientTypesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientTypes>>, TError,{realm: string;data: ClientTypesRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientTypes>>, TError,{realm: string;data: ClientTypesRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmClientTypes'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmClientTypes>>, {realm: string;data: ClientTypesRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  putAdminRealmsRealmClientTypes(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmClientTypesMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmClientTypes>>>
    export type PutAdminRealmsRealmClientTypesMutationBody = ClientTypesRepresentation
    export type PutAdminRealmsRealmClientTypesMutationError = unknown

    /**
 * @summary Update a client type
 */
export const usePutAdminRealmsRealmClientTypes = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmClientTypes>>, TError,{realm: string;data: ClientTypesRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmClientTypes>>,
        TError,
        {realm: string;data: ClientTypesRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmClientTypesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmCredentialRegistrators = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<string[]>(
      {url: `/admin/realms/${realm}/credential-registrators`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmCredentialRegistratorsQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/credential-registrators`] as const;
    }

    
export const getGetAdminRealmsRealmCredentialRegistratorsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmCredentialRegistratorsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>> = ({ signal }) => getAdminRealmsRealmCredentialRegistrators(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmCredentialRegistratorsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>
export type GetAdminRealmsRealmCredentialRegistratorsInfiniteQueryError = void


export function useGetAdminRealmsRealmCredentialRegistratorsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmCredentialRegistratorsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmCredentialRegistratorsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmCredentialRegistratorsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmCredentialRegistratorsInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmCredentialRegistratorsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmCredentialRegistratorsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>> = ({ signal }) => getAdminRealmsRealmCredentialRegistrators(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmCredentialRegistratorsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>>
export type GetAdminRealmsRealmCredentialRegistratorsQueryError = void


export function useGetAdminRealmsRealmCredentialRegistrators<TData = Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmCredentialRegistrators<TData = Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmCredentialRegistrators<TData = Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmCredentialRegistrators<TData = Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmCredentialRegistrators>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmCredentialRegistratorsQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get realm default client scopes. Only name and ids are returned.
 */
export const getAdminRealmsRealmDefaultDefaultClientScopes = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/default-default-client-scopes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmDefaultDefaultClientScopesQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/default-default-client-scopes`] as const;
    }

    
export const getGetAdminRealmsRealmDefaultDefaultClientScopesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmDefaultDefaultClientScopesQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>> = ({ signal }) => getAdminRealmsRealmDefaultDefaultClientScopes(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmDefaultDefaultClientScopesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>
export type GetAdminRealmsRealmDefaultDefaultClientScopesInfiniteQueryError = void


export function useGetAdminRealmsRealmDefaultDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get realm default client scopes. Only name and ids are returned.
 */

export function useGetAdminRealmsRealmDefaultDefaultClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmDefaultDefaultClientScopesInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmDefaultDefaultClientScopesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmDefaultDefaultClientScopesQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>> = ({ signal }) => getAdminRealmsRealmDefaultDefaultClientScopes(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmDefaultDefaultClientScopesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>>
export type GetAdminRealmsRealmDefaultDefaultClientScopesQueryError = void


export function useGetAdminRealmsRealmDefaultDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get realm default client scopes. Only name and ids are returned.
 */

export function useGetAdminRealmsRealmDefaultDefaultClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultDefaultClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmDefaultDefaultClientScopesQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-default-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  


export const getPutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, {realm: string;clientScopeId: string}> = (props) => {
          const {realm,clientScopeId} = props ?? {};

          return  putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(realm,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>>
    
    export type PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationError = void

    export const usePutAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>,
        TError,
        {realm: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-default-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, {realm: string;clientScopeId: string}> = (props) => {
          const {realm,clientScopeId} = props ?? {};

          return  deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(realm,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>>
    
    export type DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationError = void

    export const useDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId>>,
        TError,
        {realm: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get group hierarchy.  Only name and ids are returned.
 */
export const getAdminRealmsRealmDefaultGroups = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GroupRepresentation[]>(
      {url: `/admin/realms/${realm}/default-groups`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmDefaultGroupsQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/default-groups`] as const;
    }

    
export const getGetAdminRealmsRealmDefaultGroupsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmDefaultGroupsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>> = ({ signal }) => getAdminRealmsRealmDefaultGroups(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmDefaultGroupsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>
export type GetAdminRealmsRealmDefaultGroupsInfiniteQueryError = void


export function useGetAdminRealmsRealmDefaultGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get group hierarchy.  Only name and ids are returned.
 */

export function useGetAdminRealmsRealmDefaultGroupsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmDefaultGroupsInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmDefaultGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmDefaultGroupsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>> = ({ signal }) => getAdminRealmsRealmDefaultGroups(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmDefaultGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>>
export type GetAdminRealmsRealmDefaultGroupsQueryError = void


export function useGetAdminRealmsRealmDefaultGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get group hierarchy.  Only name and ids are returned.
 */

export function useGetAdminRealmsRealmDefaultGroups<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultGroups>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmDefaultGroupsQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmDefaultGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-groups/${groupId}`, method: 'PUT'
    },
      options);
    }
  


export const getPutAdminRealmsRealmDefaultGroupsGroupIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmDefaultGroupsGroupId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultGroupsGroupId>>, {realm: string;groupId: string}> = (props) => {
          const {realm,groupId} = props ?? {};

          return  putAdminRealmsRealmDefaultGroupsGroupId(realm,groupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmDefaultGroupsGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultGroupsGroupId>>>
    
    export type PutAdminRealmsRealmDefaultGroupsGroupIdMutationError = void

    export const usePutAdminRealmsRealmDefaultGroupsGroupId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmDefaultGroupsGroupId>>,
        TError,
        {realm: string;groupId: string},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmDefaultGroupsGroupIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmDefaultGroupsGroupId = (
    realm: string,
    groupId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmDefaultGroupsGroupIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmDefaultGroupsGroupId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultGroupsGroupId>>, {realm: string;groupId: string}> = (props) => {
          const {realm,groupId} = props ?? {};

          return  deleteAdminRealmsRealmDefaultGroupsGroupId(realm,groupId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmDefaultGroupsGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultGroupsGroupId>>>
    
    export type DeleteAdminRealmsRealmDefaultGroupsGroupIdMutationError = void

    export const useDeleteAdminRealmsRealmDefaultGroupsGroupId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultGroupsGroupId>>, TError,{realm: string;groupId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultGroupsGroupId>>,
        TError,
        {realm: string;groupId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmDefaultGroupsGroupIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get realm optional client scopes. Only name and ids are returned.
 */
export const getAdminRealmsRealmDefaultOptionalClientScopes = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ClientScopeRepresentation[]>(
      {url: `/admin/realms/${realm}/default-optional-client-scopes`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmDefaultOptionalClientScopesQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/default-optional-client-scopes`] as const;
    }

    
export const getGetAdminRealmsRealmDefaultOptionalClientScopesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmDefaultOptionalClientScopesQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>> = ({ signal }) => getAdminRealmsRealmDefaultOptionalClientScopes(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmDefaultOptionalClientScopesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>
export type GetAdminRealmsRealmDefaultOptionalClientScopesInfiniteQueryError = void


export function useGetAdminRealmsRealmDefaultOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get realm optional client scopes. Only name and ids are returned.
 */

export function useGetAdminRealmsRealmDefaultOptionalClientScopesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmDefaultOptionalClientScopesInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmDefaultOptionalClientScopesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmDefaultOptionalClientScopesQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>> = ({ signal }) => getAdminRealmsRealmDefaultOptionalClientScopes(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmDefaultOptionalClientScopesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>>
export type GetAdminRealmsRealmDefaultOptionalClientScopesQueryError = void


export function useGetAdminRealmsRealmDefaultOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmDefaultOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get realm optional client scopes. Only name and ids are returned.
 */

export function useGetAdminRealmsRealmDefaultOptionalClientScopes<TData = Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmDefaultOptionalClientScopes>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmDefaultOptionalClientScopesQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-optional-client-scopes/${clientScopeId}`, method: 'PUT'
    },
      options);
    }
  


export const getPutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, {realm: string;clientScopeId: string}> = (props) => {
          const {realm,clientScopeId} = props ?? {};

          return  putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(realm,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>>
    
    export type PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationError = void

    export const usePutAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>,
        TError,
        {realm: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = (
    realm: string,
    clientScopeId: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/default-optional-client-scopes/${clientScopeId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, {realm: string;clientScopeId: string}> = (props) => {
          const {realm,clientScopeId} = props ?? {};

          return  deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(realm,clientScopeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>>
    
    export type DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationError = void

    export const useDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>, TError,{realm: string;clientScopeId: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId>>,
        TError,
        {realm: string;clientScopeId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get events Returns all events, or filters them based on URL query parameters listed here
 */
export const getAdminRealmsRealmEvents = (
    realm: string,
    params?: GetAdminRealmsRealmEventsParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<EventRepresentation[]>(
      {url: `/admin/realms/${realm}/events`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmEventsQueryKey = (realm: string,
    params?: GetAdminRealmsRealmEventsParams,) => {
    return [`/admin/realms/${realm}/events`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmEventsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, GetAdminRealmsRealmEventsParams['first']>, TError = void>(realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey, GetAdminRealmsRealmEventsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmEventsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey, GetAdminRealmsRealmEventsParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmEvents(realm,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey, GetAdminRealmsRealmEventsParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmEventsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>>
export type GetAdminRealmsRealmEventsInfiniteQueryError = void


export function useGetAdminRealmsRealmEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, GetAdminRealmsRealmEventsParams['first']>, TError = void>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmEventsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey, GetAdminRealmsRealmEventsParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, GetAdminRealmsRealmEventsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey, GetAdminRealmsRealmEventsParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, GetAdminRealmsRealmEventsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey, GetAdminRealmsRealmEventsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get events Returns all events, or filters them based on URL query parameters listed here
 */

export function useGetAdminRealmsRealmEventsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, GetAdminRealmsRealmEventsParams['first']>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, QueryKey, GetAdminRealmsRealmEventsParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmEventsInfiniteQueryOptions(realm,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmEventsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError = void>(realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmEventsQueryKey(realm,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>> = ({ signal }) => getAdminRealmsRealmEvents(realm,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>>
export type GetAdminRealmsRealmEventsQueryError = void


export function useGetAdminRealmsRealmEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError = void>(
 realm: string,
    params: undefined |  GetAdminRealmsRealmEventsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get events Returns all events, or filters them based on URL query parameters listed here
 */

export function useGetAdminRealmsRealmEvents<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError = void>(
 realm: string,
    params?: GetAdminRealmsRealmEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEvents>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmEventsQueryOptions(realm,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete all events
 */
export const deleteAdminRealmsRealmEvents = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/events`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmEventsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmEvents>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmEvents>>, TError,{realm: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmEvents'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmEvents>>, {realm: string}> = (props) => {
          const {realm} = props ?? {};

          return  deleteAdminRealmsRealmEvents(realm,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmEventsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmEvents>>>
    
    export type DeleteAdminRealmsRealmEventsMutationError = void

    /**
 * @summary Delete all events
 */
export const useDeleteAdminRealmsRealmEvents = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmEvents>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmEvents>>,
        TError,
        {realm: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmEventsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get the events provider configuration Returns JSON object with events provider configuration
 */
export const getAdminRealmsRealmEventsConfig = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RealmEventsConfigRepresentation>(
      {url: `/admin/realms/${realm}/events/config`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmEventsConfigQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/events/config`] as const;
    }

    
export const getGetAdminRealmsRealmEventsConfigInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmEventsConfigQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>> = ({ signal }) => getAdminRealmsRealmEventsConfig(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmEventsConfigInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>
export type GetAdminRealmsRealmEventsConfigInfiniteQueryError = void


export function useGetAdminRealmsRealmEventsConfigInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEventsConfigInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEventsConfigInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the events provider configuration Returns JSON object with events provider configuration
 */

export function useGetAdminRealmsRealmEventsConfigInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmEventsConfigInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmEventsConfigQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmEventsConfigQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>> = ({ signal }) => getAdminRealmsRealmEventsConfig(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmEventsConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>>
export type GetAdminRealmsRealmEventsConfigQueryError = void


export function useGetAdminRealmsRealmEventsConfig<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEventsConfig<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmEventsConfig<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the events provider configuration Returns JSON object with events provider configuration
 */

export function useGetAdminRealmsRealmEventsConfig<TData = Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmEventsConfig>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmEventsConfigQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update the events provider Change the events provider and/or its configuration
 */
export const putAdminRealmsRealmEventsConfig = (
    realm: string,
    realmEventsConfigRepresentation: RealmEventsConfigRepresentation,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/events/config`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: realmEventsConfigRepresentation
    },
      options);
    }
  


export const getPutAdminRealmsRealmEventsConfigMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmEventsConfig>>, TError,{realm: string;data: RealmEventsConfigRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmEventsConfig>>, TError,{realm: string;data: RealmEventsConfigRepresentation}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmEventsConfig'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmEventsConfig>>, {realm: string;data: RealmEventsConfigRepresentation}> = (props) => {
          const {realm,data} = props ?? {};

          return  putAdminRealmsRealmEventsConfig(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmEventsConfigMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmEventsConfig>>>
    export type PutAdminRealmsRealmEventsConfigMutationBody = RealmEventsConfigRepresentation
    export type PutAdminRealmsRealmEventsConfigMutationError = void

    export const usePutAdminRealmsRealmEventsConfig = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmEventsConfig>>, TError,{realm: string;data: RealmEventsConfigRepresentation}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmEventsConfig>>,
        TError,
        {realm: string;data: RealmEventsConfigRepresentation},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmEventsConfigMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmGroupByPathPath = (
    realm: string,
    path: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GroupRepresentation>(
      {url: `/admin/realms/${realm}/group-by-path/${path}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmGroupByPathPathQueryKey = (realm: string,
    path: string,) => {
    return [`/admin/realms/${realm}/group-by-path/${path}`] as const;
    }

    
export const getGetAdminRealmsRealmGroupByPathPathInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>, TError = void>(realm: string,
    path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupByPathPathQueryKey(realm,path);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>> = ({ signal }) => getAdminRealmsRealmGroupByPathPath(realm,path, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && path),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupByPathPathInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>
export type GetAdminRealmsRealmGroupByPathPathInfiniteQueryError = void


export function useGetAdminRealmsRealmGroupByPathPathInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>, TError = void>(
 realm: string,
    path: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupByPathPathInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>, TError = void>(
 realm: string,
    path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupByPathPathInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>, TError = void>(
 realm: string,
    path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmGroupByPathPathInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>, TError = void>(
 realm: string,
    path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupByPathPathInfiniteQueryOptions(realm,path,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmGroupByPathPathQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError = void>(realm: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmGroupByPathPathQueryKey(realm,path);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>> = ({ signal }) => getAdminRealmsRealmGroupByPathPath(realm,path, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && path),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmGroupByPathPathQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>>
export type GetAdminRealmsRealmGroupByPathPathQueryError = void


export function useGetAdminRealmsRealmGroupByPathPath<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError = void>(
 realm: string,
    path: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupByPathPath<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError = void>(
 realm: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmGroupByPathPath<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError = void>(
 realm: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmGroupByPathPath<TData = Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError = void>(
 realm: string,
    path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmGroupByPathPath>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmGroupByPathPathQueryOptions(realm,path,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmLocalization = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<string[]>(
      {url: `/admin/realms/${realm}/localization`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmLocalizationQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/localization`] as const;
    }

    
export const getGetAdminRealmsRealmLocalizationInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmLocalizationQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>> = ({ signal }) => getAdminRealmsRealmLocalization(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmLocalizationInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>
export type GetAdminRealmsRealmLocalizationInfiniteQueryError = void


export function useGetAdminRealmsRealmLocalizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmLocalizationInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmLocalizationInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmLocalizationQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmLocalizationQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>> = ({ signal }) => getAdminRealmsRealmLocalization(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmLocalizationQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>>
export type GetAdminRealmsRealmLocalizationQueryError = void


export function useGetAdminRealmsRealmLocalization<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalization<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalization<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmLocalization<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalization>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmLocalizationQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAdminRealmsRealmLocalizationLocale = (
    realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GetAdminRealmsRealmLocalizationLocale200>(
      {url: `/admin/realms/${realm}/localization/${locale}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmLocalizationLocaleQueryKey = (realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams,) => {
    return [`/admin/realms/${realm}/localization/${locale}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRealmsRealmLocalizationLocaleInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, GetAdminRealmsRealmLocalizationLocaleParams['first']>, TError = void>(realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey, GetAdminRealmsRealmLocalizationLocaleParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmLocalizationLocaleQueryKey(realm,locale,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey, GetAdminRealmsRealmLocalizationLocaleParams['first']> = ({ signal, pageParam }) => getAdminRealmsRealmLocalizationLocale(realm,locale,{...params, first: pageParam || params?.['first']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && locale),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey, GetAdminRealmsRealmLocalizationLocaleParams['first']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmLocalizationLocaleInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>>
export type GetAdminRealmsRealmLocalizationLocaleInfiniteQueryError = void


export function useGetAdminRealmsRealmLocalizationLocaleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, GetAdminRealmsRealmLocalizationLocaleParams['first']>, TError = void>(
 realm: string,
    locale: string,
    params: undefined |  GetAdminRealmsRealmLocalizationLocaleParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey, GetAdminRealmsRealmLocalizationLocaleParams['first']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocaleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, GetAdminRealmsRealmLocalizationLocaleParams['first']>, TError = void>(
 realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey, GetAdminRealmsRealmLocalizationLocaleParams['first']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocaleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, GetAdminRealmsRealmLocalizationLocaleParams['first']>, TError = void>(
 realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey, GetAdminRealmsRealmLocalizationLocaleParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmLocalizationLocaleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, GetAdminRealmsRealmLocalizationLocaleParams['first']>, TError = void>(
 realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData, Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, QueryKey, GetAdminRealmsRealmLocalizationLocaleParams['first']>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmLocalizationLocaleInfiniteQueryOptions(realm,locale,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmLocalizationLocaleQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError = void>(realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmLocalizationLocaleQueryKey(realm,locale,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>> = ({ signal }) => getAdminRealmsRealmLocalizationLocale(realm,locale,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && locale),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmLocalizationLocaleQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>>
export type GetAdminRealmsRealmLocalizationLocaleQueryError = void


export function useGetAdminRealmsRealmLocalizationLocale<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError = void>(
 realm: string,
    locale: string,
    params: undefined |  GetAdminRealmsRealmLocalizationLocaleParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocale<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError = void>(
 realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocale<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError = void>(
 realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmLocalizationLocale<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError = void>(
 realm: string,
    locale: string,
    params?: GetAdminRealmsRealmLocalizationLocaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocale>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmLocalizationLocaleQueryOptions(realm,locale,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Import localization from uploaded JSON file
 */
export const postAdminRealmsRealmLocalizationLocale = (
    realm: string,
    locale: string,
    postAdminRealmsRealmLocalizationLocaleBody: PostAdminRealmsRealmLocalizationLocaleBody,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmLocalizationLocaleBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmLocalizationLocaleMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmLocalizationLocale>>, TError,{realm: string;locale: string;data: PostAdminRealmsRealmLocalizationLocaleBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmLocalizationLocale>>, TError,{realm: string;locale: string;data: PostAdminRealmsRealmLocalizationLocaleBody}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmLocalizationLocale'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmLocalizationLocale>>, {realm: string;locale: string;data: PostAdminRealmsRealmLocalizationLocaleBody}> = (props) => {
          const {realm,locale,data} = props ?? {};

          return  postAdminRealmsRealmLocalizationLocale(realm,locale,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmLocalizationLocaleMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmLocalizationLocale>>>
    export type PostAdminRealmsRealmLocalizationLocaleMutationBody = PostAdminRealmsRealmLocalizationLocaleBody
    export type PostAdminRealmsRealmLocalizationLocaleMutationError = void

    /**
 * @summary Import localization from uploaded JSON file
 */
export const usePostAdminRealmsRealmLocalizationLocale = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmLocalizationLocale>>, TError,{realm: string;locale: string;data: PostAdminRealmsRealmLocalizationLocaleBody}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmLocalizationLocale>>,
        TError,
        {realm: string;locale: string;data: PostAdminRealmsRealmLocalizationLocaleBody},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmLocalizationLocaleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmLocalizationLocale = (
    realm: string,
    locale: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmLocalizationLocaleMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocale>>, TError,{realm: string;locale: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocale>>, TError,{realm: string;locale: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmLocalizationLocale'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocale>>, {realm: string;locale: string}> = (props) => {
          const {realm,locale} = props ?? {};

          return  deleteAdminRealmsRealmLocalizationLocale(realm,locale,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmLocalizationLocaleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocale>>>
    
    export type DeleteAdminRealmsRealmLocalizationLocaleMutationError = void

    export const useDeleteAdminRealmsRealmLocalizationLocale = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocale>>, TError,{realm: string;locale: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocale>>,
        TError,
        {realm: string;locale: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmLocalizationLocaleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmLocalizationLocaleKey = (
    realm: string,
    locale: string,
    key: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<string>(
      {url: `/admin/realms/${realm}/localization/${locale}/${key}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmLocalizationLocaleKeyQueryKey = (realm: string,
    locale: string,
    key: string,) => {
    return [`/admin/realms/${realm}/localization/${locale}/${key}`] as const;
    }

    
export const getGetAdminRealmsRealmLocalizationLocaleKeyInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>, TError = void>(realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmLocalizationLocaleKeyQueryKey(realm,locale,key);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>> = ({ signal }) => getAdminRealmsRealmLocalizationLocaleKey(realm,locale,key, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && locale && key),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmLocalizationLocaleKeyInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>
export type GetAdminRealmsRealmLocalizationLocaleKeyInfiniteQueryError = void


export function useGetAdminRealmsRealmLocalizationLocaleKeyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocaleKeyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocaleKeyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmLocalizationLocaleKeyInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmLocalizationLocaleKeyInfiniteQueryOptions(realm,locale,key,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmLocalizationLocaleKeyQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError = void>(realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmLocalizationLocaleKeyQueryKey(realm,locale,key);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>> = ({ signal }) => getAdminRealmsRealmLocalizationLocaleKey(realm,locale,key, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm && locale && key),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmLocalizationLocaleKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>>
export type GetAdminRealmsRealmLocalizationLocaleKeyQueryError = void


export function useGetAdminRealmsRealmLocalizationLocaleKey<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocaleKey<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmLocalizationLocaleKey<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmLocalizationLocaleKey<TData = Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError = void>(
 realm: string,
    locale: string,
    key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmLocalizationLocaleKey>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmLocalizationLocaleKeyQueryOptions(realm,locale,key,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmLocalizationLocaleKey = (
    realm: string,
    locale: string,
    key: string,
    putAdminRealmsRealmLocalizationLocaleKeyBody: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}/${key}`, method: 'PUT',
      headers: {'Content-Type': 'text/plain', },
      data: putAdminRealmsRealmLocalizationLocaleKeyBody
    },
      options);
    }
  


export const getPutAdminRealmsRealmLocalizationLocaleKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmLocalizationLocaleKey>>, TError,{realm: string;locale: string;key: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmLocalizationLocaleKey>>, TError,{realm: string;locale: string;key: string;data: string}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmLocalizationLocaleKey'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmLocalizationLocaleKey>>, {realm: string;locale: string;key: string;data: string}> = (props) => {
          const {realm,locale,key,data} = props ?? {};

          return  putAdminRealmsRealmLocalizationLocaleKey(realm,locale,key,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmLocalizationLocaleKeyMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmLocalizationLocaleKey>>>
    export type PutAdminRealmsRealmLocalizationLocaleKeyMutationBody = string
    export type PutAdminRealmsRealmLocalizationLocaleKeyMutationError = void

    export const usePutAdminRealmsRealmLocalizationLocaleKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmLocalizationLocaleKey>>, TError,{realm: string;locale: string;key: string;data: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmLocalizationLocaleKey>>,
        TError,
        {realm: string;locale: string;key: string;data: string},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmLocalizationLocaleKeyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAdminRealmsRealmLocalizationLocaleKey = (
    realm: string,
    locale: string,
    key: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/localization/${locale}/${key}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmLocalizationLocaleKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocaleKey>>, TError,{realm: string;locale: string;key: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocaleKey>>, TError,{realm: string;locale: string;key: string}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmLocalizationLocaleKey'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocaleKey>>, {realm: string;locale: string;key: string}> = (props) => {
          const {realm,locale,key} = props ?? {};

          return  deleteAdminRealmsRealmLocalizationLocaleKey(realm,locale,key,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmLocalizationLocaleKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocaleKey>>>
    
    export type DeleteAdminRealmsRealmLocalizationLocaleKeyMutationError = void

    export const useDeleteAdminRealmsRealmLocalizationLocaleKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocaleKey>>, TError,{realm: string;locale: string;key: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmLocalizationLocaleKey>>,
        TError,
        {realm: string;locale: string;key: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmLocalizationLocaleKeyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Any client that has an admin url will also be told to invalidate any sessions they have.
 * @summary Removes all user sessions.
 */
export const postAdminRealmsRealmLogoutAll = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/logout-all`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmLogoutAllMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmLogoutAll>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmLogoutAll>>, TError,{realm: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmLogoutAll'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmLogoutAll>>, {realm: string}> = (props) => {
          const {realm} = props ?? {};

          return  postAdminRealmsRealmLogoutAll(realm,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmLogoutAllMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmLogoutAll>>>
    
    export type PostAdminRealmsRealmLogoutAllMutationError = void

    /**
 * @summary Removes all user sessions.
 */
export const usePostAdminRealmsRealmLogoutAll = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmLogoutAll>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmLogoutAll>>,
        TError,
        {realm: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmLogoutAllMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Partial export of existing realm into a JSON file.
 */
export const postAdminRealmsRealmPartialExport = (
    realm: string,
    params?: PostAdminRealmsRealmPartialExportParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<RealmRepresentation>(
      {url: `/admin/realms/${realm}/partial-export`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmPartialExportMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPartialExport>>, TError,{realm: string;params?: PostAdminRealmsRealmPartialExportParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPartialExport>>, TError,{realm: string;params?: PostAdminRealmsRealmPartialExportParams}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmPartialExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmPartialExport>>, {realm: string;params?: PostAdminRealmsRealmPartialExportParams}> = (props) => {
          const {realm,params} = props ?? {};

          return  postAdminRealmsRealmPartialExport(realm,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmPartialExportMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmPartialExport>>>
    
    export type PostAdminRealmsRealmPartialExportMutationError = void

    /**
 * @summary Partial export of existing realm into a JSON file.
 */
export const usePostAdminRealmsRealmPartialExport = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPartialExport>>, TError,{realm: string;params?: PostAdminRealmsRealmPartialExportParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmPartialExport>>,
        TError,
        {realm: string;params?: PostAdminRealmsRealmPartialExportParams},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmPartialExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Partial import from a JSON file to an existing realm.
 */
export const postAdminRealmsRealmPartialImport = (
    realm: string,
    postAdminRealmsRealmPartialImportBody: Blob,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<PostAdminRealmsRealmPartialImport200>(
      {url: `/admin/realms/${realm}/partialImport`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAdminRealmsRealmPartialImportBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmPartialImportMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPartialImport>>, TError,{realm: string;data: Blob}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPartialImport>>, TError,{realm: string;data: Blob}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmPartialImport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmPartialImport>>, {realm: string;data: Blob}> = (props) => {
          const {realm,data} = props ?? {};

          return  postAdminRealmsRealmPartialImport(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmPartialImportMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmPartialImport>>>
    export type PostAdminRealmsRealmPartialImportMutationBody = Blob
    export type PostAdminRealmsRealmPartialImportMutationError = void

    /**
 * @summary Partial import from a JSON file to an existing realm.
 */
export const usePostAdminRealmsRealmPartialImport = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPartialImport>>, TError,{realm: string;data: Blob}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmPartialImport>>,
        TError,
        {realm: string;data: Blob},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmPartialImportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Push the realm's revocation policy to any client that has an admin url associated with it.
 */
export const postAdminRealmsRealmPushRevocation = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<GlobalRequestResult>(
      {url: `/admin/realms/${realm}/push-revocation`, method: 'POST', signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmPushRevocationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPushRevocation>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPushRevocation>>, TError,{realm: string}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmPushRevocation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmPushRevocation>>, {realm: string}> = (props) => {
          const {realm} = props ?? {};

          return  postAdminRealmsRealmPushRevocation(realm,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmPushRevocationMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmPushRevocation>>>
    
    export type PostAdminRealmsRealmPushRevocationMutationError = void

    /**
 * @summary Push the realm's revocation policy to any client that has an admin url associated with it.
 */
export const usePostAdminRealmsRealmPushRevocation = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmPushRevocation>>, TError,{realm: string}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmPushRevocation>>,
        TError,
        {realm: string},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmPushRevocationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Any client that has an admin url will also be told to invalidate this particular session.
 * @summary Remove a specific user session.
 */
export const deleteAdminRealmsRealmSessionsSession = (
    realm: string,
    session: string,
    params?: DeleteAdminRealmsRealmSessionsSessionParams,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/sessions/${session}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteAdminRealmsRealmSessionsSessionMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmSessionsSession>>, TError,{realm: string;session: string;params?: DeleteAdminRealmsRealmSessionsSessionParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmSessionsSession>>, TError,{realm: string;session: string;params?: DeleteAdminRealmsRealmSessionsSessionParams}, TContext> => {
    
const mutationKey = ['deleteAdminRealmsRealmSessionsSession'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminRealmsRealmSessionsSession>>, {realm: string;session: string;params?: DeleteAdminRealmsRealmSessionsSessionParams}> = (props) => {
          const {realm,session,params} = props ?? {};

          return  deleteAdminRealmsRealmSessionsSession(realm,session,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminRealmsRealmSessionsSessionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminRealmsRealmSessionsSession>>>
    
    export type DeleteAdminRealmsRealmSessionsSessionMutationError = void

    /**
 * @summary Remove a specific user session.
 */
export const useDeleteAdminRealmsRealmSessionsSession = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminRealmsRealmSessionsSession>>, TError,{realm: string;session: string;params?: DeleteAdminRealmsRealmSessionsSessionParams}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminRealmsRealmSessionsSession>>,
        TError,
        {realm: string;session: string;params?: DeleteAdminRealmsRealmSessionsSessionParams},
        TContext
      > => {

      const mutationOptions = getDeleteAdminRealmsRealmSessionsSessionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @deprecated
 * @summary Test SMTP connection with current logged in user
 */
export const postAdminRealmsRealmTestSMTPConnection = (
    realm: string,
    postAdminRealmsRealmTestSMTPConnectionBody: PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<void>(
      {url: `/admin/realms/${realm}/testSMTPConnection`, method: 'POST',
      data: postAdminRealmsRealmTestSMTPConnectionBody, signal
    },
      options);
    }
  


export const getPostAdminRealmsRealmTestSMTPConnectionMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmTestSMTPConnection>>, TError,{realm: string;data: PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmTestSMTPConnection>>, TError,{realm: string;data: PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo}, TContext> => {
    
const mutationKey = ['postAdminRealmsRealmTestSMTPConnection'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAdminRealmsRealmTestSMTPConnection>>, {realm: string;data: PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo}> = (props) => {
          const {realm,data} = props ?? {};

          return  postAdminRealmsRealmTestSMTPConnection(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAdminRealmsRealmTestSMTPConnectionMutationResult = NonNullable<Awaited<ReturnType<typeof postAdminRealmsRealmTestSMTPConnection>>>
    export type PostAdminRealmsRealmTestSMTPConnectionMutationBody = PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo
    export type PostAdminRealmsRealmTestSMTPConnectionMutationError = void

    /**
 * @deprecated
 * @summary Test SMTP connection with current logged in user
 */
export const usePostAdminRealmsRealmTestSMTPConnection = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAdminRealmsRealmTestSMTPConnection>>, TError,{realm: string;data: PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAdminRealmsRealmTestSMTPConnection>>,
        TError,
        {realm: string;data: PostAdminRealmsRealmTestSMTPConnectionBodyOne | PostAdminRealmsRealmTestSMTPConnectionBodyTwo},
        TContext
      > => {

      const mutationOptions = getPostAdminRealmsRealmTestSMTPConnectionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAdminRealmsRealmUsersManagementPermissions = (
    realm: string,
 options?: SecondParameter<typeof keycloakServiceMutator>,signal?: AbortSignal
) => {
      
      
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/users-management-permissions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminRealmsRealmUsersManagementPermissionsQueryKey = (realm: string,) => {
    return [`/admin/realms/${realm}/users-management-permissions`] as const;
    }

    
export const getGetAdminRealmsRealmUsersManagementPermissionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>, TError = void>(realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersManagementPermissionsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>> = ({ signal }) => getAdminRealmsRealmUsersManagementPermissions(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersManagementPermissionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>
export type GetAdminRealmsRealmUsersManagementPermissionsInfiniteQueryError = void


export function useGetAdminRealmsRealmUsersManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>, TError = void>(
 realm: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmUsersManagementPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>, TError = void>(
 realm: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersManagementPermissionsInfiniteQueryOptions(realm,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAdminRealmsRealmUsersManagementPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError = void>(realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRealmsRealmUsersManagementPermissionsQueryKey(realm);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>> = ({ signal }) => getAdminRealmsRealmUsersManagementPermissions(realm, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(realm),  staleTime: 5000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminRealmsRealmUsersManagementPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>>
export type GetAdminRealmsRealmUsersManagementPermissionsQueryError = void


export function useGetAdminRealmsRealmUsersManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError = void>(
 realm: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>,
          TError,
          Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminRealmsRealmUsersManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAdminRealmsRealmUsersManagementPermissions<TData = Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError = void>(
 realm: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRealmsRealmUsersManagementPermissions>>, TError, TData>>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminRealmsRealmUsersManagementPermissionsQueryOptions(realm,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putAdminRealmsRealmUsersManagementPermissions = (
    realm: string,
    managementPermissionReference: ManagementPermissionReference,
 options?: SecondParameter<typeof keycloakServiceMutator>,) => {
      
      
      return keycloakServiceMutator<ManagementPermissionReference>(
      {url: `/admin/realms/${realm}/users-management-permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: managementPermissionReference
    },
      options);
    }
  


export const getPutAdminRealmsRealmUsersManagementPermissionsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmUsersManagementPermissions>>, TError,{realm: string;data: ManagementPermissionReference}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmUsersManagementPermissions>>, TError,{realm: string;data: ManagementPermissionReference}, TContext> => {
    
const mutationKey = ['putAdminRealmsRealmUsersManagementPermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAdminRealmsRealmUsersManagementPermissions>>, {realm: string;data: ManagementPermissionReference}> = (props) => {
          const {realm,data} = props ?? {};

          return  putAdminRealmsRealmUsersManagementPermissions(realm,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAdminRealmsRealmUsersManagementPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminRealmsRealmUsersManagementPermissions>>>
    export type PutAdminRealmsRealmUsersManagementPermissionsMutationBody = ManagementPermissionReference
    export type PutAdminRealmsRealmUsersManagementPermissionsMutationError = void

    export const usePutAdminRealmsRealmUsersManagementPermissions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAdminRealmsRealmUsersManagementPermissions>>, TError,{realm: string;data: ManagementPermissionReference}, TContext>, request?: SecondParameter<typeof keycloakServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAdminRealmsRealmUsersManagementPermissions>>,
        TError,
        {realm: string;data: ManagementPermissionReference},
        TContext
      > => {

      const mutationOptions = getPutAdminRealmsRealmUsersManagementPermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    