/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountOrganizationsParams,
  GetAllOrganizationsParams,
  OrganizationDTO,
  SearchOrganizationsParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getOrganization = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<OrganizationDTO>(
      {url: `/api/organizations/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrganizationQueryKey = (id: number,) => {
    return [`/api/organizations/${id}`] as const;
    }

    
export const getGetOrganizationQueryOptions = <TData = Awaited<ReturnType<typeof getOrganization>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrganizationQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganization>>> = ({ signal }) => getOrganization(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganization>>>
export type GetOrganizationQueryError = ErrorType<unknown>


export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOrganization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOrganization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrganizationQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateOrganization = (
    id: number,
    organizationDTO: OrganizationDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<OrganizationDTO>(
      {url: `/api/organizations/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: organizationDTO
    },
      options);
    }
  


export const getUpdateOrganizationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: number;data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: number;data: OrganizationDTO}, TContext> => {
    
const mutationKey = ['updateOrganization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrganization>>, {id: number;data: OrganizationDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOrganization(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrganization>>>
    export type UpdateOrganizationMutationBody = OrganizationDTO
    export type UpdateOrganizationMutationError = ErrorType<unknown>

    export const useUpdateOrganization = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: number;data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateOrganization>>,
        TError,
        {id: number;data: OrganizationDTO},
        TContext
      > => {

      const mutationOptions = getUpdateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteOrganization = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/organizations/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOrganizationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteOrganization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrganization>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteOrganization(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrganization>>>
    
    export type DeleteOrganizationMutationError = ErrorType<unknown>

    export const useDeleteOrganization = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrganization>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateOrganization = (
    id: number,
    organizationDTO: OrganizationDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<OrganizationDTO>(
      {url: `/api/organizations/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: organizationDTO
    },
      options);
    }
  


export const getPartialUpdateOrganizationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateOrganization>>, TError,{id: number;data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateOrganization>>, TError,{id: number;data: OrganizationDTO}, TContext> => {
    
const mutationKey = ['partialUpdateOrganization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateOrganization>>, {id: number;data: OrganizationDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateOrganization(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateOrganization>>>
    export type PartialUpdateOrganizationMutationBody = OrganizationDTO
    export type PartialUpdateOrganizationMutationError = ErrorType<unknown>

    export const usePartialUpdateOrganization = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateOrganization>>, TError,{id: number;data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateOrganization>>,
        TError,
        {id: number;data: OrganizationDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllOrganizations = (
    params?: GetAllOrganizationsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<OrganizationDTO[]>(
      {url: `/api/organizations`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllOrganizationsQueryKey = (params?: GetAllOrganizationsParams,) => {
    return [`/api/organizations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = ErrorType<unknown>>(params?: GetAllOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllOrganizationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllOrganizations>>> = ({ signal }) => getAllOrganizations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllOrganizations>>>
export type GetAllOrganizationsQueryError = ErrorType<unknown>


export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllOrganizationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAllOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = ErrorType<unknown>>(
 params?: GetAllOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAllOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = ErrorType<unknown>>(
 params?: GetAllOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = ErrorType<unknown>>(
 params?: GetAllOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllOrganizationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createOrganization = (
    organizationDTO: OrganizationDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<OrganizationDTO>(
      {url: `/api/organizations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationDTO, signal
    },
      options);
    }
  


export const getCreateOrganizationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: OrganizationDTO}, TContext> => {
    
const mutationKey = ['createOrganization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrganization>>, {data: OrganizationDTO}> = (props) => {
          const {data} = props ?? {};

          return  createOrganization(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrganization>>>
    export type CreateOrganizationMutationBody = OrganizationDTO
    export type CreateOrganizationMutationError = ErrorType<unknown>

    export const useCreateOrganization = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrganization>>,
        TError,
        {data: OrganizationDTO},
        TContext
      > => {

      const mutationOptions = getCreateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countOrganizations = (
    params?: CountOrganizationsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/organizations/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountOrganizationsQueryKey = (params?: CountOrganizationsParams,) => {
    return [`/api/organizations/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof countOrganizations>>, TError = ErrorType<unknown>>(params?: CountOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountOrganizationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countOrganizations>>> = ({ signal }) => countOrganizations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof countOrganizations>>>
export type CountOrganizationsQueryError = ErrorType<unknown>


export function useCountOrganizations<TData = Awaited<ReturnType<typeof countOrganizations>>, TError = ErrorType<unknown>>(
 params: undefined |  CountOrganizationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countOrganizations>>,
          TError,
          Awaited<ReturnType<typeof countOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountOrganizations<TData = Awaited<ReturnType<typeof countOrganizations>>, TError = ErrorType<unknown>>(
 params?: CountOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countOrganizations>>,
          TError,
          Awaited<ReturnType<typeof countOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountOrganizations<TData = Awaited<ReturnType<typeof countOrganizations>>, TError = ErrorType<unknown>>(
 params?: CountOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountOrganizations<TData = Awaited<ReturnType<typeof countOrganizations>>, TError = ErrorType<unknown>>(
 params?: CountOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountOrganizationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchOrganizations = (
    params: SearchOrganizationsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<OrganizationDTO[]>(
      {url: `/api/organizations/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchOrganizationsQueryKey = (params: SearchOrganizationsParams,) => {
    return [`/api/organizations/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof searchOrganizations>>, TError = ErrorType<unknown>>(params: SearchOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchOrganizationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchOrganizations>>> = ({ signal }) => searchOrganizations(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof searchOrganizations>>>
export type SearchOrganizationsQueryError = ErrorType<unknown>


export function useSearchOrganizations<TData = Awaited<ReturnType<typeof searchOrganizations>>, TError = ErrorType<unknown>>(
 params: SearchOrganizationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchOrganizations>>,
          TError,
          Awaited<ReturnType<typeof searchOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchOrganizations<TData = Awaited<ReturnType<typeof searchOrganizations>>, TError = ErrorType<unknown>>(
 params: SearchOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchOrganizations>>,
          TError,
          Awaited<ReturnType<typeof searchOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchOrganizations<TData = Awaited<ReturnType<typeof searchOrganizations>>, TError = ErrorType<unknown>>(
 params: SearchOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchOrganizations<TData = Awaited<ReturnType<typeof searchOrganizations>>, TError = ErrorType<unknown>>(
 params: SearchOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchOrganizations>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchOrganizationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



