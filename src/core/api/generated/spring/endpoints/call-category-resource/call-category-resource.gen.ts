/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CallCategoryDTO,
  CountCallCategoriesParams,
  GetAllCallCategoriesParams,
  SearchCallCategoriesParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getCallCategory = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallCategoryDTO>(
      {url: `/api/call-categories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCallCategoryQueryKey = (id: number,) => {
    return [`/api/call-categories/${id}`] as const;
    }

    
export const getGetCallCategoryInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCallCategory>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCallCategoryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallCategory>>> = ({ signal }) => getCallCategory(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCallCategoryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCallCategory>>>
export type GetCallCategoryInfiniteQueryError = unknown


export function useGetCallCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCallCategory>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallCategory>>,
          TError,
          Awaited<ReturnType<typeof getCallCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCallCategory>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallCategory>>,
          TError,
          Awaited<ReturnType<typeof getCallCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCallCategory>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCallCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCallCategory>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCallCategoryInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCallCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getCallCategory>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCallCategoryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallCategory>>> = ({ signal }) => getCallCategory(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCallCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getCallCategory>>>
export type GetCallCategoryQueryError = unknown


export function useGetCallCategory<TData = Awaited<ReturnType<typeof getCallCategory>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallCategory>>,
          TError,
          Awaited<ReturnType<typeof getCallCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallCategory<TData = Awaited<ReturnType<typeof getCallCategory>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallCategory>>,
          TError,
          Awaited<ReturnType<typeof getCallCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallCategory<TData = Awaited<ReturnType<typeof getCallCategory>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCallCategory<TData = Awaited<ReturnType<typeof getCallCategory>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCallCategoryQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCallCategory = (
    id: number,
    callCategoryDTO: CallCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallCategoryDTO>(
      {url: `/api/call-categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: callCategoryDTO
    },
      options);
    }
  


export const getUpdateCallCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallCategory>>, TError,{id: number;data: CallCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCallCategory>>, TError,{id: number;data: CallCategoryDTO}, TContext> => {
    
const mutationKey = ['updateCallCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCallCategory>>, {id: number;data: CallCategoryDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCallCategory(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCallCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof updateCallCategory>>>
    export type UpdateCallCategoryMutationBody = CallCategoryDTO
    export type UpdateCallCategoryMutationError = unknown

    export const useUpdateCallCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallCategory>>, TError,{id: number;data: CallCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCallCategory>>,
        TError,
        {id: number;data: CallCategoryDTO},
        TContext
      > => {

      const mutationOptions = getUpdateCallCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCallCategory = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/call-categories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCallCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallCategory>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCallCategory>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteCallCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCallCategory>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCallCategory(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCallCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCallCategory>>>
    
    export type DeleteCallCategoryMutationError = unknown

    export const useDeleteCallCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallCategory>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCallCategory>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCallCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateCallCategory = (
    id: number,
    callCategoryDTO: CallCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallCategoryDTO>(
      {url: `/api/call-categories/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: callCategoryDTO
    },
      options);
    }
  


export const getPartialUpdateCallCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallCategory>>, TError,{id: number;data: CallCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallCategory>>, TError,{id: number;data: CallCategoryDTO}, TContext> => {
    
const mutationKey = ['partialUpdateCallCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateCallCategory>>, {id: number;data: CallCategoryDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateCallCategory(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateCallCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateCallCategory>>>
    export type PartialUpdateCallCategoryMutationBody = CallCategoryDTO
    export type PartialUpdateCallCategoryMutationError = unknown

    export const usePartialUpdateCallCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallCategory>>, TError,{id: number;data: CallCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateCallCategory>>,
        TError,
        {id: number;data: CallCategoryDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateCallCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllCallCategories = (
    params?: GetAllCallCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallCategoryDTO[]>(
      {url: `/api/call-categories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllCallCategoriesQueryKey = (params?: GetAllCallCategoriesParams,) => {
    return [`/api/call-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllCallCategoriesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllCallCategories>>, GetAllCallCategoriesParams['nextId']>, TError = unknown>(params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData, Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey, GetAllCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCallCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey, GetAllCallCategoriesParams['nextId']> = ({ signal, pageParam }) => getAllCallCategories({...params, nextId: pageParam || params?.['nextId']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData, Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey, GetAllCallCategoriesParams['nextId']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCallCategoriesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCallCategories>>>
export type GetAllCallCategoriesInfiniteQueryError = unknown


export function useGetAllCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllCallCategories>>, GetAllCallCategoriesParams['nextId']>, TError = unknown>(
 params: undefined |  GetAllCallCategoriesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData, Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey, GetAllCallCategoriesParams['nextId']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllCallCategories>>, GetAllCallCategoriesParams['nextId']>, TError = unknown>(
 params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData, Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey, GetAllCallCategoriesParams['nextId']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllCallCategories>>, GetAllCallCategoriesParams['nextId']>, TError = unknown>(
 params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData, Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey, GetAllCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllCallCategories>>, GetAllCallCategoriesParams['nextId']>, TError = unknown>(
 params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData, Awaited<ReturnType<typeof getAllCallCategories>>, QueryKey, GetAllCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCallCategoriesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllCallCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllCallCategories>>, TError = unknown>(params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCallCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallCategories>>> = ({ signal }) => getAllCallCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCallCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCallCategories>>>
export type GetAllCallCategoriesQueryError = unknown


export function useGetAllCallCategories<TData = Awaited<ReturnType<typeof getAllCallCategories>>, TError = unknown>(
 params: undefined |  GetAllCallCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllCallCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallCategories<TData = Awaited<ReturnType<typeof getAllCallCategories>>, TError = unknown>(
 params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllCallCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallCategories<TData = Awaited<ReturnType<typeof getAllCallCategories>>, TError = unknown>(
 params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCallCategories<TData = Awaited<ReturnType<typeof getAllCallCategories>>, TError = unknown>(
 params?: GetAllCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCallCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createCallCategory = (
    callCategoryDTO: CallCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallCategoryDTO>(
      {url: `/api/call-categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: callCategoryDTO, signal
    },
      options);
    }
  


export const getCreateCallCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallCategory>>, TError,{data: CallCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createCallCategory>>, TError,{data: CallCategoryDTO}, TContext> => {
    
const mutationKey = ['createCallCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCallCategory>>, {data: CallCategoryDTO}> = (props) => {
          const {data} = props ?? {};

          return  createCallCategory(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCallCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createCallCategory>>>
    export type CreateCallCategoryMutationBody = CallCategoryDTO
    export type CreateCallCategoryMutationError = unknown

    export const useCreateCallCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallCategory>>, TError,{data: CallCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCallCategory>>,
        TError,
        {data: CallCategoryDTO},
        TContext
      > => {

      const mutationOptions = getCreateCallCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countCallCategories = (
    params?: CountCallCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/call-categories/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountCallCategoriesQueryKey = (params?: CountCallCategoriesParams,) => {
    return [`/api/call-categories/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountCallCategoriesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof countCallCategories>>, CountCallCategoriesParams['nextId']>, TError = unknown>(params?: CountCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData, Awaited<ReturnType<typeof countCallCategories>>, QueryKey, CountCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountCallCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallCategories>>, QueryKey, CountCallCategoriesParams['nextId']> = ({ signal, pageParam }) => countCallCategories({...params, nextId: pageParam || params?.['nextId']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData, Awaited<ReturnType<typeof countCallCategories>>, QueryKey, CountCallCategoriesParams['nextId']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountCallCategoriesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof countCallCategories>>>
export type CountCallCategoriesInfiniteQueryError = unknown


export function useCountCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countCallCategories>>, CountCallCategoriesParams['nextId']>, TError = unknown>(
 params: undefined |  CountCallCategoriesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData, Awaited<ReturnType<typeof countCallCategories>>, QueryKey, CountCallCategoriesParams['nextId']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallCategories>>,
          TError,
          Awaited<ReturnType<typeof countCallCategories>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countCallCategories>>, CountCallCategoriesParams['nextId']>, TError = unknown>(
 params?: CountCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData, Awaited<ReturnType<typeof countCallCategories>>, QueryKey, CountCallCategoriesParams['nextId']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallCategories>>,
          TError,
          Awaited<ReturnType<typeof countCallCategories>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countCallCategories>>, CountCallCategoriesParams['nextId']>, TError = unknown>(
 params?: CountCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData, Awaited<ReturnType<typeof countCallCategories>>, QueryKey, CountCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countCallCategories>>, CountCallCategoriesParams['nextId']>, TError = unknown>(
 params?: CountCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData, Awaited<ReturnType<typeof countCallCategories>>, QueryKey, CountCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountCallCategoriesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCountCallCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof countCallCategories>>, TError = unknown>(params?: CountCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountCallCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallCategories>>> = ({ signal }) => countCallCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountCallCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof countCallCategories>>>
export type CountCallCategoriesQueryError = unknown


export function useCountCallCategories<TData = Awaited<ReturnType<typeof countCallCategories>>, TError = unknown>(
 params: undefined |  CountCallCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallCategories>>,
          TError,
          Awaited<ReturnType<typeof countCallCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallCategories<TData = Awaited<ReturnType<typeof countCallCategories>>, TError = unknown>(
 params?: CountCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallCategories>>,
          TError,
          Awaited<ReturnType<typeof countCallCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallCategories<TData = Awaited<ReturnType<typeof countCallCategories>>, TError = unknown>(
 params?: CountCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountCallCategories<TData = Awaited<ReturnType<typeof countCallCategories>>, TError = unknown>(
 params?: CountCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountCallCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchCallCategories = (
    params: SearchCallCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallCategoryDTO[]>(
      {url: `/api/call-categories/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchCallCategoriesQueryKey = (params: SearchCallCategoriesParams,) => {
    return [`/api/call-categories/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchCallCategoriesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchCallCategories>>, SearchCallCategoriesParams['nextId']>, TError = unknown>(params: SearchCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData, Awaited<ReturnType<typeof searchCallCategories>>, QueryKey, SearchCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCallCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallCategories>>, QueryKey, SearchCallCategoriesParams['nextId']> = ({ signal, pageParam }) => searchCallCategories({...params, nextId: pageParam || params?.['nextId']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData, Awaited<ReturnType<typeof searchCallCategories>>, QueryKey, SearchCallCategoriesParams['nextId']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCallCategoriesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchCallCategories>>>
export type SearchCallCategoriesInfiniteQueryError = unknown


export function useSearchCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCallCategories>>, SearchCallCategoriesParams['nextId']>, TError = unknown>(
 params: SearchCallCategoriesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData, Awaited<ReturnType<typeof searchCallCategories>>, QueryKey, SearchCallCategoriesParams['nextId']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallCategories>>,
          TError,
          Awaited<ReturnType<typeof searchCallCategories>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCallCategories>>, SearchCallCategoriesParams['nextId']>, TError = unknown>(
 params: SearchCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData, Awaited<ReturnType<typeof searchCallCategories>>, QueryKey, SearchCallCategoriesParams['nextId']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallCategories>>,
          TError,
          Awaited<ReturnType<typeof searchCallCategories>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCallCategories>>, SearchCallCategoriesParams['nextId']>, TError = unknown>(
 params: SearchCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData, Awaited<ReturnType<typeof searchCallCategories>>, QueryKey, SearchCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchCallCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchCallCategories>>, SearchCallCategoriesParams['nextId']>, TError = unknown>(
 params: SearchCallCategoriesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData, Awaited<ReturnType<typeof searchCallCategories>>, QueryKey, SearchCallCategoriesParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCallCategoriesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchCallCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof searchCallCategories>>, TError = unknown>(params: SearchCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCallCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallCategories>>> = ({ signal }) => searchCallCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCallCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof searchCallCategories>>>
export type SearchCallCategoriesQueryError = unknown


export function useSearchCallCategories<TData = Awaited<ReturnType<typeof searchCallCategories>>, TError = unknown>(
 params: SearchCallCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallCategories>>,
          TError,
          Awaited<ReturnType<typeof searchCallCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallCategories<TData = Awaited<ReturnType<typeof searchCallCategories>>, TError = unknown>(
 params: SearchCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallCategories>>,
          TError,
          Awaited<ReturnType<typeof searchCallCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallCategories<TData = Awaited<ReturnType<typeof searchCallCategories>>, TError = unknown>(
 params: SearchCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchCallCategories<TData = Awaited<ReturnType<typeof searchCallCategories>>, TError = unknown>(
 params: SearchCallCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCallCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



