/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountProductCategoriesParams,
  GetAllProductCategoriesParams,
  ProductCategoryDTO,
  SearchProductCategoriesParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getProductCategory = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductCategoryDTO>(
      {url: `/api/product-categories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProductCategoryQueryKey = (id: number,) => {
    return [`/api/product-categories/${id}`] as const;
    }

    
export const getGetProductCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getProductCategory>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductCategoryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductCategory>>> = ({ signal }) => getProductCategory(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getProductCategory>>>
export type GetProductCategoryQueryError = ErrorType<unknown>


export function useGetProductCategory<TData = Awaited<ReturnType<typeof getProductCategory>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductCategory<TData = Awaited<ReturnType<typeof getProductCategory>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductCategory<TData = Awaited<ReturnType<typeof getProductCategory>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProductCategory<TData = Awaited<ReturnType<typeof getProductCategory>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductCategoryQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateProductCategory = (
    id: number,
    productCategoryDTO: ProductCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<ProductCategoryDTO>(
      {url: `/api/product-categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productCategoryDTO
    },
      options);
    }
  


export const getUpdateProductCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductCategory>>, TError,{id: number;data: ProductCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductCategory>>, TError,{id: number;data: ProductCategoryDTO}, TContext> => {
    
const mutationKey = ['updateProductCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductCategory>>, {id: number;data: ProductCategoryDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProductCategory(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductCategory>>>
    export type UpdateProductCategoryMutationBody = ProductCategoryDTO
    export type UpdateProductCategoryMutationError = ErrorType<unknown>

    export const useUpdateProductCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductCategory>>, TError,{id: number;data: ProductCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateProductCategory>>,
        TError,
        {id: number;data: ProductCategoryDTO},
        TContext
      > => {

      const mutationOptions = getUpdateProductCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteProductCategory = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/product-categories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteProductCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductCategory>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductCategory>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteProductCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductCategory>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductCategory(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductCategory>>>
    
    export type DeleteProductCategoryMutationError = ErrorType<unknown>

    export const useDeleteProductCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductCategory>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductCategory>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateProductCategory = (
    id: number,
    productCategoryDTO: ProductCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<ProductCategoryDTO>(
      {url: `/api/product-categories/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: productCategoryDTO
    },
      options);
    }
  


export const getPartialUpdateProductCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateProductCategory>>, TError,{id: number;data: ProductCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateProductCategory>>, TError,{id: number;data: ProductCategoryDTO}, TContext> => {
    
const mutationKey = ['partialUpdateProductCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateProductCategory>>, {id: number;data: ProductCategoryDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateProductCategory(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateProductCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateProductCategory>>>
    export type PartialUpdateProductCategoryMutationBody = ProductCategoryDTO
    export type PartialUpdateProductCategoryMutationError = ErrorType<unknown>

    export const usePartialUpdateProductCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateProductCategory>>, TError,{id: number;data: ProductCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateProductCategory>>,
        TError,
        {id: number;data: ProductCategoryDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateProductCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllProductCategories = (
    params?: GetAllProductCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductCategoryDTO[]>(
      {url: `/api/product-categories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllProductCategoriesQueryKey = (params?: GetAllProductCategoriesParams,) => {
    return [`/api/product-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllProductCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllProductCategories>>, TError = ErrorType<unknown>>(params?: GetAllProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllProductCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProductCategories>>> = ({ signal }) => getAllProductCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllProductCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllProductCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllProductCategories>>>
export type GetAllProductCategoriesQueryError = ErrorType<unknown>


export function useGetAllProductCategories<TData = Awaited<ReturnType<typeof getAllProductCategories>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllProductCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProductCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllProductCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProductCategories<TData = Awaited<ReturnType<typeof getAllProductCategories>>, TError = ErrorType<unknown>>(
 params?: GetAllProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProductCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllProductCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProductCategories<TData = Awaited<ReturnType<typeof getAllProductCategories>>, TError = ErrorType<unknown>>(
 params?: GetAllProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllProductCategories<TData = Awaited<ReturnType<typeof getAllProductCategories>>, TError = ErrorType<unknown>>(
 params?: GetAllProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllProductCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createProductCategory = (
    productCategoryDTO: ProductCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductCategoryDTO>(
      {url: `/api/product-categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productCategoryDTO, signal
    },
      options);
    }
  


export const getCreateProductCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductCategory>>, TError,{data: ProductCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createProductCategory>>, TError,{data: ProductCategoryDTO}, TContext> => {
    
const mutationKey = ['createProductCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductCategory>>, {data: ProductCategoryDTO}> = (props) => {
          const {data} = props ?? {};

          return  createProductCategory(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createProductCategory>>>
    export type CreateProductCategoryMutationBody = ProductCategoryDTO
    export type CreateProductCategoryMutationError = ErrorType<unknown>

    export const useCreateProductCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductCategory>>, TError,{data: ProductCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createProductCategory>>,
        TError,
        {data: ProductCategoryDTO},
        TContext
      > => {

      const mutationOptions = getCreateProductCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countProductCategories = (
    params?: CountProductCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/product-categories/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountProductCategoriesQueryKey = (params?: CountProductCategoriesParams,) => {
    return [`/api/product-categories/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountProductCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof countProductCategories>>, TError = ErrorType<unknown>>(params?: CountProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountProductCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countProductCategories>>> = ({ signal }) => countProductCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countProductCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountProductCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof countProductCategories>>>
export type CountProductCategoriesQueryError = ErrorType<unknown>


export function useCountProductCategories<TData = Awaited<ReturnType<typeof countProductCategories>>, TError = ErrorType<unknown>>(
 params: undefined |  CountProductCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countProductCategories>>,
          TError,
          Awaited<ReturnType<typeof countProductCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountProductCategories<TData = Awaited<ReturnType<typeof countProductCategories>>, TError = ErrorType<unknown>>(
 params?: CountProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countProductCategories>>,
          TError,
          Awaited<ReturnType<typeof countProductCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountProductCategories<TData = Awaited<ReturnType<typeof countProductCategories>>, TError = ErrorType<unknown>>(
 params?: CountProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountProductCategories<TData = Awaited<ReturnType<typeof countProductCategories>>, TError = ErrorType<unknown>>(
 params?: CountProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountProductCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchProductCategories = (
    params: SearchProductCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductCategoryDTO[]>(
      {url: `/api/product-categories/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchProductCategoriesQueryKey = (params: SearchProductCategoriesParams,) => {
    return [`/api/product-categories/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchProductCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof searchProductCategories>>, TError = ErrorType<unknown>>(params: SearchProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchProductCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchProductCategories>>> = ({ signal }) => searchProductCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchProductCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchProductCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof searchProductCategories>>>
export type SearchProductCategoriesQueryError = ErrorType<unknown>


export function useSearchProductCategories<TData = Awaited<ReturnType<typeof searchProductCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProductCategories>>,
          TError,
          Awaited<ReturnType<typeof searchProductCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProductCategories<TData = Awaited<ReturnType<typeof searchProductCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProductCategories>>,
          TError,
          Awaited<ReturnType<typeof searchProductCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProductCategories<TData = Awaited<ReturnType<typeof searchProductCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchProductCategories<TData = Awaited<ReturnType<typeof searchProductCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchProductCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



