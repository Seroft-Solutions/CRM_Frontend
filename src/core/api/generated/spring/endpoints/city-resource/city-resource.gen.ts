/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CityDTO,
  CountCitiesParams,
  GetAllCitiesParams,
  SearchCitiesParams
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getCity = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CityDTO>(
      {url: `/api/cities/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCityQueryKey = (id: number,) => {
    return [`/api/cities/${id}`] as const;
    }

    
export const getGetCityQueryOptions = <TData = Awaited<ReturnType<typeof getCity>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCityQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCity>>> = ({ signal }) => getCity(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCityQueryResult = NonNullable<Awaited<ReturnType<typeof getCity>>>
export type GetCityQueryError = ErrorType<unknown>


export function useGetCity<TData = Awaited<ReturnType<typeof getCity>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCity>>,
          TError,
          Awaited<ReturnType<typeof getCity>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCity<TData = Awaited<ReturnType<typeof getCity>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCity>>,
          TError,
          Awaited<ReturnType<typeof getCity>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCity<TData = Awaited<ReturnType<typeof getCity>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCity<TData = Awaited<ReturnType<typeof getCity>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCity>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCityQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCity = (
    id: number,
    cityDTO: CityDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CityDTO>(
      {url: `/api/cities/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: cityDTO
    },
      options);
    }
  


export const getUpdateCityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCity>>, TError,{id: number;data: CityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCity>>, TError,{id: number;data: CityDTO}, TContext> => {
    
const mutationKey = ['updateCity'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCity>>, {id: number;data: CityDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCity(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCityMutationResult = NonNullable<Awaited<ReturnType<typeof updateCity>>>
    export type UpdateCityMutationBody = CityDTO
    export type UpdateCityMutationError = ErrorType<unknown>

    export const useUpdateCity = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCity>>, TError,{id: number;data: CityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCity>>,
        TError,
        {id: number;data: CityDTO},
        TContext
      > => {

      const mutationOptions = getUpdateCityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCity = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/cities/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCity>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCity>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteCity'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCity>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCity(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCityMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCity>>>
    
    export type DeleteCityMutationError = ErrorType<unknown>

    export const useDeleteCity = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCity>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCity>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateCity = (
    id: number,
    cityDTO: CityDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CityDTO>(
      {url: `/api/cities/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: cityDTO
    },
      options);
    }
  


export const getPartialUpdateCityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCity>>, TError,{id: number;data: CityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCity>>, TError,{id: number;data: CityDTO}, TContext> => {
    
const mutationKey = ['partialUpdateCity'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateCity>>, {id: number;data: CityDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateCity(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateCityMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateCity>>>
    export type PartialUpdateCityMutationBody = CityDTO
    export type PartialUpdateCityMutationError = ErrorType<unknown>

    export const usePartialUpdateCity = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCity>>, TError,{id: number;data: CityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateCity>>,
        TError,
        {id: number;data: CityDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateCityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllCities = (
    params?: GetAllCitiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CityDTO[]>(
      {url: `/api/cities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllCitiesQueryKey = (params?: GetAllCitiesParams,) => {
    return [`/api/cities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllCitiesQueryOptions = <TData = Awaited<ReturnType<typeof getAllCities>>, TError = ErrorType<unknown>>(params?: GetAllCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCities>>> = ({ signal }) => getAllCities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCities>>>
export type GetAllCitiesQueryError = ErrorType<unknown>


export function useGetAllCities<TData = Awaited<ReturnType<typeof getAllCities>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllCitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCities>>,
          TError,
          Awaited<ReturnType<typeof getAllCities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCities<TData = Awaited<ReturnType<typeof getAllCities>>, TError = ErrorType<unknown>>(
 params?: GetAllCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCities>>,
          TError,
          Awaited<ReturnType<typeof getAllCities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCities<TData = Awaited<ReturnType<typeof getAllCities>>, TError = ErrorType<unknown>>(
 params?: GetAllCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCities<TData = Awaited<ReturnType<typeof getAllCities>>, TError = ErrorType<unknown>>(
 params?: GetAllCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCitiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createCity = (
    cityDTO: CityDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CityDTO>(
      {url: `/api/cities`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cityDTO, signal
    },
      options);
    }
  


export const getCreateCityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCity>>, TError,{data: CityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createCity>>, TError,{data: CityDTO}, TContext> => {
    
const mutationKey = ['createCity'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCity>>, {data: CityDTO}> = (props) => {
          const {data} = props ?? {};

          return  createCity(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCityMutationResult = NonNullable<Awaited<ReturnType<typeof createCity>>>
    export type CreateCityMutationBody = CityDTO
    export type CreateCityMutationError = ErrorType<unknown>

    export const useCreateCity = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCity>>, TError,{data: CityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCity>>,
        TError,
        {data: CityDTO},
        TContext
      > => {

      const mutationOptions = getCreateCityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countCities = (
    params?: CountCitiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/cities/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountCitiesQueryKey = (params?: CountCitiesParams,) => {
    return [`/api/cities/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountCitiesQueryOptions = <TData = Awaited<ReturnType<typeof countCities>>, TError = ErrorType<unknown>>(params?: CountCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountCitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countCities>>> = ({ signal }) => countCities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countCities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountCitiesQueryResult = NonNullable<Awaited<ReturnType<typeof countCities>>>
export type CountCitiesQueryError = ErrorType<unknown>


export function useCountCities<TData = Awaited<ReturnType<typeof countCities>>, TError = ErrorType<unknown>>(
 params: undefined |  CountCitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCities>>,
          TError,
          Awaited<ReturnType<typeof countCities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCities<TData = Awaited<ReturnType<typeof countCities>>, TError = ErrorType<unknown>>(
 params?: CountCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCities>>,
          TError,
          Awaited<ReturnType<typeof countCities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCities<TData = Awaited<ReturnType<typeof countCities>>, TError = ErrorType<unknown>>(
 params?: CountCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountCities<TData = Awaited<ReturnType<typeof countCities>>, TError = ErrorType<unknown>>(
 params?: CountCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountCitiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchCities = (
    params: SearchCitiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CityDTO[]>(
      {url: `/api/cities/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchCitiesQueryKey = (params: SearchCitiesParams,) => {
    return [`/api/cities/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchCitiesQueryOptions = <TData = Awaited<ReturnType<typeof searchCities>>, TError = ErrorType<unknown>>(params: SearchCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCities>>> = ({ signal }) => searchCities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCitiesQueryResult = NonNullable<Awaited<ReturnType<typeof searchCities>>>
export type SearchCitiesQueryError = ErrorType<unknown>


export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = ErrorType<unknown>>(
 params: SearchCitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCities>>,
          TError,
          Awaited<ReturnType<typeof searchCities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = ErrorType<unknown>>(
 params: SearchCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCities>>,
          TError,
          Awaited<ReturnType<typeof searchCities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = ErrorType<unknown>>(
 params: SearchCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = ErrorType<unknown>>(
 params: SearchCitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCitiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



