/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  SmsRequest
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const sendSms = (
    smsRequest: SmsRequest,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<string>(
      {url: `/api/sms/send`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: smsRequest, signal
    },
      options);
    }
  


export const getSendSmsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendSms>>, TError,{data: SmsRequest}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof sendSms>>, TError,{data: SmsRequest}, TContext> => {
    
const mutationKey = ['sendSms'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendSms>>, {data: SmsRequest}> = (props) => {
          const {data} = props ?? {};

          return  sendSms(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendSmsMutationResult = NonNullable<Awaited<ReturnType<typeof sendSms>>>
    export type SendSmsMutationBody = SmsRequest
    export type SendSmsMutationError = unknown

    export const useSendSms = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendSms>>, TError,{data: SmsRequest}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendSms>>,
        TError,
        {data: SmsRequest},
        TContext
      > => {

      const mutationOptions = getSendSmsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    