/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountGroupsParams,
  GetAllGroupsParams,
  GroupDTO,
  SearchGroupsParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getGroup = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GroupDTO>(
      {url: `/api/groups/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetGroupQueryKey = (id: number,) => {
    return [`/api/groups/${id}`] as const;
    }

    
export const getGetGroupQueryOptions = <TData = Awaited<ReturnType<typeof getGroup>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroup>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGroupQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroup>>> = ({ signal }) => getGroup(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGroup>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getGroup>>>
export type GetGroupQueryError = ErrorType<unknown>


export function useGetGroup<TData = Awaited<ReturnType<typeof getGroup>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroup>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroup>>,
          TError,
          Awaited<ReturnType<typeof getGroup>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroup<TData = Awaited<ReturnType<typeof getGroup>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroup>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGroup>>,
          TError,
          Awaited<ReturnType<typeof getGroup>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGroup<TData = Awaited<ReturnType<typeof getGroup>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroup>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetGroup<TData = Awaited<ReturnType<typeof getGroup>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGroup>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGroupQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateGroup = (
    id: number,
    groupDTO: GroupDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<GroupDTO>(
      {url: `/api/groups/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: groupDTO
    },
      options);
    }
  


export const getUpdateGroupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGroup>>, TError,{id: number;data: GroupDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateGroup>>, TError,{id: number;data: GroupDTO}, TContext> => {
    
const mutationKey = ['updateGroup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateGroup>>, {id: number;data: GroupDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateGroup(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateGroupMutationResult = NonNullable<Awaited<ReturnType<typeof updateGroup>>>
    export type UpdateGroupMutationBody = GroupDTO
    export type UpdateGroupMutationError = ErrorType<unknown>

    export const useUpdateGroup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGroup>>, TError,{id: number;data: GroupDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateGroup>>,
        TError,
        {id: number;data: GroupDTO},
        TContext
      > => {

      const mutationOptions = getUpdateGroupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteGroup = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/groups/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteGroupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGroup>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteGroup>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteGroup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGroup>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteGroup(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteGroupMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGroup>>>
    
    export type DeleteGroupMutationError = ErrorType<unknown>

    export const useDeleteGroup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGroup>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteGroup>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteGroupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateGroup = (
    id: number,
    groupDTO: GroupDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<GroupDTO>(
      {url: `/api/groups/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: groupDTO
    },
      options);
    }
  


export const getPartialUpdateGroupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateGroup>>, TError,{id: number;data: GroupDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateGroup>>, TError,{id: number;data: GroupDTO}, TContext> => {
    
const mutationKey = ['partialUpdateGroup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateGroup>>, {id: number;data: GroupDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateGroup(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateGroupMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateGroup>>>
    export type PartialUpdateGroupMutationBody = GroupDTO
    export type PartialUpdateGroupMutationError = ErrorType<unknown>

    export const usePartialUpdateGroup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateGroup>>, TError,{id: number;data: GroupDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateGroup>>,
        TError,
        {id: number;data: GroupDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateGroupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllGroups = (
    params?: GetAllGroupsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GroupDTO[]>(
      {url: `/api/groups`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllGroupsQueryKey = (params?: GetAllGroupsParams,) => {
    return [`/api/groups`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getAllGroups>>, TError = ErrorType<unknown>>(params?: GetAllGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllGroupsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllGroups>>> = ({ signal }) => getAllGroups(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllGroups>>>
export type GetAllGroupsQueryError = ErrorType<unknown>


export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllGroupsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllGroups>>,
          TError,
          Awaited<ReturnType<typeof getAllGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = ErrorType<unknown>>(
 params?: GetAllGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllGroups>>,
          TError,
          Awaited<ReturnType<typeof getAllGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = ErrorType<unknown>>(
 params?: GetAllGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllGroups<TData = Awaited<ReturnType<typeof getAllGroups>>, TError = ErrorType<unknown>>(
 params?: GetAllGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createGroup = (
    groupDTO: GroupDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GroupDTO>(
      {url: `/api/groups`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: groupDTO, signal
    },
      options);
    }
  


export const getCreateGroupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError,{data: GroupDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError,{data: GroupDTO}, TContext> => {
    
const mutationKey = ['createGroup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGroup>>, {data: GroupDTO}> = (props) => {
          const {data} = props ?? {};

          return  createGroup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGroupMutationResult = NonNullable<Awaited<ReturnType<typeof createGroup>>>
    export type CreateGroupMutationBody = GroupDTO
    export type CreateGroupMutationError = ErrorType<unknown>

    export const useCreateGroup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError,{data: GroupDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createGroup>>,
        TError,
        {data: GroupDTO},
        TContext
      > => {

      const mutationOptions = getCreateGroupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countGroups = (
    params?: CountGroupsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/groups/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountGroupsQueryKey = (params?: CountGroupsParams,) => {
    return [`/api/groups/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountGroupsQueryOptions = <TData = Awaited<ReturnType<typeof countGroups>>, TError = ErrorType<unknown>>(params?: CountGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountGroupsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countGroups>>> = ({ signal }) => countGroups(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof countGroups>>>
export type CountGroupsQueryError = ErrorType<unknown>


export function useCountGroups<TData = Awaited<ReturnType<typeof countGroups>>, TError = ErrorType<unknown>>(
 params: undefined |  CountGroupsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countGroups>>,
          TError,
          Awaited<ReturnType<typeof countGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountGroups<TData = Awaited<ReturnType<typeof countGroups>>, TError = ErrorType<unknown>>(
 params?: CountGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countGroups>>,
          TError,
          Awaited<ReturnType<typeof countGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountGroups<TData = Awaited<ReturnType<typeof countGroups>>, TError = ErrorType<unknown>>(
 params?: CountGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountGroups<TData = Awaited<ReturnType<typeof countGroups>>, TError = ErrorType<unknown>>(
 params?: CountGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchGroups = (
    params: SearchGroupsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GroupDTO[]>(
      {url: `/api/groups/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchGroupsQueryKey = (params: SearchGroupsParams,) => {
    return [`/api/groups/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchGroupsQueryOptions = <TData = Awaited<ReturnType<typeof searchGroups>>, TError = ErrorType<unknown>>(params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchGroupsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchGroups>>> = ({ signal }) => searchGroups(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof searchGroups>>>
export type SearchGroupsQueryError = ErrorType<unknown>


export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = ErrorType<unknown>>(
 params: SearchGroupsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchGroups>>,
          TError,
          Awaited<ReturnType<typeof searchGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = ErrorType<unknown>>(
 params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchGroups>>,
          TError,
          Awaited<ReturnType<typeof searchGroups>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = ErrorType<unknown>>(
 params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchGroups<TData = Awaited<ReturnType<typeof searchGroups>>, TError = ErrorType<unknown>>(
 params: SearchGroupsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchGroups>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



