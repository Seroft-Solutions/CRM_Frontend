/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Authority
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getAllAuthorities = (
    
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<Authority[]>(
      {url: `/api/authorities`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllAuthoritiesQueryKey = () => {
    return [`/api/authorities`] as const;
    }

    
export const getGetAllAuthoritiesQueryOptions = <TData = Awaited<ReturnType<typeof getAllAuthorities>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAuthoritiesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAuthorities>>> = ({ signal }) => getAllAuthorities(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAuthoritiesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAuthorities>>>
export type GetAllAuthoritiesQueryError = ErrorType<unknown>


export function useGetAllAuthorities<TData = Awaited<ReturnType<typeof getAllAuthorities>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAuthorities>>,
          TError,
          Awaited<ReturnType<typeof getAllAuthorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAuthorities<TData = Awaited<ReturnType<typeof getAllAuthorities>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAuthorities>>,
          TError,
          Awaited<ReturnType<typeof getAllAuthorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAuthorities<TData = Awaited<ReturnType<typeof getAllAuthorities>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllAuthorities<TData = Awaited<ReturnType<typeof getAllAuthorities>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAuthorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAuthoritiesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createAuthority = (
    authority: Authority,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<Authority>(
      {url: `/api/authorities`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authority, signal
    },
      options);
    }
  


export const getCreateAuthorityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAuthority>>, TError,{data: Authority}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createAuthority>>, TError,{data: Authority}, TContext> => {
    
const mutationKey = ['createAuthority'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAuthority>>, {data: Authority}> = (props) => {
          const {data} = props ?? {};

          return  createAuthority(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAuthorityMutationResult = NonNullable<Awaited<ReturnType<typeof createAuthority>>>
    export type CreateAuthorityMutationBody = Authority
    export type CreateAuthorityMutationError = ErrorType<unknown>

    export const useCreateAuthority = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAuthority>>, TError,{data: Authority}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAuthority>>,
        TError,
        {data: Authority},
        TContext
      > => {

      const mutationOptions = getCreateAuthorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAuthority = (
    id: string,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<Authority>(
      {url: `/api/authorities/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthorityQueryKey = (id: string,) => {
    return [`/api/authorities/${id}`] as const;
    }

    
export const getGetAuthorityQueryOptions = <TData = Awaited<ReturnType<typeof getAuthority>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthorityQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthority>>> = ({ signal }) => getAuthority(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthorityQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthority>>>
export type GetAuthorityQueryError = ErrorType<unknown>


export function useGetAuthority<TData = Awaited<ReturnType<typeof getAuthority>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthority>>,
          TError,
          Awaited<ReturnType<typeof getAuthority>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthority<TData = Awaited<ReturnType<typeof getAuthority>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthority>>,
          TError,
          Awaited<ReturnType<typeof getAuthority>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthority<TData = Awaited<ReturnType<typeof getAuthority>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAuthority<TData = Awaited<ReturnType<typeof getAuthority>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthority>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthorityQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteAuthority = (
    id: string,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/authorities/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAuthorityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAuthority>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAuthority>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteAuthority'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAuthority>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteAuthority(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAuthorityMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAuthority>>>
    
    export type DeleteAuthorityMutationError = ErrorType<unknown>

    export const useDeleteAuthority = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAuthority>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAuthority>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteAuthorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    