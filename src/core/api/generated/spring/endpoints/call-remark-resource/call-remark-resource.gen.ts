/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CallRemarkDTO,
  CountCallRemarksParams,
  GetAllCallRemarksParams,
  SearchCallRemarksParams
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getCallRemark = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallRemarkDTO>(
      {url: `/api/call-remarks/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCallRemarkQueryKey = (id: number,) => {
    return [`/api/call-remarks/${id}`] as const;
    }

    
export const getGetCallRemarkQueryOptions = <TData = Awaited<ReturnType<typeof getCallRemark>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCallRemarkQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallRemark>>> = ({ signal }) => getCallRemark(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCallRemarkQueryResult = NonNullable<Awaited<ReturnType<typeof getCallRemark>>>
export type GetCallRemarkQueryError = ErrorType<unknown>


export function useGetCallRemark<TData = Awaited<ReturnType<typeof getCallRemark>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallRemark>>,
          TError,
          Awaited<ReturnType<typeof getCallRemark>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallRemark<TData = Awaited<ReturnType<typeof getCallRemark>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallRemark>>,
          TError,
          Awaited<ReturnType<typeof getCallRemark>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallRemark<TData = Awaited<ReturnType<typeof getCallRemark>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCallRemark<TData = Awaited<ReturnType<typeof getCallRemark>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallRemark>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCallRemarkQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCallRemark = (
    id: number,
    callRemarkDTO: CallRemarkDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallRemarkDTO>(
      {url: `/api/call-remarks/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: callRemarkDTO
    },
      options);
    }
  


export const getUpdateCallRemarkMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallRemark>>, TError,{id: number;data: CallRemarkDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCallRemark>>, TError,{id: number;data: CallRemarkDTO}, TContext> => {
    
const mutationKey = ['updateCallRemark'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCallRemark>>, {id: number;data: CallRemarkDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCallRemark(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCallRemarkMutationResult = NonNullable<Awaited<ReturnType<typeof updateCallRemark>>>
    export type UpdateCallRemarkMutationBody = CallRemarkDTO
    export type UpdateCallRemarkMutationError = ErrorType<unknown>

    export const useUpdateCallRemark = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallRemark>>, TError,{id: number;data: CallRemarkDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCallRemark>>,
        TError,
        {id: number;data: CallRemarkDTO},
        TContext
      > => {

      const mutationOptions = getUpdateCallRemarkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCallRemark = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/call-remarks/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCallRemarkMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallRemark>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCallRemark>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteCallRemark'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCallRemark>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCallRemark(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCallRemarkMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCallRemark>>>
    
    export type DeleteCallRemarkMutationError = ErrorType<unknown>

    export const useDeleteCallRemark = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallRemark>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCallRemark>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCallRemarkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateCallRemark = (
    id: number,
    callRemarkDTO: CallRemarkDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallRemarkDTO>(
      {url: `/api/call-remarks/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: callRemarkDTO
    },
      options);
    }
  


export const getPartialUpdateCallRemarkMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallRemark>>, TError,{id: number;data: CallRemarkDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallRemark>>, TError,{id: number;data: CallRemarkDTO}, TContext> => {
    
const mutationKey = ['partialUpdateCallRemark'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateCallRemark>>, {id: number;data: CallRemarkDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateCallRemark(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateCallRemarkMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateCallRemark>>>
    export type PartialUpdateCallRemarkMutationBody = CallRemarkDTO
    export type PartialUpdateCallRemarkMutationError = ErrorType<unknown>

    export const usePartialUpdateCallRemark = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallRemark>>, TError,{id: number;data: CallRemarkDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateCallRemark>>,
        TError,
        {id: number;data: CallRemarkDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateCallRemarkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllCallRemarks = (
    params?: GetAllCallRemarksParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallRemarkDTO[]>(
      {url: `/api/call-remarks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllCallRemarksQueryKey = (params?: GetAllCallRemarksParams,) => {
    return [`/api/call-remarks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllCallRemarksQueryOptions = <TData = Awaited<ReturnType<typeof getAllCallRemarks>>, TError = ErrorType<unknown>>(params?: GetAllCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCallRemarksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallRemarks>>> = ({ signal }) => getAllCallRemarks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCallRemarksQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCallRemarks>>>
export type GetAllCallRemarksQueryError = ErrorType<unknown>


export function useGetAllCallRemarks<TData = Awaited<ReturnType<typeof getAllCallRemarks>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllCallRemarksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallRemarks>>,
          TError,
          Awaited<ReturnType<typeof getAllCallRemarks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallRemarks<TData = Awaited<ReturnType<typeof getAllCallRemarks>>, TError = ErrorType<unknown>>(
 params?: GetAllCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallRemarks>>,
          TError,
          Awaited<ReturnType<typeof getAllCallRemarks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallRemarks<TData = Awaited<ReturnType<typeof getAllCallRemarks>>, TError = ErrorType<unknown>>(
 params?: GetAllCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCallRemarks<TData = Awaited<ReturnType<typeof getAllCallRemarks>>, TError = ErrorType<unknown>>(
 params?: GetAllCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCallRemarksQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createCallRemark = (
    callRemarkDTO: CallRemarkDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallRemarkDTO>(
      {url: `/api/call-remarks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: callRemarkDTO, signal
    },
      options);
    }
  


export const getCreateCallRemarkMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallRemark>>, TError,{data: CallRemarkDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createCallRemark>>, TError,{data: CallRemarkDTO}, TContext> => {
    
const mutationKey = ['createCallRemark'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCallRemark>>, {data: CallRemarkDTO}> = (props) => {
          const {data} = props ?? {};

          return  createCallRemark(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCallRemarkMutationResult = NonNullable<Awaited<ReturnType<typeof createCallRemark>>>
    export type CreateCallRemarkMutationBody = CallRemarkDTO
    export type CreateCallRemarkMutationError = ErrorType<unknown>

    export const useCreateCallRemark = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallRemark>>, TError,{data: CallRemarkDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCallRemark>>,
        TError,
        {data: CallRemarkDTO},
        TContext
      > => {

      const mutationOptions = getCreateCallRemarkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countCallRemarks = (
    params?: CountCallRemarksParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/call-remarks/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountCallRemarksQueryKey = (params?: CountCallRemarksParams,) => {
    return [`/api/call-remarks/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountCallRemarksQueryOptions = <TData = Awaited<ReturnType<typeof countCallRemarks>>, TError = ErrorType<unknown>>(params?: CountCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountCallRemarksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallRemarks>>> = ({ signal }) => countCallRemarks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountCallRemarksQueryResult = NonNullable<Awaited<ReturnType<typeof countCallRemarks>>>
export type CountCallRemarksQueryError = ErrorType<unknown>


export function useCountCallRemarks<TData = Awaited<ReturnType<typeof countCallRemarks>>, TError = ErrorType<unknown>>(
 params: undefined |  CountCallRemarksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallRemarks>>,
          TError,
          Awaited<ReturnType<typeof countCallRemarks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallRemarks<TData = Awaited<ReturnType<typeof countCallRemarks>>, TError = ErrorType<unknown>>(
 params?: CountCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallRemarks>>,
          TError,
          Awaited<ReturnType<typeof countCallRemarks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallRemarks<TData = Awaited<ReturnType<typeof countCallRemarks>>, TError = ErrorType<unknown>>(
 params?: CountCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountCallRemarks<TData = Awaited<ReturnType<typeof countCallRemarks>>, TError = ErrorType<unknown>>(
 params?: CountCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountCallRemarksQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchCallRemarks = (
    params: SearchCallRemarksParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallRemarkDTO[]>(
      {url: `/api/call-remarks/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchCallRemarksQueryKey = (params: SearchCallRemarksParams,) => {
    return [`/api/call-remarks/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchCallRemarksQueryOptions = <TData = Awaited<ReturnType<typeof searchCallRemarks>>, TError = ErrorType<unknown>>(params: SearchCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCallRemarksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallRemarks>>> = ({ signal }) => searchCallRemarks(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCallRemarksQueryResult = NonNullable<Awaited<ReturnType<typeof searchCallRemarks>>>
export type SearchCallRemarksQueryError = ErrorType<unknown>


export function useSearchCallRemarks<TData = Awaited<ReturnType<typeof searchCallRemarks>>, TError = ErrorType<unknown>>(
 params: SearchCallRemarksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallRemarks>>,
          TError,
          Awaited<ReturnType<typeof searchCallRemarks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallRemarks<TData = Awaited<ReturnType<typeof searchCallRemarks>>, TError = ErrorType<unknown>>(
 params: SearchCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallRemarks>>,
          TError,
          Awaited<ReturnType<typeof searchCallRemarks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallRemarks<TData = Awaited<ReturnType<typeof searchCallRemarks>>, TError = ErrorType<unknown>>(
 params: SearchCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchCallRemarks<TData = Awaited<ReturnType<typeof searchCallRemarks>>, TError = ErrorType<unknown>>(
 params: SearchCallRemarksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallRemarks>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCallRemarksQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



