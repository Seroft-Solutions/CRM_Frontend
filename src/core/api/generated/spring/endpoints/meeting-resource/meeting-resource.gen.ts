/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountMeetingsParams,
  GetAllMeetingsParams,
  MeetingDTO,
  SearchMeetingsParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getMeeting = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingDTO>(
      {url: `/api/meetings/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeetingQueryKey = (id: number,) => {
    return [`/api/meetings/${id}`] as const;
    }

    
export const getGetMeetingQueryOptions = <TData = Awaited<ReturnType<typeof getMeeting>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeeting>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeetingQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeeting>>> = ({ signal }) => getMeeting(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeeting>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeetingQueryResult = NonNullable<Awaited<ReturnType<typeof getMeeting>>>
export type GetMeetingQueryError = ErrorType<unknown>


export function useGetMeeting<TData = Awaited<ReturnType<typeof getMeeting>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeeting>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeeting>>,
          TError,
          Awaited<ReturnType<typeof getMeeting>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeeting<TData = Awaited<ReturnType<typeof getMeeting>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeeting>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeeting>>,
          TError,
          Awaited<ReturnType<typeof getMeeting>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeeting<TData = Awaited<ReturnType<typeof getMeeting>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeeting>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMeeting<TData = Awaited<ReturnType<typeof getMeeting>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeeting>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeetingQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateMeeting = (
    id: number,
    meetingDTO: MeetingDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<MeetingDTO>(
      {url: `/api/meetings/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meetingDTO
    },
      options);
    }
  


export const getUpdateMeetingMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMeeting>>, TError,{id: number;data: MeetingDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMeeting>>, TError,{id: number;data: MeetingDTO}, TContext> => {
    
const mutationKey = ['updateMeeting'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMeeting>>, {id: number;data: MeetingDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMeeting(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMeetingMutationResult = NonNullable<Awaited<ReturnType<typeof updateMeeting>>>
    export type UpdateMeetingMutationBody = MeetingDTO
    export type UpdateMeetingMutationError = ErrorType<unknown>

    export const useUpdateMeeting = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMeeting>>, TError,{id: number;data: MeetingDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateMeeting>>,
        TError,
        {id: number;data: MeetingDTO},
        TContext
      > => {

      const mutationOptions = getUpdateMeetingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteMeeting = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/meetings/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeetingMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeeting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeeting>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteMeeting'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeeting>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeeting(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeetingMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeeting>>>
    
    export type DeleteMeetingMutationError = ErrorType<unknown>

    export const useDeleteMeeting = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeeting>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeeting>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeetingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateMeeting = (
    id: number,
    meetingDTO: MeetingDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<MeetingDTO>(
      {url: `/api/meetings/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: meetingDTO
    },
      options);
    }
  


export const getPartialUpdateMeetingMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeeting>>, TError,{id: number;data: MeetingDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeeting>>, TError,{id: number;data: MeetingDTO}, TContext> => {
    
const mutationKey = ['partialUpdateMeeting'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateMeeting>>, {id: number;data: MeetingDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateMeeting(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateMeetingMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateMeeting>>>
    export type PartialUpdateMeetingMutationBody = MeetingDTO
    export type PartialUpdateMeetingMutationError = ErrorType<unknown>

    export const usePartialUpdateMeeting = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeeting>>, TError,{id: number;data: MeetingDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateMeeting>>,
        TError,
        {id: number;data: MeetingDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateMeetingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllMeetings = (
    params?: GetAllMeetingsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingDTO[]>(
      {url: `/api/meetings`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllMeetingsQueryKey = (params?: GetAllMeetingsParams,) => {
    return [`/api/meetings`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllMeetingsQueryOptions = <TData = Awaited<ReturnType<typeof getAllMeetings>>, TError = ErrorType<unknown>>(params?: GetAllMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMeetingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMeetings>>> = ({ signal }) => getAllMeetings(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMeetings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMeetingsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMeetings>>>
export type GetAllMeetingsQueryError = ErrorType<unknown>


export function useGetAllMeetings<TData = Awaited<ReturnType<typeof getAllMeetings>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllMeetingsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMeetings>>,
          TError,
          Awaited<ReturnType<typeof getAllMeetings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMeetings<TData = Awaited<ReturnType<typeof getAllMeetings>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMeetings>>,
          TError,
          Awaited<ReturnType<typeof getAllMeetings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMeetings<TData = Awaited<ReturnType<typeof getAllMeetings>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllMeetings<TData = Awaited<ReturnType<typeof getAllMeetings>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMeetingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createMeeting = (
    meetingDTO: MeetingDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingDTO>(
      {url: `/api/meetings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meetingDTO, signal
    },
      options);
    }
  


export const getCreateMeetingMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeeting>>, TError,{data: MeetingDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createMeeting>>, TError,{data: MeetingDTO}, TContext> => {
    
const mutationKey = ['createMeeting'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMeeting>>, {data: MeetingDTO}> = (props) => {
          const {data} = props ?? {};

          return  createMeeting(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMeetingMutationResult = NonNullable<Awaited<ReturnType<typeof createMeeting>>>
    export type CreateMeetingMutationBody = MeetingDTO
    export type CreateMeetingMutationError = ErrorType<unknown>

    export const useCreateMeeting = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeeting>>, TError,{data: MeetingDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createMeeting>>,
        TError,
        {data: MeetingDTO},
        TContext
      > => {

      const mutationOptions = getCreateMeetingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countMeetings = (
    params?: CountMeetingsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/meetings/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountMeetingsQueryKey = (params?: CountMeetingsParams,) => {
    return [`/api/meetings/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountMeetingsQueryOptions = <TData = Awaited<ReturnType<typeof countMeetings>>, TError = ErrorType<unknown>>(params?: CountMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountMeetingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countMeetings>>> = ({ signal }) => countMeetings(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countMeetings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountMeetingsQueryResult = NonNullable<Awaited<ReturnType<typeof countMeetings>>>
export type CountMeetingsQueryError = ErrorType<unknown>


export function useCountMeetings<TData = Awaited<ReturnType<typeof countMeetings>>, TError = ErrorType<unknown>>(
 params: undefined |  CountMeetingsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countMeetings>>,
          TError,
          Awaited<ReturnType<typeof countMeetings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountMeetings<TData = Awaited<ReturnType<typeof countMeetings>>, TError = ErrorType<unknown>>(
 params?: CountMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countMeetings>>,
          TError,
          Awaited<ReturnType<typeof countMeetings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountMeetings<TData = Awaited<ReturnType<typeof countMeetings>>, TError = ErrorType<unknown>>(
 params?: CountMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountMeetings<TData = Awaited<ReturnType<typeof countMeetings>>, TError = ErrorType<unknown>>(
 params?: CountMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountMeetingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchMeetings = (
    params: SearchMeetingsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingDTO[]>(
      {url: `/api/meetings/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchMeetingsQueryKey = (params: SearchMeetingsParams,) => {
    return [`/api/meetings/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchMeetingsQueryOptions = <TData = Awaited<ReturnType<typeof searchMeetings>>, TError = ErrorType<unknown>>(params: SearchMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchMeetingsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMeetings>>> = ({ signal }) => searchMeetings(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchMeetings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchMeetingsQueryResult = NonNullable<Awaited<ReturnType<typeof searchMeetings>>>
export type SearchMeetingsQueryError = ErrorType<unknown>


export function useSearchMeetings<TData = Awaited<ReturnType<typeof searchMeetings>>, TError = ErrorType<unknown>>(
 params: SearchMeetingsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMeetings>>,
          TError,
          Awaited<ReturnType<typeof searchMeetings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMeetings<TData = Awaited<ReturnType<typeof searchMeetings>>, TError = ErrorType<unknown>>(
 params: SearchMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMeetings>>,
          TError,
          Awaited<ReturnType<typeof searchMeetings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMeetings<TData = Awaited<ReturnType<typeof searchMeetings>>, TError = ErrorType<unknown>>(
 params: SearchMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchMeetings<TData = Awaited<ReturnType<typeof searchMeetings>>, TError = ErrorType<unknown>>(
 params: SearchMeetingsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetings>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchMeetingsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



