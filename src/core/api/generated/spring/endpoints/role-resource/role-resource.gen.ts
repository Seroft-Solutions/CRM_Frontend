/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountRolesParams,
  GetAllRolesParams,
  RoleDTO,
  SearchRolesParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getRole = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<RoleDTO>(
      {url: `/api/roles/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetRoleQueryKey = (id: number,) => {
    return [`/api/roles/${id}`] as const;
    }

    
export const getGetRoleQueryOptions = <TData = Awaited<ReturnType<typeof getRole>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRole>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoleQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRole>>> = ({ signal }) => getRole(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRole>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getRole>>>
export type GetRoleQueryError = ErrorType<unknown>


export function useGetRole<TData = Awaited<ReturnType<typeof getRole>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRole>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRole>>,
          TError,
          Awaited<ReturnType<typeof getRole>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRole<TData = Awaited<ReturnType<typeof getRole>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRole>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRole>>,
          TError,
          Awaited<ReturnType<typeof getRole>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRole<TData = Awaited<ReturnType<typeof getRole>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRole>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetRole<TData = Awaited<ReturnType<typeof getRole>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRole>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRoleQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateRole = (
    id: number,
    roleDTO: RoleDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<RoleDTO>(
      {url: `/api/roles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roleDTO
    },
      options);
    }
  


export const getUpdateRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRole>>, TError,{id: number;data: RoleDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRole>>, TError,{id: number;data: RoleDTO}, TContext> => {
    
const mutationKey = ['updateRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRole>>, {id: number;data: RoleDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateRole(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateRole>>>
    export type UpdateRoleMutationBody = RoleDTO
    export type UpdateRoleMutationError = ErrorType<unknown>

    export const useUpdateRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRole>>, TError,{id: number;data: RoleDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateRole>>,
        TError,
        {id: number;data: RoleDTO},
        TContext
      > => {

      const mutationOptions = getUpdateRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteRole = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/roles/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRole>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRole>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRole>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteRole(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRoleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRole>>>
    
    export type DeleteRoleMutationError = ErrorType<unknown>

    export const useDeleteRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRole>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteRole>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateRole = (
    id: number,
    roleDTO: RoleDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<RoleDTO>(
      {url: `/api/roles/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: roleDTO
    },
      options);
    }
  


export const getPartialUpdateRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateRole>>, TError,{id: number;data: RoleDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateRole>>, TError,{id: number;data: RoleDTO}, TContext> => {
    
const mutationKey = ['partialUpdateRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateRole>>, {id: number;data: RoleDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateRole(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateRole>>>
    export type PartialUpdateRoleMutationBody = RoleDTO
    export type PartialUpdateRoleMutationError = ErrorType<unknown>

    export const usePartialUpdateRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateRole>>, TError,{id: number;data: RoleDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateRole>>,
        TError,
        {id: number;data: RoleDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllRoles = (
    params?: GetAllRolesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<RoleDTO[]>(
      {url: `/api/roles`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllRolesQueryKey = (params?: GetAllRolesParams,) => {
    return [`/api/roles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllRolesQueryOptions = <TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(params?: GetAllRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRoles>>> = ({ signal }) => getAllRoles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRoles>>>
export type GetAllRolesQueryError = ErrorType<unknown>


export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllRolesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          Awaited<ReturnType<typeof getAllRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
 params?: GetAllRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          Awaited<ReturnType<typeof getAllRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
 params?: GetAllRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllRoles<TData = Awaited<ReturnType<typeof getAllRoles>>, TError = ErrorType<unknown>>(
 params?: GetAllRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllRolesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createRole = (
    roleDTO: RoleDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<RoleDTO>(
      {url: `/api/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleDTO, signal
    },
      options);
    }
  


export const getCreateRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError,{data: RoleDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError,{data: RoleDTO}, TContext> => {
    
const mutationKey = ['createRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRole>>, {data: RoleDTO}> = (props) => {
          const {data} = props ?? {};

          return  createRole(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof createRole>>>
    export type CreateRoleMutationBody = RoleDTO
    export type CreateRoleMutationError = ErrorType<unknown>

    export const useCreateRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError,{data: RoleDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createRole>>,
        TError,
        {data: RoleDTO},
        TContext
      > => {

      const mutationOptions = getCreateRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countRoles = (
    params?: CountRolesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/roles/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountRolesQueryKey = (params?: CountRolesParams,) => {
    return [`/api/roles/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountRolesQueryOptions = <TData = Awaited<ReturnType<typeof countRoles>>, TError = ErrorType<unknown>>(params?: CountRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countRoles>>> = ({ signal }) => countRoles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountRolesQueryResult = NonNullable<Awaited<ReturnType<typeof countRoles>>>
export type CountRolesQueryError = ErrorType<unknown>


export function useCountRoles<TData = Awaited<ReturnType<typeof countRoles>>, TError = ErrorType<unknown>>(
 params: undefined |  CountRolesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countRoles>>,
          TError,
          Awaited<ReturnType<typeof countRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountRoles<TData = Awaited<ReturnType<typeof countRoles>>, TError = ErrorType<unknown>>(
 params?: CountRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countRoles>>,
          TError,
          Awaited<ReturnType<typeof countRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountRoles<TData = Awaited<ReturnType<typeof countRoles>>, TError = ErrorType<unknown>>(
 params?: CountRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountRoles<TData = Awaited<ReturnType<typeof countRoles>>, TError = ErrorType<unknown>>(
 params?: CountRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountRolesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchRoles = (
    params: SearchRolesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<RoleDTO[]>(
      {url: `/api/roles/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchRolesQueryKey = (params: SearchRolesParams,) => {
    return [`/api/roles/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchRolesQueryOptions = <TData = Awaited<ReturnType<typeof searchRoles>>, TError = ErrorType<unknown>>(params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchRoles>>> = ({ signal }) => searchRoles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchRolesQueryResult = NonNullable<Awaited<ReturnType<typeof searchRoles>>>
export type SearchRolesQueryError = ErrorType<unknown>


export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = ErrorType<unknown>>(
 params: SearchRolesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchRoles>>,
          TError,
          Awaited<ReturnType<typeof searchRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = ErrorType<unknown>>(
 params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchRoles>>,
          TError,
          Awaited<ReturnType<typeof searchRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = ErrorType<unknown>>(
 params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchRoles<TData = Awaited<ReturnType<typeof searchRoles>>, TError = ErrorType<unknown>>(
 params: SearchRolesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchRoles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchRolesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



