/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountUserAvailabilitiesParams,
  GetAllUserAvailabilitiesParams,
  SearchUserAvailabilitiesParams,
  UserAvailabilityDTO
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getUserAvailability = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserAvailabilityDTO>(
      {url: `/api/user-availabilities/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserAvailabilityQueryKey = (id: number,) => {
    return [`/api/user-availabilities/${id}`] as const;
    }

    
export const getGetUserAvailabilityQueryOptions = <TData = Awaited<ReturnType<typeof getUserAvailability>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAvailability>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserAvailabilityQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserAvailability>>> = ({ signal }) => getUserAvailability(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserAvailability>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserAvailabilityQueryResult = NonNullable<Awaited<ReturnType<typeof getUserAvailability>>>
export type GetUserAvailabilityQueryError = ErrorType<unknown>


export function useGetUserAvailability<TData = Awaited<ReturnType<typeof getUserAvailability>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAvailability>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAvailability>>,
          TError,
          Awaited<ReturnType<typeof getUserAvailability>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAvailability<TData = Awaited<ReturnType<typeof getUserAvailability>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAvailability>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserAvailability>>,
          TError,
          Awaited<ReturnType<typeof getUserAvailability>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserAvailability<TData = Awaited<ReturnType<typeof getUserAvailability>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAvailability>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserAvailability<TData = Awaited<ReturnType<typeof getUserAvailability>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserAvailability>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserAvailabilityQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateUserAvailability = (
    id: number,
    userAvailabilityDTO: UserAvailabilityDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<UserAvailabilityDTO>(
      {url: `/api/user-availabilities/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userAvailabilityDTO
    },
      options);
    }
  


export const getUpdateUserAvailabilityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserAvailability>>, TError,{id: number;data: UserAvailabilityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserAvailability>>, TError,{id: number;data: UserAvailabilityDTO}, TContext> => {
    
const mutationKey = ['updateUserAvailability'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserAvailability>>, {id: number;data: UserAvailabilityDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUserAvailability(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserAvailabilityMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserAvailability>>>
    export type UpdateUserAvailabilityMutationBody = UserAvailabilityDTO
    export type UpdateUserAvailabilityMutationError = ErrorType<unknown>

    export const useUpdateUserAvailability = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserAvailability>>, TError,{id: number;data: UserAvailabilityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateUserAvailability>>,
        TError,
        {id: number;data: UserAvailabilityDTO},
        TContext
      > => {

      const mutationOptions = getUpdateUserAvailabilityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteUserAvailability = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/user-availabilities/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUserAvailabilityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserAvailability>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserAvailability>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteUserAvailability'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserAvailability>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteUserAvailability(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserAvailabilityMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserAvailability>>>
    
    export type DeleteUserAvailabilityMutationError = ErrorType<unknown>

    export const useDeleteUserAvailability = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserAvailability>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserAvailability>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteUserAvailabilityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateUserAvailability = (
    id: number,
    userAvailabilityDTO: UserAvailabilityDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<UserAvailabilityDTO>(
      {url: `/api/user-availabilities/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userAvailabilityDTO
    },
      options);
    }
  


export const getPartialUpdateUserAvailabilityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserAvailability>>, TError,{id: number;data: UserAvailabilityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserAvailability>>, TError,{id: number;data: UserAvailabilityDTO}, TContext> => {
    
const mutationKey = ['partialUpdateUserAvailability'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateUserAvailability>>, {id: number;data: UserAvailabilityDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateUserAvailability(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateUserAvailabilityMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateUserAvailability>>>
    export type PartialUpdateUserAvailabilityMutationBody = UserAvailabilityDTO
    export type PartialUpdateUserAvailabilityMutationError = ErrorType<unknown>

    export const usePartialUpdateUserAvailability = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserAvailability>>, TError,{id: number;data: UserAvailabilityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateUserAvailability>>,
        TError,
        {id: number;data: UserAvailabilityDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateUserAvailabilityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllUserAvailabilities = (
    params?: GetAllUserAvailabilitiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserAvailabilityDTO[]>(
      {url: `/api/user-availabilities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllUserAvailabilitiesQueryKey = (params?: GetAllUserAvailabilitiesParams,) => {
    return [`/api/user-availabilities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllUserAvailabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError = ErrorType<unknown>>(params?: GetAllUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUserAvailabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUserAvailabilities>>> = ({ signal }) => getAllUserAvailabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllUserAvailabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUserAvailabilities>>>
export type GetAllUserAvailabilitiesQueryError = ErrorType<unknown>


export function useGetAllUserAvailabilities<TData = Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllUserAvailabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserAvailabilities>>,
          TError,
          Awaited<ReturnType<typeof getAllUserAvailabilities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUserAvailabilities<TData = Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError = ErrorType<unknown>>(
 params?: GetAllUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserAvailabilities>>,
          TError,
          Awaited<ReturnType<typeof getAllUserAvailabilities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUserAvailabilities<TData = Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError = ErrorType<unknown>>(
 params?: GetAllUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllUserAvailabilities<TData = Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError = ErrorType<unknown>>(
 params?: GetAllUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllUserAvailabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createUserAvailability = (
    userAvailabilityDTO: UserAvailabilityDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserAvailabilityDTO>(
      {url: `/api/user-availabilities`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userAvailabilityDTO, signal
    },
      options);
    }
  


export const getCreateUserAvailabilityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserAvailability>>, TError,{data: UserAvailabilityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createUserAvailability>>, TError,{data: UserAvailabilityDTO}, TContext> => {
    
const mutationKey = ['createUserAvailability'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserAvailability>>, {data: UserAvailabilityDTO}> = (props) => {
          const {data} = props ?? {};

          return  createUserAvailability(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserAvailabilityMutationResult = NonNullable<Awaited<ReturnType<typeof createUserAvailability>>>
    export type CreateUserAvailabilityMutationBody = UserAvailabilityDTO
    export type CreateUserAvailabilityMutationError = ErrorType<unknown>

    export const useCreateUserAvailability = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserAvailability>>, TError,{data: UserAvailabilityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createUserAvailability>>,
        TError,
        {data: UserAvailabilityDTO},
        TContext
      > => {

      const mutationOptions = getCreateUserAvailabilityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countUserAvailabilities = (
    params?: CountUserAvailabilitiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/user-availabilities/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountUserAvailabilitiesQueryKey = (params?: CountUserAvailabilitiesParams,) => {
    return [`/api/user-availabilities/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountUserAvailabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof countUserAvailabilities>>, TError = ErrorType<unknown>>(params?: CountUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountUserAvailabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countUserAvailabilities>>> = ({ signal }) => countUserAvailabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countUserAvailabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountUserAvailabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof countUserAvailabilities>>>
export type CountUserAvailabilitiesQueryError = ErrorType<unknown>


export function useCountUserAvailabilities<TData = Awaited<ReturnType<typeof countUserAvailabilities>>, TError = ErrorType<unknown>>(
 params: undefined |  CountUserAvailabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserAvailabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countUserAvailabilities>>,
          TError,
          Awaited<ReturnType<typeof countUserAvailabilities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountUserAvailabilities<TData = Awaited<ReturnType<typeof countUserAvailabilities>>, TError = ErrorType<unknown>>(
 params?: CountUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserAvailabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countUserAvailabilities>>,
          TError,
          Awaited<ReturnType<typeof countUserAvailabilities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountUserAvailabilities<TData = Awaited<ReturnType<typeof countUserAvailabilities>>, TError = ErrorType<unknown>>(
 params?: CountUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountUserAvailabilities<TData = Awaited<ReturnType<typeof countUserAvailabilities>>, TError = ErrorType<unknown>>(
 params?: CountUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountUserAvailabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchUserAvailabilities = (
    params: SearchUserAvailabilitiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserAvailabilityDTO[]>(
      {url: `/api/user-availabilities/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchUserAvailabilitiesQueryKey = (params: SearchUserAvailabilitiesParams,) => {
    return [`/api/user-availabilities/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchUserAvailabilitiesQueryOptions = <TData = Awaited<ReturnType<typeof searchUserAvailabilities>>, TError = ErrorType<unknown>>(params: SearchUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchUserAvailabilitiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchUserAvailabilities>>> = ({ signal }) => searchUserAvailabilities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchUserAvailabilities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchUserAvailabilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof searchUserAvailabilities>>>
export type SearchUserAvailabilitiesQueryError = ErrorType<unknown>


export function useSearchUserAvailabilities<TData = Awaited<ReturnType<typeof searchUserAvailabilities>>, TError = ErrorType<unknown>>(
 params: SearchUserAvailabilitiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserAvailabilities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUserAvailabilities>>,
          TError,
          Awaited<ReturnType<typeof searchUserAvailabilities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchUserAvailabilities<TData = Awaited<ReturnType<typeof searchUserAvailabilities>>, TError = ErrorType<unknown>>(
 params: SearchUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserAvailabilities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUserAvailabilities>>,
          TError,
          Awaited<ReturnType<typeof searchUserAvailabilities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchUserAvailabilities<TData = Awaited<ReturnType<typeof searchUserAvailabilities>>, TError = ErrorType<unknown>>(
 params: SearchUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchUserAvailabilities<TData = Awaited<ReturnType<typeof searchUserAvailabilities>>, TError = ErrorType<unknown>>(
 params: SearchUserAvailabilitiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserAvailabilities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchUserAvailabilitiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



