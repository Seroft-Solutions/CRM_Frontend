/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountUserProfilesParams,
  GetAllUserProfilesParams,
  SearchUserProfilesParams,
  UserProfileDTO
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getUserProfile = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserProfileDTO>(
      {url: `/api/user-profiles/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserProfileQueryKey = (id: number,) => {
    return [`/api/user-profiles/${id}`] as const;
    }

    
export const getGetUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUserProfile>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserProfileQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({ signal }) => getUserProfile(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileQueryError = unknown


export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getUserProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getUserProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserProfileQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateUserProfile = (
    id: number,
    userProfileDTO: UserProfileDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<UserProfileDTO>(
      {url: `/api/user-profiles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userProfileDTO
    },
      options);
    }
  


export const getUpdateUserProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserProfile>>, TError,{id: number;data: UserProfileDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserProfile>>, TError,{id: number;data: UserProfileDTO}, TContext> => {
    
const mutationKey = ['updateUserProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserProfile>>, {id: number;data: UserProfileDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUserProfile(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserProfileMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserProfile>>>
    export type UpdateUserProfileMutationBody = UserProfileDTO
    export type UpdateUserProfileMutationError = unknown

    export const useUpdateUserProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserProfile>>, TError,{id: number;data: UserProfileDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateUserProfile>>,
        TError,
        {id: number;data: UserProfileDTO},
        TContext
      > => {

      const mutationOptions = getUpdateUserProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteUserProfile = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/user-profiles/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUserProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserProfile>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserProfile>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteUserProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserProfile>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteUserProfile(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserProfileMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserProfile>>>
    
    export type DeleteUserProfileMutationError = unknown

    export const useDeleteUserProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserProfile>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserProfile>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteUserProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateUserProfile = (
    id: number,
    userProfileDTO: UserProfileDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<UserProfileDTO>(
      {url: `/api/user-profiles/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userProfileDTO
    },
      options);
    }
  


export const getPartialUpdateUserProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserProfile>>, TError,{id: number;data: UserProfileDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserProfile>>, TError,{id: number;data: UserProfileDTO}, TContext> => {
    
const mutationKey = ['partialUpdateUserProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateUserProfile>>, {id: number;data: UserProfileDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateUserProfile(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateUserProfileMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateUserProfile>>>
    export type PartialUpdateUserProfileMutationBody = UserProfileDTO
    export type PartialUpdateUserProfileMutationError = unknown

    export const usePartialUpdateUserProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserProfile>>, TError,{id: number;data: UserProfileDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateUserProfile>>,
        TError,
        {id: number;data: UserProfileDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateUserProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllUserProfiles = (
    params?: GetAllUserProfilesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserProfileDTO[]>(
      {url: `/api/user-profiles`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllUserProfilesQueryKey = (params?: GetAllUserProfilesParams,) => {
    return [`/api/user-profiles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllUserProfilesQueryOptions = <TData = Awaited<ReturnType<typeof getAllUserProfiles>>, TError = unknown>(params?: GetAllUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUserProfilesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUserProfiles>>> = ({ signal }) => getAllUserProfiles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllUserProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllUserProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUserProfiles>>>
export type GetAllUserProfilesQueryError = unknown


export function useGetAllUserProfiles<TData = Awaited<ReturnType<typeof getAllUserProfiles>>, TError = unknown>(
 params: undefined |  GetAllUserProfilesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserProfiles>>,
          TError,
          Awaited<ReturnType<typeof getAllUserProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUserProfiles<TData = Awaited<ReturnType<typeof getAllUserProfiles>>, TError = unknown>(
 params?: GetAllUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserProfiles>>,
          TError,
          Awaited<ReturnType<typeof getAllUserProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUserProfiles<TData = Awaited<ReturnType<typeof getAllUserProfiles>>, TError = unknown>(
 params?: GetAllUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllUserProfiles<TData = Awaited<ReturnType<typeof getAllUserProfiles>>, TError = unknown>(
 params?: GetAllUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllUserProfilesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createUserProfile = (
    userProfileDTO: UserProfileDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserProfileDTO>(
      {url: `/api/user-profiles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userProfileDTO, signal
    },
      options);
    }
  


export const getCreateUserProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserProfile>>, TError,{data: UserProfileDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createUserProfile>>, TError,{data: UserProfileDTO}, TContext> => {
    
const mutationKey = ['createUserProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserProfile>>, {data: UserProfileDTO}> = (props) => {
          const {data} = props ?? {};

          return  createUserProfile(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserProfileMutationResult = NonNullable<Awaited<ReturnType<typeof createUserProfile>>>
    export type CreateUserProfileMutationBody = UserProfileDTO
    export type CreateUserProfileMutationError = unknown

    export const useCreateUserProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserProfile>>, TError,{data: UserProfileDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createUserProfile>>,
        TError,
        {data: UserProfileDTO},
        TContext
      > => {

      const mutationOptions = getCreateUserProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countUserProfiles = (
    params?: CountUserProfilesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/user-profiles/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountUserProfilesQueryKey = (params?: CountUserProfilesParams,) => {
    return [`/api/user-profiles/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountUserProfilesQueryOptions = <TData = Awaited<ReturnType<typeof countUserProfiles>>, TError = unknown>(params?: CountUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountUserProfilesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countUserProfiles>>> = ({ signal }) => countUserProfiles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countUserProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountUserProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof countUserProfiles>>>
export type CountUserProfilesQueryError = unknown


export function useCountUserProfiles<TData = Awaited<ReturnType<typeof countUserProfiles>>, TError = unknown>(
 params: undefined |  CountUserProfilesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countUserProfiles>>,
          TError,
          Awaited<ReturnType<typeof countUserProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountUserProfiles<TData = Awaited<ReturnType<typeof countUserProfiles>>, TError = unknown>(
 params?: CountUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countUserProfiles>>,
          TError,
          Awaited<ReturnType<typeof countUserProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountUserProfiles<TData = Awaited<ReturnType<typeof countUserProfiles>>, TError = unknown>(
 params?: CountUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountUserProfiles<TData = Awaited<ReturnType<typeof countUserProfiles>>, TError = unknown>(
 params?: CountUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountUserProfilesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchUserProfiles = (
    params: SearchUserProfilesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserProfileDTO[]>(
      {url: `/api/user-profiles/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchUserProfilesQueryKey = (params: SearchUserProfilesParams,) => {
    return [`/api/user-profiles/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchUserProfilesQueryOptions = <TData = Awaited<ReturnType<typeof searchUserProfiles>>, TError = unknown>(params: SearchUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchUserProfilesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchUserProfiles>>> = ({ signal }) => searchUserProfiles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchUserProfiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchUserProfilesQueryResult = NonNullable<Awaited<ReturnType<typeof searchUserProfiles>>>
export type SearchUserProfilesQueryError = unknown


export function useSearchUserProfiles<TData = Awaited<ReturnType<typeof searchUserProfiles>>, TError = unknown>(
 params: SearchUserProfilesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserProfiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUserProfiles>>,
          TError,
          Awaited<ReturnType<typeof searchUserProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchUserProfiles<TData = Awaited<ReturnType<typeof searchUserProfiles>>, TError = unknown>(
 params: SearchUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserProfiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUserProfiles>>,
          TError,
          Awaited<ReturnType<typeof searchUserProfiles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchUserProfiles<TData = Awaited<ReturnType<typeof searchUserProfiles>>, TError = unknown>(
 params: SearchUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchUserProfiles<TData = Awaited<ReturnType<typeof searchUserProfiles>>, TError = unknown>(
 params: SearchUserProfilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserProfiles>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchUserProfilesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



