/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ClearSetupProgress200,
  GetSetupHealth200,
  GetSetupStatus200,
  TenantInfoDTO,
  TenantSetupProgressDTO,
  TenantSetupRequestDTO
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const initiateSetup = (
    tenantSetupRequestDTO: TenantSetupRequestDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<TenantSetupProgressDTO>(
      {url: `/api/tenant-setup/initiate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tenantSetupRequestDTO, signal
    },
      options);
    }
  


export const getInitiateSetupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiateSetup>>, TError,{data: TenantSetupRequestDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof initiateSetup>>, TError,{data: TenantSetupRequestDTO}, TContext> => {
    
const mutationKey = ['initiateSetup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initiateSetup>>, {data: TenantSetupRequestDTO}> = (props) => {
          const {data} = props ?? {};

          return  initiateSetup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InitiateSetupMutationResult = NonNullable<Awaited<ReturnType<typeof initiateSetup>>>
    export type InitiateSetupMutationBody = TenantSetupRequestDTO
    export type InitiateSetupMutationError = unknown

    export const useInitiateSetup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiateSetup>>, TError,{data: TenantSetupRequestDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof initiateSetup>>,
        TError,
        {data: TenantSetupRequestDTO},
        TContext
      > => {

      const mutationOptions = getInitiateSetupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getSetupStatus = (
    
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GetSetupStatus200>(
      {url: `/api/tenant-setup/status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSetupStatusQueryKey = () => {
    return [`/api/tenant-setup/status`] as const;
    }

    
export const getGetSetupStatusInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSetupStatus>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSetupStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSetupStatus>>> = ({ signal }) => getSetupStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSetupStatusInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSetupStatus>>>
export type GetSetupStatusInfiniteQueryError = unknown


export function useGetSetupStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupStatus>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupStatus>>,
          TError,
          Awaited<ReturnType<typeof getSetupStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupStatus>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupStatus>>,
          TError,
          Awaited<ReturnType<typeof getSetupStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupStatus>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSetupStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupStatus>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSetupStatusInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSetupStatusQueryOptions = <TData = Awaited<ReturnType<typeof getSetupStatus>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSetupStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSetupStatus>>> = ({ signal }) => getSetupStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSetupStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getSetupStatus>>>
export type GetSetupStatusQueryError = unknown


export function useGetSetupStatus<TData = Awaited<ReturnType<typeof getSetupStatus>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupStatus>>,
          TError,
          Awaited<ReturnType<typeof getSetupStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupStatus<TData = Awaited<ReturnType<typeof getSetupStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupStatus>>,
          TError,
          Awaited<ReturnType<typeof getSetupStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupStatus<TData = Awaited<ReturnType<typeof getSetupStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSetupStatus<TData = Awaited<ReturnType<typeof getSetupStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSetupStatusQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSetupProgress = (
    
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<TenantSetupProgressDTO>(
      {url: `/api/tenant-setup/progress`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSetupProgressQueryKey = () => {
    return [`/api/tenant-setup/progress`] as const;
    }

    
export const getGetSetupProgressInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSetupProgress>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSetupProgressQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSetupProgress>>> = ({ signal }) => getSetupProgress(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSetupProgressInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSetupProgress>>>
export type GetSetupProgressInfiniteQueryError = unknown


export function useGetSetupProgressInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupProgress>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupProgress>>,
          TError,
          Awaited<ReturnType<typeof getSetupProgress>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupProgressInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupProgress>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupProgress>>,
          TError,
          Awaited<ReturnType<typeof getSetupProgress>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupProgressInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupProgress>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSetupProgressInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupProgress>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSetupProgressInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSetupProgressQueryOptions = <TData = Awaited<ReturnType<typeof getSetupProgress>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSetupProgressQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSetupProgress>>> = ({ signal }) => getSetupProgress(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSetupProgressQueryResult = NonNullable<Awaited<ReturnType<typeof getSetupProgress>>>
export type GetSetupProgressQueryError = unknown


export function useGetSetupProgress<TData = Awaited<ReturnType<typeof getSetupProgress>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupProgress>>,
          TError,
          Awaited<ReturnType<typeof getSetupProgress>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupProgress<TData = Awaited<ReturnType<typeof getSetupProgress>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupProgress>>,
          TError,
          Awaited<ReturnType<typeof getSetupProgress>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupProgress<TData = Awaited<ReturnType<typeof getSetupProgress>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSetupProgress<TData = Awaited<ReturnType<typeof getSetupProgress>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSetupProgressQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const clearSetupProgress = (
    
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<ClearSetupProgress200>(
      {url: `/api/tenant-setup/progress`, method: 'DELETE'
    },
      options);
    }
  


export const getClearSetupProgressMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearSetupProgress>>, TError,void, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof clearSetupProgress>>, TError,void, TContext> => {
    
const mutationKey = ['clearSetupProgress'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof clearSetupProgress>>, void> = () => {
          

          return  clearSetupProgress(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ClearSetupProgressMutationResult = NonNullable<Awaited<ReturnType<typeof clearSetupProgress>>>
    
    export type ClearSetupProgressMutationError = unknown

    export const useClearSetupProgress = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearSetupProgress>>, TError,void, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof clearSetupProgress>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getClearSetupProgressMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getTenantInfo = (
    
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<TenantInfoDTO>(
      {url: `/api/tenant-setup/info`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTenantInfoQueryKey = () => {
    return [`/api/tenant-setup/info`] as const;
    }

    
export const getGetTenantInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getTenantInfo>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTenantInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenantInfo>>> = ({ signal }) => getTenantInfo(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTenantInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTenantInfo>>>
export type GetTenantInfoInfiniteQueryError = unknown


export function useGetTenantInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTenantInfo>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantInfo>>,
          TError,
          Awaited<ReturnType<typeof getTenantInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTenantInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTenantInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantInfo>>,
          TError,
          Awaited<ReturnType<typeof getTenantInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTenantInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTenantInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTenantInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTenantInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTenantInfoInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTenantInfoQueryOptions = <TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTenantInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenantInfo>>> = ({ signal }) => getTenantInfo(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTenantInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getTenantInfo>>>
export type GetTenantInfoQueryError = unknown


export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantInfo>>,
          TError,
          Awaited<ReturnType<typeof getTenantInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantInfo>>,
          TError,
          Awaited<ReturnType<typeof getTenantInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTenantInfoQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSetupHealth = (
    
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GetSetupHealth200>(
      {url: `/api/tenant-setup/health`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSetupHealthQueryKey = () => {
    return [`/api/tenant-setup/health`] as const;
    }

    
export const getGetSetupHealthInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSetupHealth>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSetupHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSetupHealth>>> = ({ signal }) => getSetupHealth(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSetupHealthInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSetupHealth>>>
export type GetSetupHealthInfiniteQueryError = unknown


export function useGetSetupHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupHealth>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupHealth>>,
          TError,
          Awaited<ReturnType<typeof getSetupHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupHealth>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupHealth>>,
          TError,
          Awaited<ReturnType<typeof getSetupHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupHealth>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSetupHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSetupHealth>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSetupHealthInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSetupHealthQueryOptions = <TData = Awaited<ReturnType<typeof getSetupHealth>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSetupHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSetupHealth>>> = ({ signal }) => getSetupHealth(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSetupHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getSetupHealth>>>
export type GetSetupHealthQueryError = unknown


export function useGetSetupHealth<TData = Awaited<ReturnType<typeof getSetupHealth>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupHealth>>,
          TError,
          Awaited<ReturnType<typeof getSetupHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupHealth<TData = Awaited<ReturnType<typeof getSetupHealth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSetupHealth>>,
          TError,
          Awaited<ReturnType<typeof getSetupHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSetupHealth<TData = Awaited<ReturnType<typeof getSetupHealth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSetupHealth<TData = Awaited<ReturnType<typeof getSetupHealth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSetupHealth>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSetupHealthQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



