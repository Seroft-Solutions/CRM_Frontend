/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AvailableTimeSlotDTO,
  CountAvailableTimeSlotsParams,
  GetAllAvailableTimeSlotsParams,
  SearchAvailableTimeSlotsParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getAvailableTimeSlot = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AvailableTimeSlotDTO>(
      {url: `/api/available-time-slots/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAvailableTimeSlotQueryKey = (id: number,) => {
    return [`/api/available-time-slots/${id}`] as const;
    }

    
export const getGetAvailableTimeSlotQueryOptions = <TData = Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableTimeSlotQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableTimeSlot>>> = ({ signal }) => getAvailableTimeSlot(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableTimeSlotQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableTimeSlot>>>
export type GetAvailableTimeSlotQueryError = ErrorType<unknown>


export function useGetAvailableTimeSlot<TData = Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableTimeSlot>>,
          TError,
          Awaited<ReturnType<typeof getAvailableTimeSlot>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableTimeSlot<TData = Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableTimeSlot>>,
          TError,
          Awaited<ReturnType<typeof getAvailableTimeSlot>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableTimeSlot<TData = Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAvailableTimeSlot<TData = Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableTimeSlot>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableTimeSlotQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateAvailableTimeSlot = (
    id: number,
    availableTimeSlotDTO: AvailableTimeSlotDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<AvailableTimeSlotDTO>(
      {url: `/api/available-time-slots/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: availableTimeSlotDTO
    },
      options);
    }
  


export const getUpdateAvailableTimeSlotMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAvailableTimeSlot>>, TError,{id: number;data: AvailableTimeSlotDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAvailableTimeSlot>>, TError,{id: number;data: AvailableTimeSlotDTO}, TContext> => {
    
const mutationKey = ['updateAvailableTimeSlot'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAvailableTimeSlot>>, {id: number;data: AvailableTimeSlotDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateAvailableTimeSlot(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAvailableTimeSlotMutationResult = NonNullable<Awaited<ReturnType<typeof updateAvailableTimeSlot>>>
    export type UpdateAvailableTimeSlotMutationBody = AvailableTimeSlotDTO
    export type UpdateAvailableTimeSlotMutationError = ErrorType<unknown>

    export const useUpdateAvailableTimeSlot = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAvailableTimeSlot>>, TError,{id: number;data: AvailableTimeSlotDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAvailableTimeSlot>>,
        TError,
        {id: number;data: AvailableTimeSlotDTO},
        TContext
      > => {

      const mutationOptions = getUpdateAvailableTimeSlotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteAvailableTimeSlot = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/available-time-slots/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAvailableTimeSlotMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAvailableTimeSlot>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAvailableTimeSlot>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteAvailableTimeSlot'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAvailableTimeSlot>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteAvailableTimeSlot(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAvailableTimeSlotMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAvailableTimeSlot>>>
    
    export type DeleteAvailableTimeSlotMutationError = ErrorType<unknown>

    export const useDeleteAvailableTimeSlot = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAvailableTimeSlot>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAvailableTimeSlot>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteAvailableTimeSlotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateAvailableTimeSlot = (
    id: number,
    availableTimeSlotDTO: AvailableTimeSlotDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<AvailableTimeSlotDTO>(
      {url: `/api/available-time-slots/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: availableTimeSlotDTO
    },
      options);
    }
  


export const getPartialUpdateAvailableTimeSlotMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateAvailableTimeSlot>>, TError,{id: number;data: AvailableTimeSlotDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateAvailableTimeSlot>>, TError,{id: number;data: AvailableTimeSlotDTO}, TContext> => {
    
const mutationKey = ['partialUpdateAvailableTimeSlot'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateAvailableTimeSlot>>, {id: number;data: AvailableTimeSlotDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateAvailableTimeSlot(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateAvailableTimeSlotMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateAvailableTimeSlot>>>
    export type PartialUpdateAvailableTimeSlotMutationBody = AvailableTimeSlotDTO
    export type PartialUpdateAvailableTimeSlotMutationError = ErrorType<unknown>

    export const usePartialUpdateAvailableTimeSlot = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateAvailableTimeSlot>>, TError,{id: number;data: AvailableTimeSlotDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateAvailableTimeSlot>>,
        TError,
        {id: number;data: AvailableTimeSlotDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateAvailableTimeSlotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllAvailableTimeSlots = (
    params?: GetAllAvailableTimeSlotsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AvailableTimeSlotDTO[]>(
      {url: `/api/available-time-slots`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllAvailableTimeSlotsQueryKey = (params?: GetAllAvailableTimeSlotsParams,) => {
    return [`/api/available-time-slots`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllAvailableTimeSlotsQueryOptions = <TData = Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError = ErrorType<unknown>>(params?: GetAllAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAvailableTimeSlotsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>> = ({ signal }) => getAllAvailableTimeSlots(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAvailableTimeSlotsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>>
export type GetAllAvailableTimeSlotsQueryError = ErrorType<unknown>


export function useGetAllAvailableTimeSlots<TData = Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllAvailableTimeSlotsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAvailableTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof getAllAvailableTimeSlots>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAvailableTimeSlots<TData = Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params?: GetAllAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAvailableTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof getAllAvailableTimeSlots>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAvailableTimeSlots<TData = Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params?: GetAllAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllAvailableTimeSlots<TData = Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params?: GetAllAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAvailableTimeSlotsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createAvailableTimeSlot = (
    availableTimeSlotDTO: AvailableTimeSlotDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AvailableTimeSlotDTO>(
      {url: `/api/available-time-slots`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: availableTimeSlotDTO, signal
    },
      options);
    }
  


export const getCreateAvailableTimeSlotMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAvailableTimeSlot>>, TError,{data: AvailableTimeSlotDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createAvailableTimeSlot>>, TError,{data: AvailableTimeSlotDTO}, TContext> => {
    
const mutationKey = ['createAvailableTimeSlot'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAvailableTimeSlot>>, {data: AvailableTimeSlotDTO}> = (props) => {
          const {data} = props ?? {};

          return  createAvailableTimeSlot(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAvailableTimeSlotMutationResult = NonNullable<Awaited<ReturnType<typeof createAvailableTimeSlot>>>
    export type CreateAvailableTimeSlotMutationBody = AvailableTimeSlotDTO
    export type CreateAvailableTimeSlotMutationError = ErrorType<unknown>

    export const useCreateAvailableTimeSlot = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAvailableTimeSlot>>, TError,{data: AvailableTimeSlotDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAvailableTimeSlot>>,
        TError,
        {data: AvailableTimeSlotDTO},
        TContext
      > => {

      const mutationOptions = getCreateAvailableTimeSlotMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countAvailableTimeSlots = (
    params?: CountAvailableTimeSlotsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/available-time-slots/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountAvailableTimeSlotsQueryKey = (params?: CountAvailableTimeSlotsParams,) => {
    return [`/api/available-time-slots/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountAvailableTimeSlotsQueryOptions = <TData = Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError = ErrorType<unknown>>(params?: CountAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountAvailableTimeSlotsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countAvailableTimeSlots>>> = ({ signal }) => countAvailableTimeSlots(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountAvailableTimeSlotsQueryResult = NonNullable<Awaited<ReturnType<typeof countAvailableTimeSlots>>>
export type CountAvailableTimeSlotsQueryError = ErrorType<unknown>


export function useCountAvailableTimeSlots<TData = Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params: undefined |  CountAvailableTimeSlotsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countAvailableTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof countAvailableTimeSlots>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountAvailableTimeSlots<TData = Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params?: CountAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countAvailableTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof countAvailableTimeSlots>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountAvailableTimeSlots<TData = Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params?: CountAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountAvailableTimeSlots<TData = Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params?: CountAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountAvailableTimeSlotsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchAvailableTimeSlots = (
    params: SearchAvailableTimeSlotsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AvailableTimeSlotDTO[]>(
      {url: `/api/available-time-slots/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchAvailableTimeSlotsQueryKey = (params: SearchAvailableTimeSlotsParams,) => {
    return [`/api/available-time-slots/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchAvailableTimeSlotsQueryOptions = <TData = Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError = ErrorType<unknown>>(params: SearchAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchAvailableTimeSlotsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchAvailableTimeSlots>>> = ({ signal }) => searchAvailableTimeSlots(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchAvailableTimeSlotsQueryResult = NonNullable<Awaited<ReturnType<typeof searchAvailableTimeSlots>>>
export type SearchAvailableTimeSlotsQueryError = ErrorType<unknown>


export function useSearchAvailableTimeSlots<TData = Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params: SearchAvailableTimeSlotsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAvailableTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof searchAvailableTimeSlots>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchAvailableTimeSlots<TData = Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params: SearchAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAvailableTimeSlots>>,
          TError,
          Awaited<ReturnType<typeof searchAvailableTimeSlots>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchAvailableTimeSlots<TData = Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params: SearchAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchAvailableTimeSlots<TData = Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError = ErrorType<unknown>>(
 params: SearchAvailableTimeSlotsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAvailableTimeSlots>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchAvailableTimeSlotsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



