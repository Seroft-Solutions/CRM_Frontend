/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetImportTemplate8200,
  ImportCallTypesFromExcel200,
  ImportCallTypesFromExcelBody
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const importCallTypesFromExcel = (
    importCallTypesFromExcelBody: ImportCallTypesFromExcelBody,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('file', importCallTypesFromExcelBody.file)

      return springServiceMutator<ImportCallTypesFromExcel200>(
      {url: `/api/call-types-bulk-import`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getImportCallTypesFromExcelMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importCallTypesFromExcel>>, TError,{data: ImportCallTypesFromExcelBody}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof importCallTypesFromExcel>>, TError,{data: ImportCallTypesFromExcelBody}, TContext> => {
    
const mutationKey = ['importCallTypesFromExcel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof importCallTypesFromExcel>>, {data: ImportCallTypesFromExcelBody}> = (props) => {
          const {data} = props ?? {};

          return  importCallTypesFromExcel(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ImportCallTypesFromExcelMutationResult = NonNullable<Awaited<ReturnType<typeof importCallTypesFromExcel>>>
    export type ImportCallTypesFromExcelMutationBody = ImportCallTypesFromExcelBody
    export type ImportCallTypesFromExcelMutationError = ErrorType<unknown>

    export const useImportCallTypesFromExcel = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof importCallTypesFromExcel>>, TError,{data: ImportCallTypesFromExcelBody}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof importCallTypesFromExcel>>,
        TError,
        {data: ImportCallTypesFromExcelBody},
        TContext
      > => {

      const mutationOptions = getImportCallTypesFromExcelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getImportTemplate8 = (
    
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GetImportTemplate8200>(
      {url: `/api/call-types-bulk-import/import-template`, method: 'GET', signal
    },
      options);
    }
  

export const getGetImportTemplate8QueryKey = () => {
    return [`/api/call-types-bulk-import/import-template`] as const;
    }

    
export const getGetImportTemplate8QueryOptions = <TData = Awaited<ReturnType<typeof getImportTemplate8>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImportTemplate8>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetImportTemplate8QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getImportTemplate8>>> = ({ signal }) => getImportTemplate8(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getImportTemplate8>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetImportTemplate8QueryResult = NonNullable<Awaited<ReturnType<typeof getImportTemplate8>>>
export type GetImportTemplate8QueryError = ErrorType<unknown>


export function useGetImportTemplate8<TData = Awaited<ReturnType<typeof getImportTemplate8>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImportTemplate8>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImportTemplate8>>,
          TError,
          Awaited<ReturnType<typeof getImportTemplate8>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImportTemplate8<TData = Awaited<ReturnType<typeof getImportTemplate8>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImportTemplate8>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImportTemplate8>>,
          TError,
          Awaited<ReturnType<typeof getImportTemplate8>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImportTemplate8<TData = Awaited<ReturnType<typeof getImportTemplate8>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImportTemplate8>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetImportTemplate8<TData = Awaited<ReturnType<typeof getImportTemplate8>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImportTemplate8>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetImportTemplate8QueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



