/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountStatesParams,
  GetAllStatesParams,
  SearchStatesParams,
  StateDTO
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getState = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<StateDTO>(
      {url: `/api/states/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetStateQueryKey = (id: number,) => {
    return [`/api/states/${id}`] as const;
    }

    
export const getGetStateQueryOptions = <TData = Awaited<ReturnType<typeof getState>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStateQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getState>>> = ({ signal }) => getState(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStateQueryResult = NonNullable<Awaited<ReturnType<typeof getState>>>
export type GetStateQueryError = ErrorType<unknown>


export function useGetState<TData = Awaited<ReturnType<typeof getState>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getState>>,
          TError,
          Awaited<ReturnType<typeof getState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetState<TData = Awaited<ReturnType<typeof getState>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getState>>,
          TError,
          Awaited<ReturnType<typeof getState>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetState<TData = Awaited<ReturnType<typeof getState>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetState<TData = Awaited<ReturnType<typeof getState>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStateQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateState = (
    id: number,
    stateDTO: StateDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<StateDTO>(
      {url: `/api/states/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: stateDTO
    },
      options);
    }
  


export const getUpdateStateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateState>>, TError,{id: number;data: StateDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateState>>, TError,{id: number;data: StateDTO}, TContext> => {
    
const mutationKey = ['updateState'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateState>>, {id: number;data: StateDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateState(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateStateMutationResult = NonNullable<Awaited<ReturnType<typeof updateState>>>
    export type UpdateStateMutationBody = StateDTO
    export type UpdateStateMutationError = ErrorType<unknown>

    export const useUpdateState = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateState>>, TError,{id: number;data: StateDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateState>>,
        TError,
        {id: number;data: StateDTO},
        TContext
      > => {

      const mutationOptions = getUpdateStateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteState = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/states/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteStateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteState>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteState>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteState'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteState>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteState(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStateMutationResult = NonNullable<Awaited<ReturnType<typeof deleteState>>>
    
    export type DeleteStateMutationError = ErrorType<unknown>

    export const useDeleteState = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteState>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteState>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteStateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateState = (
    id: number,
    stateDTO: StateDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<StateDTO>(
      {url: `/api/states/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: stateDTO
    },
      options);
    }
  


export const getPartialUpdateStateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateState>>, TError,{id: number;data: StateDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateState>>, TError,{id: number;data: StateDTO}, TContext> => {
    
const mutationKey = ['partialUpdateState'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateState>>, {id: number;data: StateDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateState(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateStateMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateState>>>
    export type PartialUpdateStateMutationBody = StateDTO
    export type PartialUpdateStateMutationError = ErrorType<unknown>

    export const usePartialUpdateState = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateState>>, TError,{id: number;data: StateDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateState>>,
        TError,
        {id: number;data: StateDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateStateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllStates = (
    params?: GetAllStatesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<StateDTO[]>(
      {url: `/api/states`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllStatesQueryKey = (params?: GetAllStatesParams,) => {
    return [`/api/states`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllStatesQueryOptions = <TData = Awaited<ReturnType<typeof getAllStates>>, TError = ErrorType<unknown>>(params?: GetAllStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllStatesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllStates>>> = ({ signal }) => getAllStates(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllStatesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllStates>>>
export type GetAllStatesQueryError = ErrorType<unknown>


export function useGetAllStates<TData = Awaited<ReturnType<typeof getAllStates>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllStatesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllStates>>,
          TError,
          Awaited<ReturnType<typeof getAllStates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllStates<TData = Awaited<ReturnType<typeof getAllStates>>, TError = ErrorType<unknown>>(
 params?: GetAllStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllStates>>,
          TError,
          Awaited<ReturnType<typeof getAllStates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllStates<TData = Awaited<ReturnType<typeof getAllStates>>, TError = ErrorType<unknown>>(
 params?: GetAllStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllStates<TData = Awaited<ReturnType<typeof getAllStates>>, TError = ErrorType<unknown>>(
 params?: GetAllStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllStatesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createState = (
    stateDTO: StateDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<StateDTO>(
      {url: `/api/states`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: stateDTO, signal
    },
      options);
    }
  


export const getCreateStateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createState>>, TError,{data: StateDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createState>>, TError,{data: StateDTO}, TContext> => {
    
const mutationKey = ['createState'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createState>>, {data: StateDTO}> = (props) => {
          const {data} = props ?? {};

          return  createState(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateStateMutationResult = NonNullable<Awaited<ReturnType<typeof createState>>>
    export type CreateStateMutationBody = StateDTO
    export type CreateStateMutationError = ErrorType<unknown>

    export const useCreateState = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createState>>, TError,{data: StateDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createState>>,
        TError,
        {data: StateDTO},
        TContext
      > => {

      const mutationOptions = getCreateStateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countStates = (
    params?: CountStatesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/states/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountStatesQueryKey = (params?: CountStatesParams,) => {
    return [`/api/states/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountStatesQueryOptions = <TData = Awaited<ReturnType<typeof countStates>>, TError = ErrorType<unknown>>(params?: CountStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountStatesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countStates>>> = ({ signal }) => countStates(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountStatesQueryResult = NonNullable<Awaited<ReturnType<typeof countStates>>>
export type CountStatesQueryError = ErrorType<unknown>


export function useCountStates<TData = Awaited<ReturnType<typeof countStates>>, TError = ErrorType<unknown>>(
 params: undefined |  CountStatesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countStates>>,
          TError,
          Awaited<ReturnType<typeof countStates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountStates<TData = Awaited<ReturnType<typeof countStates>>, TError = ErrorType<unknown>>(
 params?: CountStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countStates>>,
          TError,
          Awaited<ReturnType<typeof countStates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountStates<TData = Awaited<ReturnType<typeof countStates>>, TError = ErrorType<unknown>>(
 params?: CountStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountStates<TData = Awaited<ReturnType<typeof countStates>>, TError = ErrorType<unknown>>(
 params?: CountStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountStatesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchStates = (
    params: SearchStatesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<StateDTO[]>(
      {url: `/api/states/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchStatesQueryKey = (params: SearchStatesParams,) => {
    return [`/api/states/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchStatesQueryOptions = <TData = Awaited<ReturnType<typeof searchStates>>, TError = ErrorType<unknown>>(params: SearchStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchStatesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchStates>>> = ({ signal }) => searchStates(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchStatesQueryResult = NonNullable<Awaited<ReturnType<typeof searchStates>>>
export type SearchStatesQueryError = ErrorType<unknown>


export function useSearchStates<TData = Awaited<ReturnType<typeof searchStates>>, TError = ErrorType<unknown>>(
 params: SearchStatesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchStates>>,
          TError,
          Awaited<ReturnType<typeof searchStates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchStates<TData = Awaited<ReturnType<typeof searchStates>>, TError = ErrorType<unknown>>(
 params: SearchStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchStates>>,
          TError,
          Awaited<ReturnType<typeof searchStates>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchStates<TData = Awaited<ReturnType<typeof searchStates>>, TError = ErrorType<unknown>>(
 params: SearchStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchStates<TData = Awaited<ReturnType<typeof searchStates>>, TError = ErrorType<unknown>>(
 params: SearchStatesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchStates>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchStatesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



