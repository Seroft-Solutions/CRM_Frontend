/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetTenantInfo200,
  OrganizationDTO,
  TriggerOrganizationSchemaSetupParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const setupSchema = (
    schemaName: string,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<string>(
      {url: `/api/tenants/schemas/${schemaName}/setup`, method: 'POST', signal
    },
      options);
    }
  


export const getSetupSchemaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setupSchema>>, TError,{schemaName: string}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof setupSchema>>, TError,{schemaName: string}, TContext> => {
    
const mutationKey = ['setupSchema'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof setupSchema>>, {schemaName: string}> = (props) => {
          const {schemaName} = props ?? {};

          return  setupSchema(schemaName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SetupSchemaMutationResult = NonNullable<Awaited<ReturnType<typeof setupSchema>>>
    
    export type SetupSchemaMutationError = unknown

    export const useSetupSchema = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof setupSchema>>, TError,{schemaName: string}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof setupSchema>>,
        TError,
        {schemaName: string},
        TContext
      > => {

      const mutationOptions = getSetupSchemaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const triggerOrganizationSchemaSetup = (
    organizationName: string,
    params: TriggerOrganizationSchemaSetupParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<string>(
      {url: `/api/tenants/organizations/${organizationName}/setup`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getTriggerOrganizationSchemaSetupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof triggerOrganizationSchemaSetup>>, TError,{organizationName: string;params: TriggerOrganizationSchemaSetupParams}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof triggerOrganizationSchemaSetup>>, TError,{organizationName: string;params: TriggerOrganizationSchemaSetupParams}, TContext> => {
    
const mutationKey = ['triggerOrganizationSchemaSetup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof triggerOrganizationSchemaSetup>>, {organizationName: string;params: TriggerOrganizationSchemaSetupParams}> = (props) => {
          const {organizationName,params} = props ?? {};

          return  triggerOrganizationSchemaSetup(organizationName,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TriggerOrganizationSchemaSetupMutationResult = NonNullable<Awaited<ReturnType<typeof triggerOrganizationSchemaSetup>>>
    
    export type TriggerOrganizationSchemaSetupMutationError = unknown

    export const useTriggerOrganizationSchemaSetup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof triggerOrganizationSchemaSetup>>, TError,{organizationName: string;params: TriggerOrganizationSchemaSetupParams}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof triggerOrganizationSchemaSetup>>,
        TError,
        {organizationName: string;params: TriggerOrganizationSchemaSetupParams},
        TContext
      > => {

      const mutationOptions = getTriggerOrganizationSchemaSetupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const createOrganizationWithSchema = (
    organizationDTO: OrganizationDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<OrganizationDTO>(
      {url: `/api/tenants/organizations/setup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationDTO, signal
    },
      options);
    }
  


export const getCreateOrganizationWithSchemaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganizationWithSchema>>, TError,{data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrganizationWithSchema>>, TError,{data: OrganizationDTO}, TContext> => {
    
const mutationKey = ['createOrganizationWithSchema'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrganizationWithSchema>>, {data: OrganizationDTO}> = (props) => {
          const {data} = props ?? {};

          return  createOrganizationWithSchema(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrganizationWithSchemaMutationResult = NonNullable<Awaited<ReturnType<typeof createOrganizationWithSchema>>>
    export type CreateOrganizationWithSchemaMutationBody = OrganizationDTO
    export type CreateOrganizationWithSchemaMutationError = unknown

    export const useCreateOrganizationWithSchema = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganizationWithSchema>>, TError,{data: OrganizationDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrganizationWithSchema>>,
        TError,
        {data: OrganizationDTO},
        TContext
      > => {

      const mutationOptions = getCreateOrganizationWithSchemaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const checkSchemaExists = (
    schemaName: string,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<boolean>(
      {url: `/api/tenants/schemas/${schemaName}/exists`, method: 'GET', signal
    },
      options);
    }
  

export const getCheckSchemaExistsQueryKey = (schemaName: string,) => {
    return [`/api/tenants/schemas/${schemaName}/exists`] as const;
    }

    
export const getCheckSchemaExistsQueryOptions = <TData = Awaited<ReturnType<typeof checkSchemaExists>>, TError = unknown>(schemaName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkSchemaExists>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckSchemaExistsQueryKey(schemaName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkSchemaExists>>> = ({ signal }) => checkSchemaExists(schemaName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(schemaName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkSchemaExists>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CheckSchemaExistsQueryResult = NonNullable<Awaited<ReturnType<typeof checkSchemaExists>>>
export type CheckSchemaExistsQueryError = unknown


export function useCheckSchemaExists<TData = Awaited<ReturnType<typeof checkSchemaExists>>, TError = unknown>(
 schemaName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkSchemaExists>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkSchemaExists>>,
          TError,
          Awaited<ReturnType<typeof checkSchemaExists>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckSchemaExists<TData = Awaited<ReturnType<typeof checkSchemaExists>>, TError = unknown>(
 schemaName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkSchemaExists>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkSchemaExists>>,
          TError,
          Awaited<ReturnType<typeof checkSchemaExists>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCheckSchemaExists<TData = Awaited<ReturnType<typeof checkSchemaExists>>, TError = unknown>(
 schemaName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkSchemaExists>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCheckSchemaExists<TData = Awaited<ReturnType<typeof checkSchemaExists>>, TError = unknown>(
 schemaName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkSchemaExists>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCheckSchemaExistsQueryOptions(schemaName,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOrganizationSetupProgress = (
    organizationName: string,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<string>(
      {url: `/api/tenants/organizations/${organizationName}/setup-progress`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrganizationSetupProgressQueryKey = (organizationName: string,) => {
    return [`/api/tenants/organizations/${organizationName}/setup-progress`] as const;
    }

    
export const getGetOrganizationSetupProgressQueryOptions = <TData = Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError = unknown>(organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrganizationSetupProgressQueryKey(organizationName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationSetupProgress>>> = ({ signal }) => getOrganizationSetupProgress(organizationName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(organizationName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrganizationSetupProgressQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganizationSetupProgress>>>
export type GetOrganizationSetupProgressQueryError = unknown


export function useGetOrganizationSetupProgress<TData = Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError = unknown>(
 organizationName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationSetupProgress>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationSetupProgress>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationSetupProgress<TData = Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError = unknown>(
 organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationSetupProgress>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationSetupProgress>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrganizationSetupProgress<TData = Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError = unknown>(
 organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOrganizationSetupProgress<TData = Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError = unknown>(
 organizationName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationSetupProgress>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrganizationSetupProgressQueryOptions(organizationName,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTenantInfo = (
    tenantName: string,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GetTenantInfo200>(
      {url: `/api/tenants/info/${tenantName}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTenantInfoQueryKey = (tenantName: string,) => {
    return [`/api/tenants/info/${tenantName}`] as const;
    }

    
export const getGetTenantInfoQueryOptions = <TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(tenantName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTenantInfoQueryKey(tenantName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenantInfo>>> = ({ signal }) => getTenantInfo(tenantName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(tenantName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTenantInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getTenantInfo>>>
export type GetTenantInfoQueryError = unknown


export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
 tenantName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantInfo>>,
          TError,
          Awaited<ReturnType<typeof getTenantInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
 tenantName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantInfo>>,
          TError,
          Awaited<ReturnType<typeof getTenantInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
 tenantName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTenantInfo<TData = Awaited<ReturnType<typeof getTenantInfo>>, TError = unknown>(
 tenantName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTenantInfo>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTenantInfoQueryOptions(tenantName,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



