/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  SendMessage200,
  WhatsappRequest
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const sendMessage = (
    whatsappRequest: WhatsappRequest,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<SendMessage200>(
      {url: `/api/whatsapp/send-message`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: whatsappRequest, signal
    },
      options);
    }
  


export const getSendMessageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMessage>>, TError,{data: WhatsappRequest}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof sendMessage>>, TError,{data: WhatsappRequest}, TContext> => {
    
const mutationKey = ['sendMessage'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendMessage>>, {data: WhatsappRequest}> = (props) => {
          const {data} = props ?? {};

          return  sendMessage(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof sendMessage>>>
    export type SendMessageMutationBody = WhatsappRequest
    export type SendMessageMutationError = unknown

    export const useSendMessage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMessage>>, TError,{data: WhatsappRequest}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendMessage>>,
        TError,
        {data: WhatsappRequest},
        TContext
      > => {

      const mutationOptions = getSendMessageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    