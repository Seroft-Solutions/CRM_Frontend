/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountCustomersParams,
  CustomerDTO,
  GetAllCustomersParams,
  SearchCustomersParams
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getCustomer = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CustomerDTO>(
      {url: `/api/customers/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCustomerQueryKey = (id: number,) => {
    return [`/api/customers/${id}`] as const;
    }

    
export const getGetCustomerQueryOptions = <TData = Awaited<ReturnType<typeof getCustomer>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCustomerQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomer>>> = ({ signal }) => getCustomer(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCustomerQueryResult = NonNullable<Awaited<ReturnType<typeof getCustomer>>>
export type GetCustomerQueryError = unknown


export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomer>>,
          TError,
          Awaited<ReturnType<typeof getCustomer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomer>>,
          TError,
          Awaited<ReturnType<typeof getCustomer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCustomer<TData = Awaited<ReturnType<typeof getCustomer>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCustomer>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCustomerQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCustomer = (
    id: number,
    customerDTO: CustomerDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CustomerDTO>(
      {url: `/api/customers/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: customerDTO
    },
      options);
    }
  


export const getUpdateCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCustomer>>, TError,{id: number;data: CustomerDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCustomer>>, TError,{id: number;data: CustomerDTO}, TContext> => {
    
const mutationKey = ['updateCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCustomer>>, {id: number;data: CustomerDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCustomer(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof updateCustomer>>>
    export type UpdateCustomerMutationBody = CustomerDTO
    export type UpdateCustomerMutationError = unknown

    export const useUpdateCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCustomer>>, TError,{id: number;data: CustomerDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCustomer>>,
        TError,
        {id: number;data: CustomerDTO},
        TContext
      > => {

      const mutationOptions = getUpdateCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCustomer = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/customers/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCustomer>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCustomer>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCustomer>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCustomer(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCustomer>>>
    
    export type DeleteCustomerMutationError = unknown

    export const useDeleteCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCustomer>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCustomer>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateCustomer = (
    id: number,
    customerDTO: CustomerDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CustomerDTO>(
      {url: `/api/customers/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: customerDTO
    },
      options);
    }
  


export const getPartialUpdateCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCustomer>>, TError,{id: number;data: CustomerDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCustomer>>, TError,{id: number;data: CustomerDTO}, TContext> => {
    
const mutationKey = ['partialUpdateCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateCustomer>>, {id: number;data: CustomerDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateCustomer(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateCustomer>>>
    export type PartialUpdateCustomerMutationBody = CustomerDTO
    export type PartialUpdateCustomerMutationError = unknown

    export const usePartialUpdateCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCustomer>>, TError,{id: number;data: CustomerDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateCustomer>>,
        TError,
        {id: number;data: CustomerDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllCustomers = (
    params?: GetAllCustomersParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CustomerDTO[]>(
      {url: `/api/customers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllCustomersQueryKey = (params?: GetAllCustomersParams,) => {
    return [`/api/customers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllCustomersQueryOptions = <TData = Awaited<ReturnType<typeof getAllCustomers>>, TError = unknown>(params?: GetAllCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCustomersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCustomers>>> = ({ signal }) => getAllCustomers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCustomers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCustomersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCustomers>>>
export type GetAllCustomersQueryError = unknown


export function useGetAllCustomers<TData = Awaited<ReturnType<typeof getAllCustomers>>, TError = unknown>(
 params: undefined |  GetAllCustomersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCustomers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCustomers>>,
          TError,
          Awaited<ReturnType<typeof getAllCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCustomers<TData = Awaited<ReturnType<typeof getAllCustomers>>, TError = unknown>(
 params?: GetAllCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCustomers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCustomers>>,
          TError,
          Awaited<ReturnType<typeof getAllCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCustomers<TData = Awaited<ReturnType<typeof getAllCustomers>>, TError = unknown>(
 params?: GetAllCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCustomers<TData = Awaited<ReturnType<typeof getAllCustomers>>, TError = unknown>(
 params?: GetAllCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCustomersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createCustomer = (
    customerDTO: CustomerDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CustomerDTO>(
      {url: `/api/customers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerDTO, signal
    },
      options);
    }
  


export const getCreateCustomerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCustomer>>, TError,{data: CustomerDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createCustomer>>, TError,{data: CustomerDTO}, TContext> => {
    
const mutationKey = ['createCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCustomer>>, {data: CustomerDTO}> = (props) => {
          const {data} = props ?? {};

          return  createCustomer(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof createCustomer>>>
    export type CreateCustomerMutationBody = CustomerDTO
    export type CreateCustomerMutationError = unknown

    export const useCreateCustomer = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCustomer>>, TError,{data: CustomerDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCustomer>>,
        TError,
        {data: CustomerDTO},
        TContext
      > => {

      const mutationOptions = getCreateCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countCustomers = (
    params?: CountCustomersParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/customers/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountCustomersQueryKey = (params?: CountCustomersParams,) => {
    return [`/api/customers/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountCustomersQueryOptions = <TData = Awaited<ReturnType<typeof countCustomers>>, TError = unknown>(params?: CountCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountCustomersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countCustomers>>> = ({ signal }) => countCustomers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countCustomers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountCustomersQueryResult = NonNullable<Awaited<ReturnType<typeof countCustomers>>>
export type CountCustomersQueryError = unknown


export function useCountCustomers<TData = Awaited<ReturnType<typeof countCustomers>>, TError = unknown>(
 params: undefined |  CountCustomersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCustomers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCustomers>>,
          TError,
          Awaited<ReturnType<typeof countCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCustomers<TData = Awaited<ReturnType<typeof countCustomers>>, TError = unknown>(
 params?: CountCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCustomers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCustomers>>,
          TError,
          Awaited<ReturnType<typeof countCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCustomers<TData = Awaited<ReturnType<typeof countCustomers>>, TError = unknown>(
 params?: CountCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountCustomers<TData = Awaited<ReturnType<typeof countCustomers>>, TError = unknown>(
 params?: CountCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountCustomersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchCustomers = (
    params: SearchCustomersParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CustomerDTO[]>(
      {url: `/api/customers/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchCustomersQueryKey = (params: SearchCustomersParams,) => {
    return [`/api/customers/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchCustomersQueryOptions = <TData = Awaited<ReturnType<typeof searchCustomers>>, TError = unknown>(params: SearchCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCustomersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCustomers>>> = ({ signal }) => searchCustomers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchCustomers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCustomersQueryResult = NonNullable<Awaited<ReturnType<typeof searchCustomers>>>
export type SearchCustomersQueryError = unknown


export function useSearchCustomers<TData = Awaited<ReturnType<typeof searchCustomers>>, TError = unknown>(
 params: SearchCustomersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCustomers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCustomers>>,
          TError,
          Awaited<ReturnType<typeof searchCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCustomers<TData = Awaited<ReturnType<typeof searchCustomers>>, TError = unknown>(
 params: SearchCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCustomers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCustomers>>,
          TError,
          Awaited<ReturnType<typeof searchCustomers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCustomers<TData = Awaited<ReturnType<typeof searchCustomers>>, TError = unknown>(
 params: SearchCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchCustomers<TData = Awaited<ReturnType<typeof searchCustomers>>, TError = unknown>(
 params: SearchCustomersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCustomers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCustomersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



