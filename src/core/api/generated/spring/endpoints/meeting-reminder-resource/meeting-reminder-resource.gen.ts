/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountMeetingRemindersParams,
  GetAllMeetingRemindersParams,
  MeetingReminderDTO,
  SearchMeetingRemindersParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getMeetingReminder = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingReminderDTO>(
      {url: `/api/meeting-reminders/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeetingReminderQueryKey = (id: number,) => {
    return [`/api/meeting-reminders/${id}`] as const;
    }

    
export const getGetMeetingReminderQueryOptions = <TData = Awaited<ReturnType<typeof getMeetingReminder>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingReminder>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeetingReminderQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeetingReminder>>> = ({ signal }) => getMeetingReminder(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeetingReminder>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeetingReminderQueryResult = NonNullable<Awaited<ReturnType<typeof getMeetingReminder>>>
export type GetMeetingReminderQueryError = ErrorType<unknown>


export function useGetMeetingReminder<TData = Awaited<ReturnType<typeof getMeetingReminder>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingReminder>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeetingReminder>>,
          TError,
          Awaited<ReturnType<typeof getMeetingReminder>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeetingReminder<TData = Awaited<ReturnType<typeof getMeetingReminder>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingReminder>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeetingReminder>>,
          TError,
          Awaited<ReturnType<typeof getMeetingReminder>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeetingReminder<TData = Awaited<ReturnType<typeof getMeetingReminder>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingReminder>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMeetingReminder<TData = Awaited<ReturnType<typeof getMeetingReminder>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingReminder>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeetingReminderQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateMeetingReminder = (
    id: number,
    meetingReminderDTO: MeetingReminderDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<MeetingReminderDTO>(
      {url: `/api/meeting-reminders/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meetingReminderDTO
    },
      options);
    }
  


export const getUpdateMeetingReminderMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMeetingReminder>>, TError,{id: number;data: MeetingReminderDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMeetingReminder>>, TError,{id: number;data: MeetingReminderDTO}, TContext> => {
    
const mutationKey = ['updateMeetingReminder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMeetingReminder>>, {id: number;data: MeetingReminderDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMeetingReminder(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMeetingReminderMutationResult = NonNullable<Awaited<ReturnType<typeof updateMeetingReminder>>>
    export type UpdateMeetingReminderMutationBody = MeetingReminderDTO
    export type UpdateMeetingReminderMutationError = ErrorType<unknown>

    export const useUpdateMeetingReminder = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMeetingReminder>>, TError,{id: number;data: MeetingReminderDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateMeetingReminder>>,
        TError,
        {id: number;data: MeetingReminderDTO},
        TContext
      > => {

      const mutationOptions = getUpdateMeetingReminderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteMeetingReminder = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/meeting-reminders/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeetingReminderMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeetingReminder>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeetingReminder>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteMeetingReminder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeetingReminder>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeetingReminder(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeetingReminderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeetingReminder>>>
    
    export type DeleteMeetingReminderMutationError = ErrorType<unknown>

    export const useDeleteMeetingReminder = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeetingReminder>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeetingReminder>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeetingReminderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateMeetingReminder = (
    id: number,
    meetingReminderDTO: MeetingReminderDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<MeetingReminderDTO>(
      {url: `/api/meeting-reminders/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: meetingReminderDTO
    },
      options);
    }
  


export const getPartialUpdateMeetingReminderMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeetingReminder>>, TError,{id: number;data: MeetingReminderDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeetingReminder>>, TError,{id: number;data: MeetingReminderDTO}, TContext> => {
    
const mutationKey = ['partialUpdateMeetingReminder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateMeetingReminder>>, {id: number;data: MeetingReminderDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateMeetingReminder(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateMeetingReminderMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateMeetingReminder>>>
    export type PartialUpdateMeetingReminderMutationBody = MeetingReminderDTO
    export type PartialUpdateMeetingReminderMutationError = ErrorType<unknown>

    export const usePartialUpdateMeetingReminder = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeetingReminder>>, TError,{id: number;data: MeetingReminderDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateMeetingReminder>>,
        TError,
        {id: number;data: MeetingReminderDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateMeetingReminderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllMeetingReminders = (
    params?: GetAllMeetingRemindersParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingReminderDTO[]>(
      {url: `/api/meeting-reminders`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllMeetingRemindersQueryKey = (params?: GetAllMeetingRemindersParams,) => {
    return [`/api/meeting-reminders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllMeetingRemindersQueryOptions = <TData = Awaited<ReturnType<typeof getAllMeetingReminders>>, TError = ErrorType<unknown>>(params?: GetAllMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMeetingRemindersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMeetingReminders>>> = ({ signal }) => getAllMeetingReminders(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingReminders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMeetingRemindersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMeetingReminders>>>
export type GetAllMeetingRemindersQueryError = ErrorType<unknown>


export function useGetAllMeetingReminders<TData = Awaited<ReturnType<typeof getAllMeetingReminders>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllMeetingRemindersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingReminders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMeetingReminders>>,
          TError,
          Awaited<ReturnType<typeof getAllMeetingReminders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMeetingReminders<TData = Awaited<ReturnType<typeof getAllMeetingReminders>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingReminders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMeetingReminders>>,
          TError,
          Awaited<ReturnType<typeof getAllMeetingReminders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMeetingReminders<TData = Awaited<ReturnType<typeof getAllMeetingReminders>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllMeetingReminders<TData = Awaited<ReturnType<typeof getAllMeetingReminders>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMeetingRemindersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createMeetingReminder = (
    meetingReminderDTO: MeetingReminderDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingReminderDTO>(
      {url: `/api/meeting-reminders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meetingReminderDTO, signal
    },
      options);
    }
  


export const getCreateMeetingReminderMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeetingReminder>>, TError,{data: MeetingReminderDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createMeetingReminder>>, TError,{data: MeetingReminderDTO}, TContext> => {
    
const mutationKey = ['createMeetingReminder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMeetingReminder>>, {data: MeetingReminderDTO}> = (props) => {
          const {data} = props ?? {};

          return  createMeetingReminder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMeetingReminderMutationResult = NonNullable<Awaited<ReturnType<typeof createMeetingReminder>>>
    export type CreateMeetingReminderMutationBody = MeetingReminderDTO
    export type CreateMeetingReminderMutationError = ErrorType<unknown>

    export const useCreateMeetingReminder = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeetingReminder>>, TError,{data: MeetingReminderDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createMeetingReminder>>,
        TError,
        {data: MeetingReminderDTO},
        TContext
      > => {

      const mutationOptions = getCreateMeetingReminderMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countMeetingReminders = (
    params?: CountMeetingRemindersParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/meeting-reminders/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountMeetingRemindersQueryKey = (params?: CountMeetingRemindersParams,) => {
    return [`/api/meeting-reminders/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountMeetingRemindersQueryOptions = <TData = Awaited<ReturnType<typeof countMeetingReminders>>, TError = ErrorType<unknown>>(params?: CountMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountMeetingRemindersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countMeetingReminders>>> = ({ signal }) => countMeetingReminders(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countMeetingReminders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountMeetingRemindersQueryResult = NonNullable<Awaited<ReturnType<typeof countMeetingReminders>>>
export type CountMeetingRemindersQueryError = ErrorType<unknown>


export function useCountMeetingReminders<TData = Awaited<ReturnType<typeof countMeetingReminders>>, TError = ErrorType<unknown>>(
 params: undefined |  CountMeetingRemindersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingReminders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countMeetingReminders>>,
          TError,
          Awaited<ReturnType<typeof countMeetingReminders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountMeetingReminders<TData = Awaited<ReturnType<typeof countMeetingReminders>>, TError = ErrorType<unknown>>(
 params?: CountMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingReminders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countMeetingReminders>>,
          TError,
          Awaited<ReturnType<typeof countMeetingReminders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountMeetingReminders<TData = Awaited<ReturnType<typeof countMeetingReminders>>, TError = ErrorType<unknown>>(
 params?: CountMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountMeetingReminders<TData = Awaited<ReturnType<typeof countMeetingReminders>>, TError = ErrorType<unknown>>(
 params?: CountMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountMeetingRemindersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchMeetingReminders = (
    params: SearchMeetingRemindersParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingReminderDTO[]>(
      {url: `/api/meeting-reminders/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchMeetingRemindersQueryKey = (params: SearchMeetingRemindersParams,) => {
    return [`/api/meeting-reminders/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchMeetingRemindersQueryOptions = <TData = Awaited<ReturnType<typeof searchMeetingReminders>>, TError = ErrorType<unknown>>(params: SearchMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchMeetingRemindersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMeetingReminders>>> = ({ signal }) => searchMeetingReminders(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchMeetingReminders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchMeetingRemindersQueryResult = NonNullable<Awaited<ReturnType<typeof searchMeetingReminders>>>
export type SearchMeetingRemindersQueryError = ErrorType<unknown>


export function useSearchMeetingReminders<TData = Awaited<ReturnType<typeof searchMeetingReminders>>, TError = ErrorType<unknown>>(
 params: SearchMeetingRemindersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingReminders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMeetingReminders>>,
          TError,
          Awaited<ReturnType<typeof searchMeetingReminders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMeetingReminders<TData = Awaited<ReturnType<typeof searchMeetingReminders>>, TError = ErrorType<unknown>>(
 params: SearchMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingReminders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMeetingReminders>>,
          TError,
          Awaited<ReturnType<typeof searchMeetingReminders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMeetingReminders<TData = Awaited<ReturnType<typeof searchMeetingReminders>>, TError = ErrorType<unknown>>(
 params: SearchMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchMeetingReminders<TData = Awaited<ReturnType<typeof searchMeetingReminders>>, TError = ErrorType<unknown>>(
 params: SearchMeetingRemindersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingReminders>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchMeetingRemindersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



