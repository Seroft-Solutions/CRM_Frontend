/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ChannelTypeDTO,
  CountChannelTypesParams,
  GetAllChannelTypesParams,
  SearchChannelTypesParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getChannelType = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ChannelTypeDTO>(
      {url: `/api/channel-types/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetChannelTypeQueryKey = (id: number,) => {
    return [`/api/channel-types/${id}`] as const;
    }

    
export const getGetChannelTypeQueryOptions = <TData = Awaited<ReturnType<typeof getChannelType>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChannelTypeQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelType>>> = ({ signal }) => getChannelType(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetChannelTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getChannelType>>>
export type GetChannelTypeQueryError = ErrorType<unknown>


export function useGetChannelType<TData = Awaited<ReturnType<typeof getChannelType>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannelType>>,
          TError,
          Awaited<ReturnType<typeof getChannelType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChannelType<TData = Awaited<ReturnType<typeof getChannelType>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannelType>>,
          TError,
          Awaited<ReturnType<typeof getChannelType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChannelType<TData = Awaited<ReturnType<typeof getChannelType>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetChannelType<TData = Awaited<ReturnType<typeof getChannelType>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelType>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChannelTypeQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateChannelType = (
    id: number,
    channelTypeDTO: ChannelTypeDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<ChannelTypeDTO>(
      {url: `/api/channel-types/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: channelTypeDTO
    },
      options);
    }
  


export const getUpdateChannelTypeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateChannelType>>, TError,{id: number;data: ChannelTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateChannelType>>, TError,{id: number;data: ChannelTypeDTO}, TContext> => {
    
const mutationKey = ['updateChannelType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateChannelType>>, {id: number;data: ChannelTypeDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateChannelType(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateChannelTypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateChannelType>>>
    export type UpdateChannelTypeMutationBody = ChannelTypeDTO
    export type UpdateChannelTypeMutationError = ErrorType<unknown>

    export const useUpdateChannelType = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateChannelType>>, TError,{id: number;data: ChannelTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateChannelType>>,
        TError,
        {id: number;data: ChannelTypeDTO},
        TContext
      > => {

      const mutationOptions = getUpdateChannelTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteChannelType = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/channel-types/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteChannelTypeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteChannelType>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteChannelType>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteChannelType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteChannelType>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteChannelType(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteChannelTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChannelType>>>
    
    export type DeleteChannelTypeMutationError = ErrorType<unknown>

    export const useDeleteChannelType = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteChannelType>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteChannelType>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteChannelTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateChannelType = (
    id: number,
    channelTypeDTO: ChannelTypeDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<ChannelTypeDTO>(
      {url: `/api/channel-types/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: channelTypeDTO
    },
      options);
    }
  


export const getPartialUpdateChannelTypeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateChannelType>>, TError,{id: number;data: ChannelTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateChannelType>>, TError,{id: number;data: ChannelTypeDTO}, TContext> => {
    
const mutationKey = ['partialUpdateChannelType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateChannelType>>, {id: number;data: ChannelTypeDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateChannelType(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateChannelTypeMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateChannelType>>>
    export type PartialUpdateChannelTypeMutationBody = ChannelTypeDTO
    export type PartialUpdateChannelTypeMutationError = ErrorType<unknown>

    export const usePartialUpdateChannelType = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateChannelType>>, TError,{id: number;data: ChannelTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateChannelType>>,
        TError,
        {id: number;data: ChannelTypeDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateChannelTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllChannelTypes = (
    params?: GetAllChannelTypesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ChannelTypeDTO[]>(
      {url: `/api/channel-types`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllChannelTypesQueryKey = (params?: GetAllChannelTypesParams,) => {
    return [`/api/channel-types`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllChannelTypesQueryOptions = <TData = Awaited<ReturnType<typeof getAllChannelTypes>>, TError = ErrorType<unknown>>(params?: GetAllChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllChannelTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllChannelTypes>>> = ({ signal }) => getAllChannelTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllChannelTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllChannelTypes>>>
export type GetAllChannelTypesQueryError = ErrorType<unknown>


export function useGetAllChannelTypes<TData = Awaited<ReturnType<typeof getAllChannelTypes>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllChannelTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllChannelTypes>>,
          TError,
          Awaited<ReturnType<typeof getAllChannelTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllChannelTypes<TData = Awaited<ReturnType<typeof getAllChannelTypes>>, TError = ErrorType<unknown>>(
 params?: GetAllChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllChannelTypes>>,
          TError,
          Awaited<ReturnType<typeof getAllChannelTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllChannelTypes<TData = Awaited<ReturnType<typeof getAllChannelTypes>>, TError = ErrorType<unknown>>(
 params?: GetAllChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllChannelTypes<TData = Awaited<ReturnType<typeof getAllChannelTypes>>, TError = ErrorType<unknown>>(
 params?: GetAllChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllChannelTypesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createChannelType = (
    channelTypeDTO: ChannelTypeDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ChannelTypeDTO>(
      {url: `/api/channel-types`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: channelTypeDTO, signal
    },
      options);
    }
  


export const getCreateChannelTypeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createChannelType>>, TError,{data: ChannelTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createChannelType>>, TError,{data: ChannelTypeDTO}, TContext> => {
    
const mutationKey = ['createChannelType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createChannelType>>, {data: ChannelTypeDTO}> = (props) => {
          const {data} = props ?? {};

          return  createChannelType(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateChannelTypeMutationResult = NonNullable<Awaited<ReturnType<typeof createChannelType>>>
    export type CreateChannelTypeMutationBody = ChannelTypeDTO
    export type CreateChannelTypeMutationError = ErrorType<unknown>

    export const useCreateChannelType = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createChannelType>>, TError,{data: ChannelTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createChannelType>>,
        TError,
        {data: ChannelTypeDTO},
        TContext
      > => {

      const mutationOptions = getCreateChannelTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countChannelTypes = (
    params?: CountChannelTypesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/channel-types/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountChannelTypesQueryKey = (params?: CountChannelTypesParams,) => {
    return [`/api/channel-types/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountChannelTypesQueryOptions = <TData = Awaited<ReturnType<typeof countChannelTypes>>, TError = ErrorType<unknown>>(params?: CountChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountChannelTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countChannelTypes>>> = ({ signal }) => countChannelTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountChannelTypesQueryResult = NonNullable<Awaited<ReturnType<typeof countChannelTypes>>>
export type CountChannelTypesQueryError = ErrorType<unknown>


export function useCountChannelTypes<TData = Awaited<ReturnType<typeof countChannelTypes>>, TError = ErrorType<unknown>>(
 params: undefined |  CountChannelTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countChannelTypes>>,
          TError,
          Awaited<ReturnType<typeof countChannelTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountChannelTypes<TData = Awaited<ReturnType<typeof countChannelTypes>>, TError = ErrorType<unknown>>(
 params?: CountChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countChannelTypes>>,
          TError,
          Awaited<ReturnType<typeof countChannelTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountChannelTypes<TData = Awaited<ReturnType<typeof countChannelTypes>>, TError = ErrorType<unknown>>(
 params?: CountChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountChannelTypes<TData = Awaited<ReturnType<typeof countChannelTypes>>, TError = ErrorType<unknown>>(
 params?: CountChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountChannelTypesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchChannelTypes = (
    params: SearchChannelTypesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ChannelTypeDTO[]>(
      {url: `/api/channel-types/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchChannelTypesQueryKey = (params: SearchChannelTypesParams,) => {
    return [`/api/channel-types/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchChannelTypesQueryOptions = <TData = Awaited<ReturnType<typeof searchChannelTypes>>, TError = ErrorType<unknown>>(params: SearchChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchChannelTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchChannelTypes>>> = ({ signal }) => searchChannelTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchChannelTypesQueryResult = NonNullable<Awaited<ReturnType<typeof searchChannelTypes>>>
export type SearchChannelTypesQueryError = ErrorType<unknown>


export function useSearchChannelTypes<TData = Awaited<ReturnType<typeof searchChannelTypes>>, TError = ErrorType<unknown>>(
 params: SearchChannelTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchChannelTypes>>,
          TError,
          Awaited<ReturnType<typeof searchChannelTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchChannelTypes<TData = Awaited<ReturnType<typeof searchChannelTypes>>, TError = ErrorType<unknown>>(
 params: SearchChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchChannelTypes>>,
          TError,
          Awaited<ReturnType<typeof searchChannelTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchChannelTypes<TData = Awaited<ReturnType<typeof searchChannelTypes>>, TError = ErrorType<unknown>>(
 params: SearchChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchChannelTypes<TData = Awaited<ReturnType<typeof searchChannelTypes>>, TError = ErrorType<unknown>>(
 params: SearchChannelTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchChannelTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchChannelTypesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



