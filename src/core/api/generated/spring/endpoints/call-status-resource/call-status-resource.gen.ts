/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CallStatusDTO,
  CountCallStatusesParams,
  GetAllCallStatusesParams,
  SearchCallStatusesParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getCallStatus = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallStatusDTO>(
      {url: `/api/call-statuses/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCallStatusQueryKey = (id: number,) => {
    return [`/api/call-statuses/${id}`] as const;
    }

    
export const getGetCallStatusQueryOptions = <TData = Awaited<ReturnType<typeof getCallStatus>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCallStatusQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallStatus>>> = ({ signal }) => getCallStatus(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCallStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getCallStatus>>>
export type GetCallStatusQueryError = unknown


export function useGetCallStatus<TData = Awaited<ReturnType<typeof getCallStatus>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallStatus>>,
          TError,
          Awaited<ReturnType<typeof getCallStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallStatus<TData = Awaited<ReturnType<typeof getCallStatus>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallStatus>>,
          TError,
          Awaited<ReturnType<typeof getCallStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallStatus<TData = Awaited<ReturnType<typeof getCallStatus>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCallStatus<TData = Awaited<ReturnType<typeof getCallStatus>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallStatus>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCallStatusQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCallStatus = (
    id: number,
    callStatusDTO: CallStatusDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallStatusDTO>(
      {url: `/api/call-statuses/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: callStatusDTO
    },
      options);
    }
  


export const getUpdateCallStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallStatus>>, TError,{id: number;data: CallStatusDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCallStatus>>, TError,{id: number;data: CallStatusDTO}, TContext> => {
    
const mutationKey = ['updateCallStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCallStatus>>, {id: number;data: CallStatusDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCallStatus(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCallStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateCallStatus>>>
    export type UpdateCallStatusMutationBody = CallStatusDTO
    export type UpdateCallStatusMutationError = unknown

    export const useUpdateCallStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallStatus>>, TError,{id: number;data: CallStatusDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCallStatus>>,
        TError,
        {id: number;data: CallStatusDTO},
        TContext
      > => {

      const mutationOptions = getUpdateCallStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCallStatus = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/call-statuses/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCallStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallStatus>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCallStatus>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteCallStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCallStatus>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCallStatus(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCallStatusMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCallStatus>>>
    
    export type DeleteCallStatusMutationError = unknown

    export const useDeleteCallStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallStatus>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCallStatus>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCallStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateCallStatus = (
    id: number,
    callStatusDTO: CallStatusDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallStatusDTO>(
      {url: `/api/call-statuses/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: callStatusDTO
    },
      options);
    }
  


export const getPartialUpdateCallStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallStatus>>, TError,{id: number;data: CallStatusDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallStatus>>, TError,{id: number;data: CallStatusDTO}, TContext> => {
    
const mutationKey = ['partialUpdateCallStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateCallStatus>>, {id: number;data: CallStatusDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateCallStatus(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateCallStatusMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateCallStatus>>>
    export type PartialUpdateCallStatusMutationBody = CallStatusDTO
    export type PartialUpdateCallStatusMutationError = unknown

    export const usePartialUpdateCallStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallStatus>>, TError,{id: number;data: CallStatusDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateCallStatus>>,
        TError,
        {id: number;data: CallStatusDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateCallStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllCallStatuses = (
    params?: GetAllCallStatusesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallStatusDTO[]>(
      {url: `/api/call-statuses`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllCallStatusesQueryKey = (params?: GetAllCallStatusesParams,) => {
    return [`/api/call-statuses`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllCallStatusesQueryOptions = <TData = Awaited<ReturnType<typeof getAllCallStatuses>>, TError = unknown>(params?: GetAllCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCallStatusesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallStatuses>>> = ({ signal }) => getAllCallStatuses(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCallStatusesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCallStatuses>>>
export type GetAllCallStatusesQueryError = unknown


export function useGetAllCallStatuses<TData = Awaited<ReturnType<typeof getAllCallStatuses>>, TError = unknown>(
 params: undefined |  GetAllCallStatusesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallStatuses>>,
          TError,
          Awaited<ReturnType<typeof getAllCallStatuses>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallStatuses<TData = Awaited<ReturnType<typeof getAllCallStatuses>>, TError = unknown>(
 params?: GetAllCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallStatuses>>,
          TError,
          Awaited<ReturnType<typeof getAllCallStatuses>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallStatuses<TData = Awaited<ReturnType<typeof getAllCallStatuses>>, TError = unknown>(
 params?: GetAllCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCallStatuses<TData = Awaited<ReturnType<typeof getAllCallStatuses>>, TError = unknown>(
 params?: GetAllCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCallStatusesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createCallStatus = (
    callStatusDTO: CallStatusDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallStatusDTO>(
      {url: `/api/call-statuses`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: callStatusDTO, signal
    },
      options);
    }
  


export const getCreateCallStatusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallStatus>>, TError,{data: CallStatusDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createCallStatus>>, TError,{data: CallStatusDTO}, TContext> => {
    
const mutationKey = ['createCallStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCallStatus>>, {data: CallStatusDTO}> = (props) => {
          const {data} = props ?? {};

          return  createCallStatus(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCallStatusMutationResult = NonNullable<Awaited<ReturnType<typeof createCallStatus>>>
    export type CreateCallStatusMutationBody = CallStatusDTO
    export type CreateCallStatusMutationError = unknown

    export const useCreateCallStatus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallStatus>>, TError,{data: CallStatusDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCallStatus>>,
        TError,
        {data: CallStatusDTO},
        TContext
      > => {

      const mutationOptions = getCreateCallStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countCallStatuses = (
    params?: CountCallStatusesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/call-statuses/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountCallStatusesQueryKey = (params?: CountCallStatusesParams,) => {
    return [`/api/call-statuses/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountCallStatusesQueryOptions = <TData = Awaited<ReturnType<typeof countCallStatuses>>, TError = unknown>(params?: CountCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountCallStatusesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallStatuses>>> = ({ signal }) => countCallStatuses(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountCallStatusesQueryResult = NonNullable<Awaited<ReturnType<typeof countCallStatuses>>>
export type CountCallStatusesQueryError = unknown


export function useCountCallStatuses<TData = Awaited<ReturnType<typeof countCallStatuses>>, TError = unknown>(
 params: undefined |  CountCallStatusesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallStatuses>>,
          TError,
          Awaited<ReturnType<typeof countCallStatuses>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallStatuses<TData = Awaited<ReturnType<typeof countCallStatuses>>, TError = unknown>(
 params?: CountCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallStatuses>>,
          TError,
          Awaited<ReturnType<typeof countCallStatuses>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallStatuses<TData = Awaited<ReturnType<typeof countCallStatuses>>, TError = unknown>(
 params?: CountCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountCallStatuses<TData = Awaited<ReturnType<typeof countCallStatuses>>, TError = unknown>(
 params?: CountCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountCallStatusesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchCallStatuses = (
    params: SearchCallStatusesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallStatusDTO[]>(
      {url: `/api/call-statuses/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchCallStatusesQueryKey = (params: SearchCallStatusesParams,) => {
    return [`/api/call-statuses/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchCallStatusesQueryOptions = <TData = Awaited<ReturnType<typeof searchCallStatuses>>, TError = unknown>(params: SearchCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCallStatusesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallStatuses>>> = ({ signal }) => searchCallStatuses(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCallStatusesQueryResult = NonNullable<Awaited<ReturnType<typeof searchCallStatuses>>>
export type SearchCallStatusesQueryError = unknown


export function useSearchCallStatuses<TData = Awaited<ReturnType<typeof searchCallStatuses>>, TError = unknown>(
 params: SearchCallStatusesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallStatuses>>,
          TError,
          Awaited<ReturnType<typeof searchCallStatuses>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallStatuses<TData = Awaited<ReturnType<typeof searchCallStatuses>>, TError = unknown>(
 params: SearchCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallStatuses>>,
          TError,
          Awaited<ReturnType<typeof searchCallStatuses>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallStatuses<TData = Awaited<ReturnType<typeof searchCallStatuses>>, TError = unknown>(
 params: SearchCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchCallStatuses<TData = Awaited<ReturnType<typeof searchCallStatuses>>, TError = unknown>(
 params: SearchCallStatusesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallStatuses>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCallStatusesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



