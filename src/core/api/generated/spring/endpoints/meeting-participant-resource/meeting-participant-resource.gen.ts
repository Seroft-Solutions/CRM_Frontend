/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountMeetingParticipantsParams,
  GetAllMeetingParticipantsParams,
  MeetingParticipantDTO,
  SearchMeetingParticipantsParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getMeetingParticipant = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingParticipantDTO>(
      {url: `/api/meeting-participants/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMeetingParticipantQueryKey = (id: number,) => {
    return [`/api/meeting-participants/${id}`] as const;
    }

    
export const getGetMeetingParticipantQueryOptions = <TData = Awaited<ReturnType<typeof getMeetingParticipant>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingParticipant>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeetingParticipantQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeetingParticipant>>> = ({ signal }) => getMeetingParticipant(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeetingParticipant>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeetingParticipantQueryResult = NonNullable<Awaited<ReturnType<typeof getMeetingParticipant>>>
export type GetMeetingParticipantQueryError = ErrorType<unknown>


export function useGetMeetingParticipant<TData = Awaited<ReturnType<typeof getMeetingParticipant>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingParticipant>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeetingParticipant>>,
          TError,
          Awaited<ReturnType<typeof getMeetingParticipant>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeetingParticipant<TData = Awaited<ReturnType<typeof getMeetingParticipant>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingParticipant>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeetingParticipant>>,
          TError,
          Awaited<ReturnType<typeof getMeetingParticipant>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeetingParticipant<TData = Awaited<ReturnType<typeof getMeetingParticipant>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingParticipant>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMeetingParticipant<TData = Awaited<ReturnType<typeof getMeetingParticipant>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeetingParticipant>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeetingParticipantQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateMeetingParticipant = (
    id: number,
    meetingParticipantDTO: MeetingParticipantDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<MeetingParticipantDTO>(
      {url: `/api/meeting-participants/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: meetingParticipantDTO
    },
      options);
    }
  


export const getUpdateMeetingParticipantMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMeetingParticipant>>, TError,{id: number;data: MeetingParticipantDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateMeetingParticipant>>, TError,{id: number;data: MeetingParticipantDTO}, TContext> => {
    
const mutationKey = ['updateMeetingParticipant'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMeetingParticipant>>, {id: number;data: MeetingParticipantDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMeetingParticipant(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMeetingParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof updateMeetingParticipant>>>
    export type UpdateMeetingParticipantMutationBody = MeetingParticipantDTO
    export type UpdateMeetingParticipantMutationError = ErrorType<unknown>

    export const useUpdateMeetingParticipant = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMeetingParticipant>>, TError,{id: number;data: MeetingParticipantDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateMeetingParticipant>>,
        TError,
        {id: number;data: MeetingParticipantDTO},
        TContext
      > => {

      const mutationOptions = getUpdateMeetingParticipantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteMeetingParticipant = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/meeting-participants/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMeetingParticipantMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeetingParticipant>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMeetingParticipant>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteMeetingParticipant'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMeetingParticipant>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMeetingParticipant(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMeetingParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMeetingParticipant>>>
    
    export type DeleteMeetingParticipantMutationError = ErrorType<unknown>

    export const useDeleteMeetingParticipant = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMeetingParticipant>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteMeetingParticipant>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMeetingParticipantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateMeetingParticipant = (
    id: number,
    meetingParticipantDTO: MeetingParticipantDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<MeetingParticipantDTO>(
      {url: `/api/meeting-participants/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: meetingParticipantDTO
    },
      options);
    }
  


export const getPartialUpdateMeetingParticipantMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeetingParticipant>>, TError,{id: number;data: MeetingParticipantDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeetingParticipant>>, TError,{id: number;data: MeetingParticipantDTO}, TContext> => {
    
const mutationKey = ['partialUpdateMeetingParticipant'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateMeetingParticipant>>, {id: number;data: MeetingParticipantDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateMeetingParticipant(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateMeetingParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateMeetingParticipant>>>
    export type PartialUpdateMeetingParticipantMutationBody = MeetingParticipantDTO
    export type PartialUpdateMeetingParticipantMutationError = ErrorType<unknown>

    export const usePartialUpdateMeetingParticipant = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateMeetingParticipant>>, TError,{id: number;data: MeetingParticipantDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateMeetingParticipant>>,
        TError,
        {id: number;data: MeetingParticipantDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateMeetingParticipantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllMeetingParticipants = (
    params?: GetAllMeetingParticipantsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingParticipantDTO[]>(
      {url: `/api/meeting-participants`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllMeetingParticipantsQueryKey = (params?: GetAllMeetingParticipantsParams,) => {
    return [`/api/meeting-participants`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllMeetingParticipantsQueryOptions = <TData = Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError = ErrorType<unknown>>(params?: GetAllMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMeetingParticipantsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMeetingParticipants>>> = ({ signal }) => getAllMeetingParticipants(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMeetingParticipantsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMeetingParticipants>>>
export type GetAllMeetingParticipantsQueryError = ErrorType<unknown>


export function useGetAllMeetingParticipants<TData = Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllMeetingParticipantsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMeetingParticipants>>,
          TError,
          Awaited<ReturnType<typeof getAllMeetingParticipants>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMeetingParticipants<TData = Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMeetingParticipants>>,
          TError,
          Awaited<ReturnType<typeof getAllMeetingParticipants>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMeetingParticipants<TData = Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllMeetingParticipants<TData = Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError = ErrorType<unknown>>(
 params?: GetAllMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMeetingParticipantsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createMeetingParticipant = (
    meetingParticipantDTO: MeetingParticipantDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingParticipantDTO>(
      {url: `/api/meeting-participants`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meetingParticipantDTO, signal
    },
      options);
    }
  


export const getCreateMeetingParticipantMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeetingParticipant>>, TError,{data: MeetingParticipantDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createMeetingParticipant>>, TError,{data: MeetingParticipantDTO}, TContext> => {
    
const mutationKey = ['createMeetingParticipant'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMeetingParticipant>>, {data: MeetingParticipantDTO}> = (props) => {
          const {data} = props ?? {};

          return  createMeetingParticipant(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMeetingParticipantMutationResult = NonNullable<Awaited<ReturnType<typeof createMeetingParticipant>>>
    export type CreateMeetingParticipantMutationBody = MeetingParticipantDTO
    export type CreateMeetingParticipantMutationError = ErrorType<unknown>

    export const useCreateMeetingParticipant = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMeetingParticipant>>, TError,{data: MeetingParticipantDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createMeetingParticipant>>,
        TError,
        {data: MeetingParticipantDTO},
        TContext
      > => {

      const mutationOptions = getCreateMeetingParticipantMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countMeetingParticipants = (
    params?: CountMeetingParticipantsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/meeting-participants/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountMeetingParticipantsQueryKey = (params?: CountMeetingParticipantsParams,) => {
    return [`/api/meeting-participants/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountMeetingParticipantsQueryOptions = <TData = Awaited<ReturnType<typeof countMeetingParticipants>>, TError = ErrorType<unknown>>(params?: CountMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountMeetingParticipantsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countMeetingParticipants>>> = ({ signal }) => countMeetingParticipants(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countMeetingParticipants>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountMeetingParticipantsQueryResult = NonNullable<Awaited<ReturnType<typeof countMeetingParticipants>>>
export type CountMeetingParticipantsQueryError = ErrorType<unknown>


export function useCountMeetingParticipants<TData = Awaited<ReturnType<typeof countMeetingParticipants>>, TError = ErrorType<unknown>>(
 params: undefined |  CountMeetingParticipantsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingParticipants>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countMeetingParticipants>>,
          TError,
          Awaited<ReturnType<typeof countMeetingParticipants>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountMeetingParticipants<TData = Awaited<ReturnType<typeof countMeetingParticipants>>, TError = ErrorType<unknown>>(
 params?: CountMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingParticipants>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countMeetingParticipants>>,
          TError,
          Awaited<ReturnType<typeof countMeetingParticipants>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountMeetingParticipants<TData = Awaited<ReturnType<typeof countMeetingParticipants>>, TError = ErrorType<unknown>>(
 params?: CountMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountMeetingParticipants<TData = Awaited<ReturnType<typeof countMeetingParticipants>>, TError = ErrorType<unknown>>(
 params?: CountMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountMeetingParticipantsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchMeetingParticipants = (
    params: SearchMeetingParticipantsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<MeetingParticipantDTO[]>(
      {url: `/api/meeting-participants/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchMeetingParticipantsQueryKey = (params: SearchMeetingParticipantsParams,) => {
    return [`/api/meeting-participants/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchMeetingParticipantsQueryOptions = <TData = Awaited<ReturnType<typeof searchMeetingParticipants>>, TError = ErrorType<unknown>>(params: SearchMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchMeetingParticipantsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMeetingParticipants>>> = ({ signal }) => searchMeetingParticipants(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchMeetingParticipants>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchMeetingParticipantsQueryResult = NonNullable<Awaited<ReturnType<typeof searchMeetingParticipants>>>
export type SearchMeetingParticipantsQueryError = ErrorType<unknown>


export function useSearchMeetingParticipants<TData = Awaited<ReturnType<typeof searchMeetingParticipants>>, TError = ErrorType<unknown>>(
 params: SearchMeetingParticipantsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingParticipants>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMeetingParticipants>>,
          TError,
          Awaited<ReturnType<typeof searchMeetingParticipants>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMeetingParticipants<TData = Awaited<ReturnType<typeof searchMeetingParticipants>>, TError = ErrorType<unknown>>(
 params: SearchMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingParticipants>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMeetingParticipants>>,
          TError,
          Awaited<ReturnType<typeof searchMeetingParticipants>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMeetingParticipants<TData = Awaited<ReturnType<typeof searchMeetingParticipants>>, TError = ErrorType<unknown>>(
 params: SearchMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchMeetingParticipants<TData = Awaited<ReturnType<typeof searchMeetingParticipants>>, TError = ErrorType<unknown>>(
 params: SearchMeetingParticipantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMeetingParticipants>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchMeetingParticipantsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



