/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAuthorizationUrl200,
  GetAuthorizationUrlParams,
  HandleOAuthCallback200,
  HandleOAuthCallbackParams,
  MeetingRequest
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const scheduleMeeting = (
    meetingRequest: MeetingRequest,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<string>(
      {url: `/api/calendar/schedule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: meetingRequest, signal
    },
      options);
    }
  


export const getScheduleMeetingMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof scheduleMeeting>>, TError,{data: MeetingRequest}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof scheduleMeeting>>, TError,{data: MeetingRequest}, TContext> => {
    
const mutationKey = ['scheduleMeeting'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof scheduleMeeting>>, {data: MeetingRequest}> = (props) => {
          const {data} = props ?? {};

          return  scheduleMeeting(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ScheduleMeetingMutationResult = NonNullable<Awaited<ReturnType<typeof scheduleMeeting>>>
    export type ScheduleMeetingMutationBody = MeetingRequest
    export type ScheduleMeetingMutationError = unknown

    export const useScheduleMeeting = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof scheduleMeeting>>, TError,{data: MeetingRequest}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof scheduleMeeting>>,
        TError,
        {data: MeetingRequest},
        TContext
      > => {

      const mutationOptions = getScheduleMeetingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const handleOAuthCallback = (
    params: HandleOAuthCallbackParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<HandleOAuthCallback200>(
      {url: `/api/calendar/oauth2callback`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getHandleOAuthCallbackQueryKey = (params: HandleOAuthCallbackParams,) => {
    return [`/api/calendar/oauth2callback`, ...(params ? [params]: [])] as const;
    }

    
export const getHandleOAuthCallbackQueryOptions = <TData = Awaited<ReturnType<typeof handleOAuthCallback>>, TError = unknown>(params: HandleOAuthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleOAuthCallback>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHandleOAuthCallbackQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof handleOAuthCallback>>> = ({ signal }) => handleOAuthCallback(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof handleOAuthCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HandleOAuthCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof handleOAuthCallback>>>
export type HandleOAuthCallbackQueryError = unknown


export function useHandleOAuthCallback<TData = Awaited<ReturnType<typeof handleOAuthCallback>>, TError = unknown>(
 params: HandleOAuthCallbackParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleOAuthCallback>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof handleOAuthCallback>>,
          TError,
          Awaited<ReturnType<typeof handleOAuthCallback>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleOAuthCallback<TData = Awaited<ReturnType<typeof handleOAuthCallback>>, TError = unknown>(
 params: HandleOAuthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleOAuthCallback>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof handleOAuthCallback>>,
          TError,
          Awaited<ReturnType<typeof handleOAuthCallback>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleOAuthCallback<TData = Awaited<ReturnType<typeof handleOAuthCallback>>, TError = unknown>(
 params: HandleOAuthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleOAuthCallback>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHandleOAuthCallback<TData = Awaited<ReturnType<typeof handleOAuthCallback>>, TError = unknown>(
 params: HandleOAuthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleOAuthCallback>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHandleOAuthCallbackQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAuthorizationUrl = (
    params: GetAuthorizationUrlParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<GetAuthorizationUrl200>(
      {url: `/api/calendar/oauth2/authorize`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAuthorizationUrlQueryKey = (params: GetAuthorizationUrlParams,) => {
    return [`/api/calendar/oauth2/authorize`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAuthorizationUrlQueryOptions = <TData = Awaited<ReturnType<typeof getAuthorizationUrl>>, TError = unknown>(params: GetAuthorizationUrlParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthorizationUrlQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthorizationUrl>>> = ({ signal }) => getAuthorizationUrl(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthorizationUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthorizationUrl>>>
export type GetAuthorizationUrlQueryError = unknown


export function useGetAuthorizationUrl<TData = Awaited<ReturnType<typeof getAuthorizationUrl>>, TError = unknown>(
 params: GetAuthorizationUrlParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthorizationUrl>>,
          TError,
          Awaited<ReturnType<typeof getAuthorizationUrl>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthorizationUrl<TData = Awaited<ReturnType<typeof getAuthorizationUrl>>, TError = unknown>(
 params: GetAuthorizationUrlParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthorizationUrl>>,
          TError,
          Awaited<ReturnType<typeof getAuthorizationUrl>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthorizationUrl<TData = Awaited<ReturnType<typeof getAuthorizationUrl>>, TError = unknown>(
 params: GetAuthorizationUrlParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAuthorizationUrl<TData = Awaited<ReturnType<typeof getAuthorizationUrl>>, TError = unknown>(
 params: GetAuthorizationUrlParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthorizationUrlQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



