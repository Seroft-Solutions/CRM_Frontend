/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountPrioritiesParams,
  GetAllPrioritiesParams,
  PriorityDTO,
  SearchPrioritiesParams
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getPriority = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<PriorityDTO>(
      {url: `/api/priorities/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPriorityQueryKey = (id: number,) => {
    return [`/api/priorities/${id}`] as const;
    }

    
export const getGetPriorityQueryOptions = <TData = Awaited<ReturnType<typeof getPriority>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriority>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPriorityQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPriority>>> = ({ signal }) => getPriority(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPriority>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPriorityQueryResult = NonNullable<Awaited<ReturnType<typeof getPriority>>>
export type GetPriorityQueryError = unknown


export function useGetPriority<TData = Awaited<ReturnType<typeof getPriority>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriority>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriority>>,
          TError,
          Awaited<ReturnType<typeof getPriority>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriority<TData = Awaited<ReturnType<typeof getPriority>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriority>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPriority>>,
          TError,
          Awaited<ReturnType<typeof getPriority>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPriority<TData = Awaited<ReturnType<typeof getPriority>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriority>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPriority<TData = Awaited<ReturnType<typeof getPriority>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPriority>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPriorityQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updatePriority = (
    id: number,
    priorityDTO: PriorityDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<PriorityDTO>(
      {url: `/api/priorities/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: priorityDTO
    },
      options);
    }
  


export const getUpdatePriorityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriority>>, TError,{id: number;data: PriorityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePriority>>, TError,{id: number;data: PriorityDTO}, TContext> => {
    
const mutationKey = ['updatePriority'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePriority>>, {id: number;data: PriorityDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePriority(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePriorityMutationResult = NonNullable<Awaited<ReturnType<typeof updatePriority>>>
    export type UpdatePriorityMutationBody = PriorityDTO
    export type UpdatePriorityMutationError = unknown

    export const useUpdatePriority = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePriority>>, TError,{id: number;data: PriorityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePriority>>,
        TError,
        {id: number;data: PriorityDTO},
        TContext
      > => {

      const mutationOptions = getUpdatePriorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deletePriority = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/priorities/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePriorityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriority>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePriority>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deletePriority'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePriority>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deletePriority(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePriorityMutationResult = NonNullable<Awaited<ReturnType<typeof deletePriority>>>
    
    export type DeletePriorityMutationError = unknown

    export const useDeletePriority = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePriority>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePriority>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeletePriorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdatePriority = (
    id: number,
    priorityDTO: PriorityDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<PriorityDTO>(
      {url: `/api/priorities/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: priorityDTO
    },
      options);
    }
  


export const getPartialUpdatePriorityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdatePriority>>, TError,{id: number;data: PriorityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdatePriority>>, TError,{id: number;data: PriorityDTO}, TContext> => {
    
const mutationKey = ['partialUpdatePriority'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdatePriority>>, {id: number;data: PriorityDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdatePriority(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdatePriorityMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdatePriority>>>
    export type PartialUpdatePriorityMutationBody = PriorityDTO
    export type PartialUpdatePriorityMutationError = unknown

    export const usePartialUpdatePriority = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdatePriority>>, TError,{id: number;data: PriorityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdatePriority>>,
        TError,
        {id: number;data: PriorityDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdatePriorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllPriorities = (
    params?: GetAllPrioritiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<PriorityDTO[]>(
      {url: `/api/priorities`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllPrioritiesQueryKey = (params?: GetAllPrioritiesParams,) => {
    return [`/api/priorities`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllPrioritiesQueryOptions = <TData = Awaited<ReturnType<typeof getAllPriorities>>, TError = unknown>(params?: GetAllPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllPrioritiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPriorities>>> = ({ signal }) => getAllPriorities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllPriorities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllPrioritiesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPriorities>>>
export type GetAllPrioritiesQueryError = unknown


export function useGetAllPriorities<TData = Awaited<ReturnType<typeof getAllPriorities>>, TError = unknown>(
 params: undefined |  GetAllPrioritiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPriorities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPriorities>>,
          TError,
          Awaited<ReturnType<typeof getAllPriorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPriorities<TData = Awaited<ReturnType<typeof getAllPriorities>>, TError = unknown>(
 params?: GetAllPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPriorities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPriorities>>,
          TError,
          Awaited<ReturnType<typeof getAllPriorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPriorities<TData = Awaited<ReturnType<typeof getAllPriorities>>, TError = unknown>(
 params?: GetAllPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllPriorities<TData = Awaited<ReturnType<typeof getAllPriorities>>, TError = unknown>(
 params?: GetAllPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllPrioritiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createPriority = (
    priorityDTO: PriorityDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<PriorityDTO>(
      {url: `/api/priorities`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: priorityDTO, signal
    },
      options);
    }
  


export const getCreatePriorityMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriority>>, TError,{data: PriorityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createPriority>>, TError,{data: PriorityDTO}, TContext> => {
    
const mutationKey = ['createPriority'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPriority>>, {data: PriorityDTO}> = (props) => {
          const {data} = props ?? {};

          return  createPriority(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePriorityMutationResult = NonNullable<Awaited<ReturnType<typeof createPriority>>>
    export type CreatePriorityMutationBody = PriorityDTO
    export type CreatePriorityMutationError = unknown

    export const useCreatePriority = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPriority>>, TError,{data: PriorityDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createPriority>>,
        TError,
        {data: PriorityDTO},
        TContext
      > => {

      const mutationOptions = getCreatePriorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countPriorities = (
    params?: CountPrioritiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/priorities/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountPrioritiesQueryKey = (params?: CountPrioritiesParams,) => {
    return [`/api/priorities/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountPrioritiesQueryOptions = <TData = Awaited<ReturnType<typeof countPriorities>>, TError = unknown>(params?: CountPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountPrioritiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countPriorities>>> = ({ signal }) => countPriorities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countPriorities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountPrioritiesQueryResult = NonNullable<Awaited<ReturnType<typeof countPriorities>>>
export type CountPrioritiesQueryError = unknown


export function useCountPriorities<TData = Awaited<ReturnType<typeof countPriorities>>, TError = unknown>(
 params: undefined |  CountPrioritiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countPriorities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countPriorities>>,
          TError,
          Awaited<ReturnType<typeof countPriorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountPriorities<TData = Awaited<ReturnType<typeof countPriorities>>, TError = unknown>(
 params?: CountPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countPriorities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countPriorities>>,
          TError,
          Awaited<ReturnType<typeof countPriorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountPriorities<TData = Awaited<ReturnType<typeof countPriorities>>, TError = unknown>(
 params?: CountPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountPriorities<TData = Awaited<ReturnType<typeof countPriorities>>, TError = unknown>(
 params?: CountPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountPrioritiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchPriorities = (
    params: SearchPrioritiesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<PriorityDTO[]>(
      {url: `/api/priorities/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchPrioritiesQueryKey = (params: SearchPrioritiesParams,) => {
    return [`/api/priorities/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchPrioritiesQueryOptions = <TData = Awaited<ReturnType<typeof searchPriorities>>, TError = unknown>(params: SearchPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchPrioritiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchPriorities>>> = ({ signal }) => searchPriorities(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchPriorities>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchPrioritiesQueryResult = NonNullable<Awaited<ReturnType<typeof searchPriorities>>>
export type SearchPrioritiesQueryError = unknown


export function useSearchPriorities<TData = Awaited<ReturnType<typeof searchPriorities>>, TError = unknown>(
 params: SearchPrioritiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriorities>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchPriorities>>,
          TError,
          Awaited<ReturnType<typeof searchPriorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchPriorities<TData = Awaited<ReturnType<typeof searchPriorities>>, TError = unknown>(
 params: SearchPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriorities>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchPriorities>>,
          TError,
          Awaited<ReturnType<typeof searchPriorities>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchPriorities<TData = Awaited<ReturnType<typeof searchPriorities>>, TError = unknown>(
 params: SearchPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchPriorities<TData = Awaited<ReturnType<typeof searchPriorities>>, TError = unknown>(
 params: SearchPrioritiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchPriorities>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchPrioritiesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



