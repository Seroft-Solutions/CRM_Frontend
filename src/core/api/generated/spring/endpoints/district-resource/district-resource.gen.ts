/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountDistrictsParams,
  DistrictDTO,
  GetAllDistrictsParams,
  SearchDistrictsParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getDistrict = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<DistrictDTO>(
      {url: `/api/districts/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDistrictQueryKey = (id: number,) => {
    return [`/api/districts/${id}`] as const;
    }

    
export const getGetDistrictInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getDistrict>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDistrictQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDistrict>>> = ({ signal }) => getDistrict(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDistrictInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getDistrict>>>
export type GetDistrictInfiniteQueryError = unknown


export function useGetDistrictInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getDistrict>>>, TError = unknown>(
 id: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDistrict>>,
          TError,
          Awaited<ReturnType<typeof getDistrict>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDistrictInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getDistrict>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDistrict>>,
          TError,
          Awaited<ReturnType<typeof getDistrict>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDistrictInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getDistrict>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetDistrictInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getDistrict>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDistrictInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetDistrictQueryOptions = <TData = Awaited<ReturnType<typeof getDistrict>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDistrictQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDistrict>>> = ({ signal }) => getDistrict(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDistrictQueryResult = NonNullable<Awaited<ReturnType<typeof getDistrict>>>
export type GetDistrictQueryError = unknown


export function useGetDistrict<TData = Awaited<ReturnType<typeof getDistrict>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDistrict>>,
          TError,
          Awaited<ReturnType<typeof getDistrict>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDistrict<TData = Awaited<ReturnType<typeof getDistrict>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDistrict>>,
          TError,
          Awaited<ReturnType<typeof getDistrict>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDistrict<TData = Awaited<ReturnType<typeof getDistrict>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetDistrict<TData = Awaited<ReturnType<typeof getDistrict>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDistrict>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDistrictQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateDistrict = (
    id: number,
    districtDTO: DistrictDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<DistrictDTO>(
      {url: `/api/districts/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: districtDTO
    },
      options);
    }
  


export const getUpdateDistrictMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDistrict>>, TError,{id: number;data: DistrictDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateDistrict>>, TError,{id: number;data: DistrictDTO}, TContext> => {
    
const mutationKey = ['updateDistrict'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDistrict>>, {id: number;data: DistrictDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateDistrict(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDistrictMutationResult = NonNullable<Awaited<ReturnType<typeof updateDistrict>>>
    export type UpdateDistrictMutationBody = DistrictDTO
    export type UpdateDistrictMutationError = unknown

    export const useUpdateDistrict = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDistrict>>, TError,{id: number;data: DistrictDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDistrict>>,
        TError,
        {id: number;data: DistrictDTO},
        TContext
      > => {

      const mutationOptions = getUpdateDistrictMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteDistrict = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/districts/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteDistrictMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDistrict>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDistrict>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteDistrict'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDistrict>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteDistrict(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDistrictMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDistrict>>>
    
    export type DeleteDistrictMutationError = unknown

    export const useDeleteDistrict = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDistrict>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDistrict>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteDistrictMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateDistrict = (
    id: number,
    districtDTO: DistrictDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<DistrictDTO>(
      {url: `/api/districts/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: districtDTO
    },
      options);
    }
  


export const getPartialUpdateDistrictMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateDistrict>>, TError,{id: number;data: DistrictDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateDistrict>>, TError,{id: number;data: DistrictDTO}, TContext> => {
    
const mutationKey = ['partialUpdateDistrict'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateDistrict>>, {id: number;data: DistrictDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateDistrict(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateDistrictMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateDistrict>>>
    export type PartialUpdateDistrictMutationBody = DistrictDTO
    export type PartialUpdateDistrictMutationError = unknown

    export const usePartialUpdateDistrict = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateDistrict>>, TError,{id: number;data: DistrictDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateDistrict>>,
        TError,
        {id: number;data: DistrictDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateDistrictMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllDistricts = (
    params?: GetAllDistrictsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<DistrictDTO[]>(
      {url: `/api/districts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllDistrictsQueryKey = (params?: GetAllDistrictsParams,) => {
    return [`/api/districts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllDistrictsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllDistricts>>, GetAllDistrictsParams['nextId']>, TError = unknown>(params?: GetAllDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData, Awaited<ReturnType<typeof getAllDistricts>>, QueryKey, GetAllDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDistrictsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDistricts>>, QueryKey, GetAllDistrictsParams['nextId']> = ({ signal, pageParam }) => getAllDistricts({...params, nextId: pageParam || params?.['nextId']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData, Awaited<ReturnType<typeof getAllDistricts>>, QueryKey, GetAllDistrictsParams['nextId']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllDistrictsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDistricts>>>
export type GetAllDistrictsInfiniteQueryError = unknown


export function useGetAllDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllDistricts>>, GetAllDistrictsParams['nextId']>, TError = unknown>(
 params: undefined |  GetAllDistrictsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData, Awaited<ReturnType<typeof getAllDistricts>>, QueryKey, GetAllDistrictsParams['nextId']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDistricts>>,
          TError,
          Awaited<ReturnType<typeof getAllDistricts>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllDistricts>>, GetAllDistrictsParams['nextId']>, TError = unknown>(
 params?: GetAllDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData, Awaited<ReturnType<typeof getAllDistricts>>, QueryKey, GetAllDistrictsParams['nextId']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDistricts>>,
          TError,
          Awaited<ReturnType<typeof getAllDistricts>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllDistricts>>, GetAllDistrictsParams['nextId']>, TError = unknown>(
 params?: GetAllDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData, Awaited<ReturnType<typeof getAllDistricts>>, QueryKey, GetAllDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAllDistricts>>, GetAllDistrictsParams['nextId']>, TError = unknown>(
 params?: GetAllDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData, Awaited<ReturnType<typeof getAllDistricts>>, QueryKey, GetAllDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllDistrictsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllDistrictsQueryOptions = <TData = Awaited<ReturnType<typeof getAllDistricts>>, TError = unknown>(params?: GetAllDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllDistrictsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDistricts>>> = ({ signal }) => getAllDistricts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllDistrictsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDistricts>>>
export type GetAllDistrictsQueryError = unknown


export function useGetAllDistricts<TData = Awaited<ReturnType<typeof getAllDistricts>>, TError = unknown>(
 params: undefined |  GetAllDistrictsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDistricts>>,
          TError,
          Awaited<ReturnType<typeof getAllDistricts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDistricts<TData = Awaited<ReturnType<typeof getAllDistricts>>, TError = unknown>(
 params?: GetAllDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDistricts>>,
          TError,
          Awaited<ReturnType<typeof getAllDistricts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllDistricts<TData = Awaited<ReturnType<typeof getAllDistricts>>, TError = unknown>(
 params?: GetAllDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllDistricts<TData = Awaited<ReturnType<typeof getAllDistricts>>, TError = unknown>(
 params?: GetAllDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllDistrictsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createDistrict = (
    districtDTO: DistrictDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<DistrictDTO>(
      {url: `/api/districts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: districtDTO, signal
    },
      options);
    }
  


export const getCreateDistrictMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDistrict>>, TError,{data: DistrictDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createDistrict>>, TError,{data: DistrictDTO}, TContext> => {
    
const mutationKey = ['createDistrict'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDistrict>>, {data: DistrictDTO}> = (props) => {
          const {data} = props ?? {};

          return  createDistrict(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDistrictMutationResult = NonNullable<Awaited<ReturnType<typeof createDistrict>>>
    export type CreateDistrictMutationBody = DistrictDTO
    export type CreateDistrictMutationError = unknown

    export const useCreateDistrict = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDistrict>>, TError,{data: DistrictDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDistrict>>,
        TError,
        {data: DistrictDTO},
        TContext
      > => {

      const mutationOptions = getCreateDistrictMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countDistricts = (
    params?: CountDistrictsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/districts/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountDistrictsQueryKey = (params?: CountDistrictsParams,) => {
    return [`/api/districts/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountDistrictsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof countDistricts>>, CountDistrictsParams['nextId']>, TError = unknown>(params?: CountDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData, Awaited<ReturnType<typeof countDistricts>>, QueryKey, CountDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountDistrictsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countDistricts>>, QueryKey, CountDistrictsParams['nextId']> = ({ signal, pageParam }) => countDistricts({...params, nextId: pageParam || params?.['nextId']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData, Awaited<ReturnType<typeof countDistricts>>, QueryKey, CountDistrictsParams['nextId']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountDistrictsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof countDistricts>>>
export type CountDistrictsInfiniteQueryError = unknown


export function useCountDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countDistricts>>, CountDistrictsParams['nextId']>, TError = unknown>(
 params: undefined |  CountDistrictsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData, Awaited<ReturnType<typeof countDistricts>>, QueryKey, CountDistrictsParams['nextId']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countDistricts>>,
          TError,
          Awaited<ReturnType<typeof countDistricts>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countDistricts>>, CountDistrictsParams['nextId']>, TError = unknown>(
 params?: CountDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData, Awaited<ReturnType<typeof countDistricts>>, QueryKey, CountDistrictsParams['nextId']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countDistricts>>,
          TError,
          Awaited<ReturnType<typeof countDistricts>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countDistricts>>, CountDistrictsParams['nextId']>, TError = unknown>(
 params?: CountDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData, Awaited<ReturnType<typeof countDistricts>>, QueryKey, CountDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof countDistricts>>, CountDistrictsParams['nextId']>, TError = unknown>(
 params?: CountDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData, Awaited<ReturnType<typeof countDistricts>>, QueryKey, CountDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountDistrictsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCountDistrictsQueryOptions = <TData = Awaited<ReturnType<typeof countDistricts>>, TError = unknown>(params?: CountDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountDistrictsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countDistricts>>> = ({ signal }) => countDistricts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountDistrictsQueryResult = NonNullable<Awaited<ReturnType<typeof countDistricts>>>
export type CountDistrictsQueryError = unknown


export function useCountDistricts<TData = Awaited<ReturnType<typeof countDistricts>>, TError = unknown>(
 params: undefined |  CountDistrictsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countDistricts>>,
          TError,
          Awaited<ReturnType<typeof countDistricts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountDistricts<TData = Awaited<ReturnType<typeof countDistricts>>, TError = unknown>(
 params?: CountDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countDistricts>>,
          TError,
          Awaited<ReturnType<typeof countDistricts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountDistricts<TData = Awaited<ReturnType<typeof countDistricts>>, TError = unknown>(
 params?: CountDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountDistricts<TData = Awaited<ReturnType<typeof countDistricts>>, TError = unknown>(
 params?: CountDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountDistrictsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchDistricts = (
    params: SearchDistrictsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<DistrictDTO[]>(
      {url: `/api/districts/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchDistrictsQueryKey = (params: SearchDistrictsParams,) => {
    return [`/api/districts/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchDistrictsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchDistricts>>, SearchDistrictsParams['nextId']>, TError = unknown>(params: SearchDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData, Awaited<ReturnType<typeof searchDistricts>>, QueryKey, SearchDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchDistrictsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchDistricts>>, QueryKey, SearchDistrictsParams['nextId']> = ({ signal, pageParam }) => searchDistricts({...params, nextId: pageParam || params?.['nextId']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData, Awaited<ReturnType<typeof searchDistricts>>, QueryKey, SearchDistrictsParams['nextId']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchDistrictsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchDistricts>>>
export type SearchDistrictsInfiniteQueryError = unknown


export function useSearchDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchDistricts>>, SearchDistrictsParams['nextId']>, TError = unknown>(
 params: SearchDistrictsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData, Awaited<ReturnType<typeof searchDistricts>>, QueryKey, SearchDistrictsParams['nextId']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchDistricts>>,
          TError,
          Awaited<ReturnType<typeof searchDistricts>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchDistricts>>, SearchDistrictsParams['nextId']>, TError = unknown>(
 params: SearchDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData, Awaited<ReturnType<typeof searchDistricts>>, QueryKey, SearchDistrictsParams['nextId']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchDistricts>>,
          TError,
          Awaited<ReturnType<typeof searchDistricts>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchDistricts>>, SearchDistrictsParams['nextId']>, TError = unknown>(
 params: SearchDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData, Awaited<ReturnType<typeof searchDistricts>>, QueryKey, SearchDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchDistrictsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchDistricts>>, SearchDistrictsParams['nextId']>, TError = unknown>(
 params: SearchDistrictsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData, Awaited<ReturnType<typeof searchDistricts>>, QueryKey, SearchDistrictsParams['nextId']>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchDistrictsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchDistrictsQueryOptions = <TData = Awaited<ReturnType<typeof searchDistricts>>, TError = unknown>(params: SearchDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchDistrictsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchDistricts>>> = ({ signal }) => searchDistricts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchDistrictsQueryResult = NonNullable<Awaited<ReturnType<typeof searchDistricts>>>
export type SearchDistrictsQueryError = unknown


export function useSearchDistricts<TData = Awaited<ReturnType<typeof searchDistricts>>, TError = unknown>(
 params: SearchDistrictsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchDistricts>>,
          TError,
          Awaited<ReturnType<typeof searchDistricts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchDistricts<TData = Awaited<ReturnType<typeof searchDistricts>>, TError = unknown>(
 params: SearchDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchDistricts>>,
          TError,
          Awaited<ReturnType<typeof searchDistricts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchDistricts<TData = Awaited<ReturnType<typeof searchDistricts>>, TError = unknown>(
 params: SearchDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchDistricts<TData = Awaited<ReturnType<typeof searchDistricts>>, TError = unknown>(
 params: SearchDistrictsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchDistricts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchDistrictsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



