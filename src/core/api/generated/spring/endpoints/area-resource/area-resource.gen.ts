/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AreaDTO,
  CountAreasParams,
  GetAllAreasParams,
  SearchAreasParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getArea = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AreaDTO>(
      {url: `/api/areas/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAreaQueryKey = (id: number,) => {
    return [`/api/areas/${id}`] as const;
    }

    
export const getGetAreaQueryOptions = <TData = Awaited<ReturnType<typeof getArea>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAreaQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getArea>>> = ({ signal }) => getArea(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAreaQueryResult = NonNullable<Awaited<ReturnType<typeof getArea>>>
export type GetAreaQueryError = ErrorType<unknown>


export function useGetArea<TData = Awaited<ReturnType<typeof getArea>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArea>>,
          TError,
          Awaited<ReturnType<typeof getArea>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArea<TData = Awaited<ReturnType<typeof getArea>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArea>>,
          TError,
          Awaited<ReturnType<typeof getArea>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetArea<TData = Awaited<ReturnType<typeof getArea>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetArea<TData = Awaited<ReturnType<typeof getArea>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getArea>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAreaQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateArea = (
    id: number,
    areaDTO: AreaDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<AreaDTO>(
      {url: `/api/areas/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: areaDTO
    },
      options);
    }
  


export const getUpdateAreaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateArea>>, TError,{id: number;data: AreaDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateArea>>, TError,{id: number;data: AreaDTO}, TContext> => {
    
const mutationKey = ['updateArea'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateArea>>, {id: number;data: AreaDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateArea(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAreaMutationResult = NonNullable<Awaited<ReturnType<typeof updateArea>>>
    export type UpdateAreaMutationBody = AreaDTO
    export type UpdateAreaMutationError = ErrorType<unknown>

    export const useUpdateArea = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateArea>>, TError,{id: number;data: AreaDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateArea>>,
        TError,
        {id: number;data: AreaDTO},
        TContext
      > => {

      const mutationOptions = getUpdateAreaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteArea = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/areas/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAreaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArea>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteArea>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteArea'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArea>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteArea(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAreaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArea>>>
    
    export type DeleteAreaMutationError = ErrorType<unknown>

    export const useDeleteArea = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArea>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteArea>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteAreaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateArea = (
    id: number,
    areaDTO: AreaDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<AreaDTO>(
      {url: `/api/areas/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: areaDTO
    },
      options);
    }
  


export const getPartialUpdateAreaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateArea>>, TError,{id: number;data: AreaDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateArea>>, TError,{id: number;data: AreaDTO}, TContext> => {
    
const mutationKey = ['partialUpdateArea'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateArea>>, {id: number;data: AreaDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateArea(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateAreaMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateArea>>>
    export type PartialUpdateAreaMutationBody = AreaDTO
    export type PartialUpdateAreaMutationError = ErrorType<unknown>

    export const usePartialUpdateArea = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateArea>>, TError,{id: number;data: AreaDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateArea>>,
        TError,
        {id: number;data: AreaDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateAreaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllAreas = (
    params?: GetAllAreasParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AreaDTO[]>(
      {url: `/api/areas`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllAreasQueryKey = (params?: GetAllAreasParams,) => {
    return [`/api/areas`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllAreasQueryOptions = <TData = Awaited<ReturnType<typeof getAllAreas>>, TError = ErrorType<unknown>>(params?: GetAllAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllAreasQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAreas>>> = ({ signal }) => getAllAreas(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllAreas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllAreasQueryResult = NonNullable<Awaited<ReturnType<typeof getAllAreas>>>
export type GetAllAreasQueryError = ErrorType<unknown>


export function useGetAllAreas<TData = Awaited<ReturnType<typeof getAllAreas>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllAreasParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAreas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAreas>>,
          TError,
          Awaited<ReturnType<typeof getAllAreas>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAreas<TData = Awaited<ReturnType<typeof getAllAreas>>, TError = ErrorType<unknown>>(
 params?: GetAllAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAreas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAreas>>,
          TError,
          Awaited<ReturnType<typeof getAllAreas>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllAreas<TData = Awaited<ReturnType<typeof getAllAreas>>, TError = ErrorType<unknown>>(
 params?: GetAllAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllAreas<TData = Awaited<ReturnType<typeof getAllAreas>>, TError = ErrorType<unknown>>(
 params?: GetAllAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllAreasQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createArea = (
    areaDTO: AreaDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AreaDTO>(
      {url: `/api/areas`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: areaDTO, signal
    },
      options);
    }
  


export const getCreateAreaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArea>>, TError,{data: AreaDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createArea>>, TError,{data: AreaDTO}, TContext> => {
    
const mutationKey = ['createArea'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createArea>>, {data: AreaDTO}> = (props) => {
          const {data} = props ?? {};

          return  createArea(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAreaMutationResult = NonNullable<Awaited<ReturnType<typeof createArea>>>
    export type CreateAreaMutationBody = AreaDTO
    export type CreateAreaMutationError = ErrorType<unknown>

    export const useCreateArea = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArea>>, TError,{data: AreaDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createArea>>,
        TError,
        {data: AreaDTO},
        TContext
      > => {

      const mutationOptions = getCreateAreaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countAreas = (
    params?: CountAreasParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/areas/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountAreasQueryKey = (params?: CountAreasParams,) => {
    return [`/api/areas/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountAreasQueryOptions = <TData = Awaited<ReturnType<typeof countAreas>>, TError = ErrorType<unknown>>(params?: CountAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountAreasQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countAreas>>> = ({ signal }) => countAreas(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countAreas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountAreasQueryResult = NonNullable<Awaited<ReturnType<typeof countAreas>>>
export type CountAreasQueryError = ErrorType<unknown>


export function useCountAreas<TData = Awaited<ReturnType<typeof countAreas>>, TError = ErrorType<unknown>>(
 params: undefined |  CountAreasParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAreas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countAreas>>,
          TError,
          Awaited<ReturnType<typeof countAreas>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountAreas<TData = Awaited<ReturnType<typeof countAreas>>, TError = ErrorType<unknown>>(
 params?: CountAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAreas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countAreas>>,
          TError,
          Awaited<ReturnType<typeof countAreas>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountAreas<TData = Awaited<ReturnType<typeof countAreas>>, TError = ErrorType<unknown>>(
 params?: CountAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountAreas<TData = Awaited<ReturnType<typeof countAreas>>, TError = ErrorType<unknown>>(
 params?: CountAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountAreasQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchAreas = (
    params: SearchAreasParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<AreaDTO[]>(
      {url: `/api/areas/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchAreasQueryKey = (params: SearchAreasParams,) => {
    return [`/api/areas/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchAreasQueryOptions = <TData = Awaited<ReturnType<typeof searchAreas>>, TError = ErrorType<unknown>>(params: SearchAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchAreasQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchAreas>>> = ({ signal }) => searchAreas(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchAreas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchAreasQueryResult = NonNullable<Awaited<ReturnType<typeof searchAreas>>>
export type SearchAreasQueryError = ErrorType<unknown>


export function useSearchAreas<TData = Awaited<ReturnType<typeof searchAreas>>, TError = ErrorType<unknown>>(
 params: SearchAreasParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAreas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAreas>>,
          TError,
          Awaited<ReturnType<typeof searchAreas>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchAreas<TData = Awaited<ReturnType<typeof searchAreas>>, TError = ErrorType<unknown>>(
 params: SearchAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAreas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchAreas>>,
          TError,
          Awaited<ReturnType<typeof searchAreas>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchAreas<TData = Awaited<ReturnType<typeof searchAreas>>, TError = ErrorType<unknown>>(
 params: SearchAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchAreas<TData = Awaited<ReturnType<typeof searchAreas>>, TError = ErrorType<unknown>>(
 params: SearchAreasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchAreas>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchAreasQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



