/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountProductSubCategoriesParams,
  GetAllProductSubCategoriesParams,
  ProductSubCategoryDTO,
  SearchProductSubCategoriesParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getProductSubCategory = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductSubCategoryDTO>(
      {url: `/api/product-sub-categories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProductSubCategoryQueryKey = (id: number,) => {
    return [`/api/product-sub-categories/${id}`] as const;
    }

    
export const getGetProductSubCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getProductSubCategory>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductSubCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductSubCategoryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductSubCategory>>> = ({ signal }) => getProductSubCategory(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductSubCategory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductSubCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getProductSubCategory>>>
export type GetProductSubCategoryQueryError = ErrorType<unknown>


export function useGetProductSubCategory<TData = Awaited<ReturnType<typeof getProductSubCategory>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductSubCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductSubCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductSubCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductSubCategory<TData = Awaited<ReturnType<typeof getProductSubCategory>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductSubCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductSubCategory>>,
          TError,
          Awaited<ReturnType<typeof getProductSubCategory>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductSubCategory<TData = Awaited<ReturnType<typeof getProductSubCategory>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductSubCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProductSubCategory<TData = Awaited<ReturnType<typeof getProductSubCategory>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductSubCategory>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductSubCategoryQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateProductSubCategory = (
    id: number,
    productSubCategoryDTO: ProductSubCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<ProductSubCategoryDTO>(
      {url: `/api/product-sub-categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productSubCategoryDTO
    },
      options);
    }
  


export const getUpdateProductSubCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductSubCategory>>, TError,{id: number;data: ProductSubCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductSubCategory>>, TError,{id: number;data: ProductSubCategoryDTO}, TContext> => {
    
const mutationKey = ['updateProductSubCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductSubCategory>>, {id: number;data: ProductSubCategoryDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProductSubCategory(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductSubCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductSubCategory>>>
    export type UpdateProductSubCategoryMutationBody = ProductSubCategoryDTO
    export type UpdateProductSubCategoryMutationError = ErrorType<unknown>

    export const useUpdateProductSubCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductSubCategory>>, TError,{id: number;data: ProductSubCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateProductSubCategory>>,
        TError,
        {id: number;data: ProductSubCategoryDTO},
        TContext
      > => {

      const mutationOptions = getUpdateProductSubCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteProductSubCategory = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/product-sub-categories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteProductSubCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductSubCategory>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductSubCategory>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteProductSubCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductSubCategory>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductSubCategory(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductSubCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductSubCategory>>>
    
    export type DeleteProductSubCategoryMutationError = ErrorType<unknown>

    export const useDeleteProductSubCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductSubCategory>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductSubCategory>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductSubCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateProductSubCategory = (
    id: number,
    productSubCategoryDTO: ProductSubCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<ProductSubCategoryDTO>(
      {url: `/api/product-sub-categories/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: productSubCategoryDTO
    },
      options);
    }
  


export const getPartialUpdateProductSubCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateProductSubCategory>>, TError,{id: number;data: ProductSubCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateProductSubCategory>>, TError,{id: number;data: ProductSubCategoryDTO}, TContext> => {
    
const mutationKey = ['partialUpdateProductSubCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateProductSubCategory>>, {id: number;data: ProductSubCategoryDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateProductSubCategory(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateProductSubCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateProductSubCategory>>>
    export type PartialUpdateProductSubCategoryMutationBody = ProductSubCategoryDTO
    export type PartialUpdateProductSubCategoryMutationError = ErrorType<unknown>

    export const usePartialUpdateProductSubCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateProductSubCategory>>, TError,{id: number;data: ProductSubCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateProductSubCategory>>,
        TError,
        {id: number;data: ProductSubCategoryDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateProductSubCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllProductSubCategories = (
    params?: GetAllProductSubCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductSubCategoryDTO[]>(
      {url: `/api/product-sub-categories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllProductSubCategoriesQueryKey = (params?: GetAllProductSubCategoriesParams,) => {
    return [`/api/product-sub-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllProductSubCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAllProductSubCategories>>, TError = ErrorType<unknown>>(params?: GetAllProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllProductSubCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProductSubCategories>>> = ({ signal }) => getAllProductSubCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllProductSubCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllProductSubCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllProductSubCategories>>>
export type GetAllProductSubCategoriesQueryError = ErrorType<unknown>


export function useGetAllProductSubCategories<TData = Awaited<ReturnType<typeof getAllProductSubCategories>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllProductSubCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductSubCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProductSubCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllProductSubCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProductSubCategories<TData = Awaited<ReturnType<typeof getAllProductSubCategories>>, TError = ErrorType<unknown>>(
 params?: GetAllProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductSubCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProductSubCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllProductSubCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllProductSubCategories<TData = Awaited<ReturnType<typeof getAllProductSubCategories>>, TError = ErrorType<unknown>>(
 params?: GetAllProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllProductSubCategories<TData = Awaited<ReturnType<typeof getAllProductSubCategories>>, TError = ErrorType<unknown>>(
 params?: GetAllProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllProductSubCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createProductSubCategory = (
    productSubCategoryDTO: ProductSubCategoryDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductSubCategoryDTO>(
      {url: `/api/product-sub-categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productSubCategoryDTO, signal
    },
      options);
    }
  


export const getCreateProductSubCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductSubCategory>>, TError,{data: ProductSubCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createProductSubCategory>>, TError,{data: ProductSubCategoryDTO}, TContext> => {
    
const mutationKey = ['createProductSubCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductSubCategory>>, {data: ProductSubCategoryDTO}> = (props) => {
          const {data} = props ?? {};

          return  createProductSubCategory(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductSubCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createProductSubCategory>>>
    export type CreateProductSubCategoryMutationBody = ProductSubCategoryDTO
    export type CreateProductSubCategoryMutationError = ErrorType<unknown>

    export const useCreateProductSubCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductSubCategory>>, TError,{data: ProductSubCategoryDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createProductSubCategory>>,
        TError,
        {data: ProductSubCategoryDTO},
        TContext
      > => {

      const mutationOptions = getCreateProductSubCategoryMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countProductSubCategories = (
    params?: CountProductSubCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/product-sub-categories/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountProductSubCategoriesQueryKey = (params?: CountProductSubCategoriesParams,) => {
    return [`/api/product-sub-categories/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountProductSubCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof countProductSubCategories>>, TError = ErrorType<unknown>>(params?: CountProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountProductSubCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countProductSubCategories>>> = ({ signal }) => countProductSubCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countProductSubCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountProductSubCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof countProductSubCategories>>>
export type CountProductSubCategoriesQueryError = ErrorType<unknown>


export function useCountProductSubCategories<TData = Awaited<ReturnType<typeof countProductSubCategories>>, TError = ErrorType<unknown>>(
 params: undefined |  CountProductSubCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductSubCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countProductSubCategories>>,
          TError,
          Awaited<ReturnType<typeof countProductSubCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountProductSubCategories<TData = Awaited<ReturnType<typeof countProductSubCategories>>, TError = ErrorType<unknown>>(
 params?: CountProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductSubCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countProductSubCategories>>,
          TError,
          Awaited<ReturnType<typeof countProductSubCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountProductSubCategories<TData = Awaited<ReturnType<typeof countProductSubCategories>>, TError = ErrorType<unknown>>(
 params?: CountProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountProductSubCategories<TData = Awaited<ReturnType<typeof countProductSubCategories>>, TError = ErrorType<unknown>>(
 params?: CountProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountProductSubCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchProductSubCategories = (
    params: SearchProductSubCategoriesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<ProductSubCategoryDTO[]>(
      {url: `/api/product-sub-categories/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchProductSubCategoriesQueryKey = (params: SearchProductSubCategoriesParams,) => {
    return [`/api/product-sub-categories/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchProductSubCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof searchProductSubCategories>>, TError = ErrorType<unknown>>(params: SearchProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchProductSubCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchProductSubCategories>>> = ({ signal }) => searchProductSubCategories(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchProductSubCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchProductSubCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof searchProductSubCategories>>>
export type SearchProductSubCategoriesQueryError = ErrorType<unknown>


export function useSearchProductSubCategories<TData = Awaited<ReturnType<typeof searchProductSubCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductSubCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductSubCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProductSubCategories>>,
          TError,
          Awaited<ReturnType<typeof searchProductSubCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProductSubCategories<TData = Awaited<ReturnType<typeof searchProductSubCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductSubCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchProductSubCategories>>,
          TError,
          Awaited<ReturnType<typeof searchProductSubCategories>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchProductSubCategories<TData = Awaited<ReturnType<typeof searchProductSubCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchProductSubCategories<TData = Awaited<ReturnType<typeof searchProductSubCategories>>, TError = ErrorType<unknown>>(
 params: SearchProductSubCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchProductSubCategories>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchProductSubCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



