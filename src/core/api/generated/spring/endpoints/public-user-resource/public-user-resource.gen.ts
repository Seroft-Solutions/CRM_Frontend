/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAllPublicUsersParams,
  UserDTO
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getAllPublicUsers = (
    params?: GetAllPublicUsersParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserDTO[]>(
      {url: `/api/users`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllPublicUsersQueryKey = (params?: GetAllPublicUsersParams,) => {
    return [`/api/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllPublicUsersQueryOptions = <TData = Awaited<ReturnType<typeof getAllPublicUsers>>, TError = ErrorType<unknown>>(params?: GetAllPublicUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllPublicUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPublicUsers>>> = ({ signal }) => getAllPublicUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllPublicUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAllPublicUsers>>>
export type GetAllPublicUsersQueryError = ErrorType<unknown>


export function useGetAllPublicUsers<TData = Awaited<ReturnType<typeof getAllPublicUsers>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllPublicUsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPublicUsers>>,
          TError,
          Awaited<ReturnType<typeof getAllPublicUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPublicUsers<TData = Awaited<ReturnType<typeof getAllPublicUsers>>, TError = ErrorType<unknown>>(
 params?: GetAllPublicUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPublicUsers>>,
          TError,
          Awaited<ReturnType<typeof getAllPublicUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllPublicUsers<TData = Awaited<ReturnType<typeof getAllPublicUsers>>, TError = ErrorType<unknown>>(
 params?: GetAllPublicUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllPublicUsers<TData = Awaited<ReturnType<typeof getAllPublicUsers>>, TError = ErrorType<unknown>>(
 params?: GetAllPublicUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllPublicUsers>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllPublicUsersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const search = (
    query: string,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserDTO[]>(
      {url: `/api/users/_search/${query}`, method: 'GET', signal
    },
      options);
    }
  

export const getSearchQueryKey = (query: string,) => {
    return [`/api/users/_search/${query}`] as const;
    }

    
export const getSearchQueryOptions = <TData = Awaited<ReturnType<typeof search>>, TError = ErrorType<unknown>>(query: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchQueryKey(query);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof search>>> = ({ signal }) => search(query, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(query), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchQueryResult = NonNullable<Awaited<ReturnType<typeof search>>>
export type SearchQueryError = ErrorType<unknown>


export function useSearch<TData = Awaited<ReturnType<typeof search>>, TError = ErrorType<unknown>>(
 query: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof search>>,
          TError,
          Awaited<ReturnType<typeof search>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearch<TData = Awaited<ReturnType<typeof search>>, TError = ErrorType<unknown>>(
 query: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof search>>,
          TError,
          Awaited<ReturnType<typeof search>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearch<TData = Awaited<ReturnType<typeof search>>, TError = ErrorType<unknown>>(
 query: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearch<TData = Awaited<ReturnType<typeof search>>, TError = ErrorType<unknown>>(
 query: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof search>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchQueryOptions(query,options)

  const _query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  _query.queryKey = queryOptions.queryKey ;

  return _query;
}



