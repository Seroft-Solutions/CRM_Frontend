/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CallTypeDTO,
  CountCallTypesParams,
  GetAllCallTypesParams,
  SearchCallTypesParams
} from '../../schemas';

import { springServiceMutator } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getCallType = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallTypeDTO>(
      {url: `/api/call-types/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCallTypeQueryKey = (id: number,) => {
    return [`/api/call-types/${id}`] as const;
    }

    
export const getGetCallTypeQueryOptions = <TData = Awaited<ReturnType<typeof getCallType>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCallTypeQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCallType>>> = ({ signal }) => getCallType(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCallTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getCallType>>>
export type GetCallTypeQueryError = unknown


export function useGetCallType<TData = Awaited<ReturnType<typeof getCallType>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallType>>,
          TError,
          Awaited<ReturnType<typeof getCallType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallType<TData = Awaited<ReturnType<typeof getCallType>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCallType>>,
          TError,
          Awaited<ReturnType<typeof getCallType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCallType<TData = Awaited<ReturnType<typeof getCallType>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCallType<TData = Awaited<ReturnType<typeof getCallType>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCallType>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCallTypeQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCallType = (
    id: number,
    callTypeDTO: CallTypeDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallTypeDTO>(
      {url: `/api/call-types/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: callTypeDTO
    },
      options);
    }
  


export const getUpdateCallTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallType>>, TError,{id: number;data: CallTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCallType>>, TError,{id: number;data: CallTypeDTO}, TContext> => {
    
const mutationKey = ['updateCallType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCallType>>, {id: number;data: CallTypeDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCallType(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCallTypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateCallType>>>
    export type UpdateCallTypeMutationBody = CallTypeDTO
    export type UpdateCallTypeMutationError = unknown

    export const useUpdateCallType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCallType>>, TError,{id: number;data: CallTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCallType>>,
        TError,
        {id: number;data: CallTypeDTO},
        TContext
      > => {

      const mutationOptions = getUpdateCallTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCallType = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/call-types/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCallTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallType>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCallType>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteCallType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCallType>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCallType(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCallTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCallType>>>
    
    export type DeleteCallTypeMutationError = unknown

    export const useDeleteCallType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCallType>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCallType>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCallTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateCallType = (
    id: number,
    callTypeDTO: CallTypeDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<CallTypeDTO>(
      {url: `/api/call-types/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: callTypeDTO
    },
      options);
    }
  


export const getPartialUpdateCallTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallType>>, TError,{id: number;data: CallTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallType>>, TError,{id: number;data: CallTypeDTO}, TContext> => {
    
const mutationKey = ['partialUpdateCallType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateCallType>>, {id: number;data: CallTypeDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateCallType(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateCallTypeMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateCallType>>>
    export type PartialUpdateCallTypeMutationBody = CallTypeDTO
    export type PartialUpdateCallTypeMutationError = unknown

    export const usePartialUpdateCallType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateCallType>>, TError,{id: number;data: CallTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateCallType>>,
        TError,
        {id: number;data: CallTypeDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateCallTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllCallTypes = (
    params?: GetAllCallTypesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallTypeDTO[]>(
      {url: `/api/call-types`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllCallTypesQueryKey = (params?: GetAllCallTypesParams,) => {
    return [`/api/call-types`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllCallTypesQueryOptions = <TData = Awaited<ReturnType<typeof getAllCallTypes>>, TError = unknown>(params?: GetAllCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllCallTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCallTypes>>> = ({ signal }) => getAllCallTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllCallTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllCallTypes>>>
export type GetAllCallTypesQueryError = unknown


export function useGetAllCallTypes<TData = Awaited<ReturnType<typeof getAllCallTypes>>, TError = unknown>(
 params: undefined |  GetAllCallTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallTypes>>,
          TError,
          Awaited<ReturnType<typeof getAllCallTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallTypes<TData = Awaited<ReturnType<typeof getAllCallTypes>>, TError = unknown>(
 params?: GetAllCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCallTypes>>,
          TError,
          Awaited<ReturnType<typeof getAllCallTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllCallTypes<TData = Awaited<ReturnType<typeof getAllCallTypes>>, TError = unknown>(
 params?: GetAllCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllCallTypes<TData = Awaited<ReturnType<typeof getAllCallTypes>>, TError = unknown>(
 params?: GetAllCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllCallTypesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createCallType = (
    callTypeDTO: CallTypeDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallTypeDTO>(
      {url: `/api/call-types`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: callTypeDTO, signal
    },
      options);
    }
  


export const getCreateCallTypeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallType>>, TError,{data: CallTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createCallType>>, TError,{data: CallTypeDTO}, TContext> => {
    
const mutationKey = ['createCallType'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCallType>>, {data: CallTypeDTO}> = (props) => {
          const {data} = props ?? {};

          return  createCallType(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCallTypeMutationResult = NonNullable<Awaited<ReturnType<typeof createCallType>>>
    export type CreateCallTypeMutationBody = CallTypeDTO
    export type CreateCallTypeMutationError = unknown

    export const useCreateCallType = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCallType>>, TError,{data: CallTypeDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCallType>>,
        TError,
        {data: CallTypeDTO},
        TContext
      > => {

      const mutationOptions = getCreateCallTypeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countCallTypes = (
    params?: CountCallTypesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/call-types/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountCallTypesQueryKey = (params?: CountCallTypesParams,) => {
    return [`/api/call-types/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountCallTypesQueryOptions = <TData = Awaited<ReturnType<typeof countCallTypes>>, TError = unknown>(params?: CountCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountCallTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countCallTypes>>> = ({ signal }) => countCallTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountCallTypesQueryResult = NonNullable<Awaited<ReturnType<typeof countCallTypes>>>
export type CountCallTypesQueryError = unknown


export function useCountCallTypes<TData = Awaited<ReturnType<typeof countCallTypes>>, TError = unknown>(
 params: undefined |  CountCallTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallTypes>>,
          TError,
          Awaited<ReturnType<typeof countCallTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallTypes<TData = Awaited<ReturnType<typeof countCallTypes>>, TError = unknown>(
 params?: CountCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countCallTypes>>,
          TError,
          Awaited<ReturnType<typeof countCallTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountCallTypes<TData = Awaited<ReturnType<typeof countCallTypes>>, TError = unknown>(
 params?: CountCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountCallTypes<TData = Awaited<ReturnType<typeof countCallTypes>>, TError = unknown>(
 params?: CountCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountCallTypesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchCallTypes = (
    params: SearchCallTypesParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<CallTypeDTO[]>(
      {url: `/api/call-types/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchCallTypesQueryKey = (params: SearchCallTypesParams,) => {
    return [`/api/call-types/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchCallTypesQueryOptions = <TData = Awaited<ReturnType<typeof searchCallTypes>>, TError = unknown>(params: SearchCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchCallTypesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCallTypes>>> = ({ signal }) => searchCallTypes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchCallTypesQueryResult = NonNullable<Awaited<ReturnType<typeof searchCallTypes>>>
export type SearchCallTypesQueryError = unknown


export function useSearchCallTypes<TData = Awaited<ReturnType<typeof searchCallTypes>>, TError = unknown>(
 params: SearchCallTypesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallTypes>>,
          TError,
          Awaited<ReturnType<typeof searchCallTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallTypes<TData = Awaited<ReturnType<typeof searchCallTypes>>, TError = unknown>(
 params: SearchCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchCallTypes>>,
          TError,
          Awaited<ReturnType<typeof searchCallTypes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchCallTypes<TData = Awaited<ReturnType<typeof searchCallTypes>>, TError = unknown>(
 params: SearchCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchCallTypes<TData = Awaited<ReturnType<typeof searchCallTypes>>, TError = unknown>(
 params: SearchCallTypesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCallTypes>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchCallTypesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



