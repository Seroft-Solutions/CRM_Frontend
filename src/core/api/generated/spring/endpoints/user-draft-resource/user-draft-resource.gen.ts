/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Crm Backend API
 * Crm Backend API documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountUserDraftsParams,
  GetAllUserDraftsParams,
  SearchUserDraftsParams,
  UserDraftDTO
} from '../../schemas';

import { springServiceMutator } from "@/core/api/services/spring-service/service-mutator";
import type { ErrorType } from '../../../../services/spring-service/service-mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getUserDraft = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserDraftDTO>(
      {url: `/api/user-drafts/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserDraftQueryKey = (id: number,) => {
    return [`/api/user-drafts/${id}`] as const;
    }

    
export const getGetUserDraftQueryOptions = <TData = Awaited<ReturnType<typeof getUserDraft>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDraft>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDraftQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDraft>>> = ({ signal }) => getUserDraft(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserDraft>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserDraftQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDraft>>>
export type GetUserDraftQueryError = ErrorType<unknown>


export function useGetUserDraft<TData = Awaited<ReturnType<typeof getUserDraft>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDraft>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDraft>>,
          TError,
          Awaited<ReturnType<typeof getUserDraft>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDraft<TData = Awaited<ReturnType<typeof getUserDraft>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDraft>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDraft>>,
          TError,
          Awaited<ReturnType<typeof getUserDraft>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserDraft<TData = Awaited<ReturnType<typeof getUserDraft>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDraft>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetUserDraft<TData = Awaited<ReturnType<typeof getUserDraft>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserDraft>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserDraftQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateUserDraft = (
    id: number,
    userDraftDTO: UserDraftDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<UserDraftDTO>(
      {url: `/api/user-drafts/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userDraftDTO
    },
      options);
    }
  


export const getUpdateUserDraftMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserDraft>>, TError,{id: number;data: UserDraftDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserDraft>>, TError,{id: number;data: UserDraftDTO}, TContext> => {
    
const mutationKey = ['updateUserDraft'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserDraft>>, {id: number;data: UserDraftDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUserDraft(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserDraftMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserDraft>>>
    export type UpdateUserDraftMutationBody = UserDraftDTO
    export type UpdateUserDraftMutationError = ErrorType<unknown>

    export const useUpdateUserDraft = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserDraft>>, TError,{id: number;data: UserDraftDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateUserDraft>>,
        TError,
        {id: number;data: UserDraftDTO},
        TContext
      > => {

      const mutationOptions = getUpdateUserDraftMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteUserDraft = (
    id: number,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<void>(
      {url: `/api/user-drafts/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUserDraftMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserDraft>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserDraft>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteUserDraft'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserDraft>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteUserDraft(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserDraftMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserDraft>>>
    
    export type DeleteUserDraftMutationError = ErrorType<unknown>

    export const useDeleteUserDraft = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserDraft>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserDraft>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteUserDraftMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const partialUpdateUserDraft = (
    id: number,
    userDraftDTO: UserDraftDTO,
 options?: SecondParameter<typeof springServiceMutator>,) => {
      
      
      return springServiceMutator<UserDraftDTO>(
      {url: `/api/user-drafts/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userDraftDTO
    },
      options);
    }
  


export const getPartialUpdateUserDraftMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserDraft>>, TError,{id: number;data: UserDraftDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserDraft>>, TError,{id: number;data: UserDraftDTO}, TContext> => {
    
const mutationKey = ['partialUpdateUserDraft'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof partialUpdateUserDraft>>, {id: number;data: UserDraftDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  partialUpdateUserDraft(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PartialUpdateUserDraftMutationResult = NonNullable<Awaited<ReturnType<typeof partialUpdateUserDraft>>>
    export type PartialUpdateUserDraftMutationBody = UserDraftDTO
    export type PartialUpdateUserDraftMutationError = ErrorType<unknown>

    export const usePartialUpdateUserDraft = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof partialUpdateUserDraft>>, TError,{id: number;data: UserDraftDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof partialUpdateUserDraft>>,
        TError,
        {id: number;data: UserDraftDTO},
        TContext
      > => {

      const mutationOptions = getPartialUpdateUserDraftMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getAllUserDrafts = (
    params?: GetAllUserDraftsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserDraftDTO[]>(
      {url: `/api/user-drafts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllUserDraftsQueryKey = (params?: GetAllUserDraftsParams,) => {
    return [`/api/user-drafts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllUserDraftsQueryOptions = <TData = Awaited<ReturnType<typeof getAllUserDrafts>>, TError = ErrorType<unknown>>(params?: GetAllUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUserDraftsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUserDrafts>>> = ({ signal }) => getAllUserDrafts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllUserDrafts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllUserDraftsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUserDrafts>>>
export type GetAllUserDraftsQueryError = ErrorType<unknown>


export function useGetAllUserDrafts<TData = Awaited<ReturnType<typeof getAllUserDrafts>>, TError = ErrorType<unknown>>(
 params: undefined |  GetAllUserDraftsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserDrafts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserDrafts>>,
          TError,
          Awaited<ReturnType<typeof getAllUserDrafts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUserDrafts<TData = Awaited<ReturnType<typeof getAllUserDrafts>>, TError = ErrorType<unknown>>(
 params?: GetAllUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserDrafts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserDrafts>>,
          TError,
          Awaited<ReturnType<typeof getAllUserDrafts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllUserDrafts<TData = Awaited<ReturnType<typeof getAllUserDrafts>>, TError = ErrorType<unknown>>(
 params?: GetAllUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllUserDrafts<TData = Awaited<ReturnType<typeof getAllUserDrafts>>, TError = ErrorType<unknown>>(
 params?: GetAllUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllUserDraftsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createUserDraft = (
    userDraftDTO: UserDraftDTO,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserDraftDTO>(
      {url: `/api/user-drafts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userDraftDTO, signal
    },
      options);
    }
  


export const getCreateUserDraftMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserDraft>>, TError,{data: UserDraftDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof createUserDraft>>, TError,{data: UserDraftDTO}, TContext> => {
    
const mutationKey = ['createUserDraft'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserDraft>>, {data: UserDraftDTO}> = (props) => {
          const {data} = props ?? {};

          return  createUserDraft(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserDraftMutationResult = NonNullable<Awaited<ReturnType<typeof createUserDraft>>>
    export type CreateUserDraftMutationBody = UserDraftDTO
    export type CreateUserDraftMutationError = ErrorType<unknown>

    export const useCreateUserDraft = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserDraft>>, TError,{data: UserDraftDTO}, TContext>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createUserDraft>>,
        TError,
        {data: UserDraftDTO},
        TContext
      > => {

      const mutationOptions = getCreateUserDraftMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const countUserDrafts = (
    params?: CountUserDraftsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<number>(
      {url: `/api/user-drafts/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountUserDraftsQueryKey = (params?: CountUserDraftsParams,) => {
    return [`/api/user-drafts/count`, ...(params ? [params]: [])] as const;
    }

    
export const getCountUserDraftsQueryOptions = <TData = Awaited<ReturnType<typeof countUserDrafts>>, TError = ErrorType<unknown>>(params?: CountUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountUserDraftsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countUserDrafts>>> = ({ signal }) => countUserDrafts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countUserDrafts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountUserDraftsQueryResult = NonNullable<Awaited<ReturnType<typeof countUserDrafts>>>
export type CountUserDraftsQueryError = ErrorType<unknown>


export function useCountUserDrafts<TData = Awaited<ReturnType<typeof countUserDrafts>>, TError = ErrorType<unknown>>(
 params: undefined |  CountUserDraftsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserDrafts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countUserDrafts>>,
          TError,
          Awaited<ReturnType<typeof countUserDrafts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountUserDrafts<TData = Awaited<ReturnType<typeof countUserDrafts>>, TError = ErrorType<unknown>>(
 params?: CountUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserDrafts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countUserDrafts>>,
          TError,
          Awaited<ReturnType<typeof countUserDrafts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountUserDrafts<TData = Awaited<ReturnType<typeof countUserDrafts>>, TError = ErrorType<unknown>>(
 params?: CountUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCountUserDrafts<TData = Awaited<ReturnType<typeof countUserDrafts>>, TError = ErrorType<unknown>>(
 params?: CountUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountUserDraftsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const searchUserDrafts = (
    params: SearchUserDraftsParams,
 options?: SecondParameter<typeof springServiceMutator>,signal?: AbortSignal
) => {
      
      
      return springServiceMutator<UserDraftDTO[]>(
      {url: `/api/user-drafts/_search`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchUserDraftsQueryKey = (params: SearchUserDraftsParams,) => {
    return [`/api/user-drafts/_search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchUserDraftsQueryOptions = <TData = Awaited<ReturnType<typeof searchUserDrafts>>, TError = ErrorType<unknown>>(params: SearchUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchUserDraftsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchUserDrafts>>> = ({ signal }) => searchUserDrafts(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchUserDrafts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchUserDraftsQueryResult = NonNullable<Awaited<ReturnType<typeof searchUserDrafts>>>
export type SearchUserDraftsQueryError = ErrorType<unknown>


export function useSearchUserDrafts<TData = Awaited<ReturnType<typeof searchUserDrafts>>, TError = ErrorType<unknown>>(
 params: SearchUserDraftsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserDrafts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUserDrafts>>,
          TError,
          Awaited<ReturnType<typeof searchUserDrafts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchUserDrafts<TData = Awaited<ReturnType<typeof searchUserDrafts>>, TError = ErrorType<unknown>>(
 params: SearchUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserDrafts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUserDrafts>>,
          TError,
          Awaited<ReturnType<typeof searchUserDrafts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchUserDrafts<TData = Awaited<ReturnType<typeof searchUserDrafts>>, TError = ErrorType<unknown>>(
 params: SearchUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchUserDrafts<TData = Awaited<ReturnType<typeof searchUserDrafts>>, TError = ErrorType<unknown>>(
 params: SearchUserDraftsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUserDrafts>>, TError, TData>>, request?: SecondParameter<typeof springServiceMutator>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchUserDraftsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



