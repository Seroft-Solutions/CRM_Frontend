// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models for Database Session Strategy
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  // Keycloak specific fields
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text
  
  // Additional metadata
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  
  // Additional session metadata
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  ip_address   String?
  user_agent   String?  @db.Text
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([sessionToken])
  @@index([userId])
  @@index([expires])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  
  // Keycloak specific fields
  keycloak_id   String?   @unique @map("keycloak_id")
  preferred_username String?
  
  // User metadata
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  last_login    DateTime?
  active        Boolean   @default(true)

  accounts Account[]
  sessions Session[]
  roles    UserRole[]
  organizations UserOrganization[]

  @@map("users")
  @@index([email])
  @@index([keycloak_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Additional models for enhanced functionality
model UserRole {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  role    String
  
  created_at DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, role])
  @@map("user_roles")
  @@index([userId])
  @@index([role])
}

model UserOrganization {
  id             String @id @default(cuid())
  userId         String @map("user_id")
  organizationId String @map("organization_id")
  organizationName String @map("organization_name")
  
  created_at DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@map("user_organizations")
  @@index([userId])
  @@index([organizationId])
}
